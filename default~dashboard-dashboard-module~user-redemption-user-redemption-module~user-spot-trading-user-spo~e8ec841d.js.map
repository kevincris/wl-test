{"version":3,"sources":["./src/app/common/card-view/card-view.module.ts","./src/app/dashboard/account-profile/account-profile.component.ts","./src/app/dashboard/dashboard-transactions/dashboard-transactions.component.ts","./src/app/dashboard/dashboard.component.html","./src/app/dashboard/dashboard-routing.module.ts","./src/app/dashboard/dashboard.component.ts","./src/app/dashboard/dashboard.module.ts","./src/app/dashboard/account-cards/account-cards.component.html","./src/app/common/terms-modal/terms-modal.component.ts","./src/app/dashboard/account-profile/account-profile.component.html","./src/app/dashboard/account-profile/activity-feed/activity-feed.component.ts","./src/app/dashboard/account-balance/account-balance.component.ts","./src/app/dashboard/account-cards/account-cards.component.ts","./src/app/dashboard/account-profile/activity-feed/activity-feed.component.html","./src/app/dashboard/account-balance/account-balance.component.html","./src/app/common/terms-modal/terms-modal.component.html"],"names":[],"mappings":"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","file":"default~dashboard-dashboard-module~user-redemption-user-redemption-module~user-spot-trading-user-spo~e8ec841d.js","sourcesContent":["import { NgModule } from '@angular/core'\nimport { IonicModule } from '@ionic/angular'\nimport { CommonModule } from '../common.module'\nimport { CardDetailsPage } from './card-details/card-details.page'\nimport { CardViewPage } from './card-view.page'\nimport { ModalChangePinPage } from './modal-change-pin/modal-change-pin.page'\nimport { ModalDownloadTransactionsPage } from './modal-download-transactions/modal-download-transactions.page'\nimport { ModalFeesPage } from './modal-fees/modal-fees.page'\nimport { ModalOffledgerPage } from './modal-offledger/modal-offledger.page'\nimport { ModalSwapPage } from './modal-swap/modal-swap.page'\nimport { ModalTopupPage } from './modal-topup/modal-topup.page'\nimport { ModalUnloadPage } from './modal-unload/modal-unload.page'\n\n@NgModule({\n    declarations: [\n        CardViewPage,\n        ModalTopupPage,\n        CardDetailsPage,\n        ModalChangePinPage,\n        ModalDownloadTransactionsPage,\n        ModalFeesPage,\n        ModalOffledgerPage,\n        ModalUnloadPage,\n        ModalSwapPage,\n    ],\n    exports: [CardViewPage],\n    imports: [CommonModule, IonicModule],\n})\nexport class CardViewModule {}\n","import { HttpClient } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit } from '@angular/core'\nimport { faCheck, faExclamation } from '@fortawesome/pro-solid-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport { of, Subscription } from 'rxjs'\nimport { IUser, Verification } from '../../common/api-interfaces'\nimport { toStartCase } from '../../common/common.mixin'\nimport { User } from '../../common/models/core/user.model'\nimport { AlertService, AlertTag } from '../../common/services/alert.service'\nimport { SessionService } from '../../common/services/session.service'\n\n@Component({\n    selector: 'account-profile',\n    templateUrl: 'account-profile.component.html',\n})\nexport class AccountProfileComponent implements OnInit, OnDestroy {\n    public activeTab: 'information' | 'audit-log' = 'information'\n    public toStartCase = toStartCase\n    public completeness = 100\n    public verificationStatus = ''\n    public radius = 54\n    public circumference = 2 * Math.PI * this.radius\n    public dashoffset: number\n    public faCheck = faCheck\n    public faExclamation = faExclamation\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        public http: HttpClient,\n        private alertService: AlertService,\n        public session: SessionService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.session.userStream.subscribe(user => {\n                ;(user\n                    ? this.http.get<Verification[]>(`/users/${user.id}/verifications`)\n                    : of([] as Verification[])\n                ).subscribe(verifications => {\n                    this.buildUserVerificationAlerts(new User(user), verifications)\n                })\n            })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public buildProfileLink(_: User): string[] {\n        return ['/account/profile']\n    }\n\n    private buildUserVerificationAlerts(user: IUser, verifications: Verification[]): void {\n        this.alertService.clearByTag(AlertTag.VERIFICATION)\n        const callToAction = {\n            label: this.translate.instant('common.complete-verification-now'),\n            route: '/verify',\n        }\n        if (\n            !user.approvedAt &&\n            verifications.length > 0 &&\n            verifications.every(verification => verification.completed)\n        ) {\n            this.alertService.add({\n                tag: AlertTag.VERIFICATION,\n                severity: 'info',\n                message: this.translate.instant('common.thank-you-for-completing'),\n            })\n        } else if (!user.approvedAt) {\n            this.alertService.add({\n                tag: AlertTag.VERIFICATION,\n                severity: 'danger',\n                message: this.translate.instant('common.your-identity-not-verified'),\n                callToAction,\n            })\n        }\n    }\n}\n","import { Component } from '@angular/core'\nimport { UserTransactionsComponent } from '../../common/user-transactions/user-transactions.component'\n\n@Component({\n    selector: 'dashboard-transactions',\n    templateUrl: '../../common/user-transactions/user-transactions.component.html',\n})\nexport class DashboardTransactionsComponent extends UserTransactionsComponent {\n    public limit = 5\n    protected defaultLimit = 5\n    protected async changeState(): Promise<void> {\n        // do nothing\n    }\n}\n","export default \"<div class=\\\"e2e-dashboard\\\">\\n    <alert-outlet layout=\\\"full-width\\\"></alert-outlet>\\n    <div class=\\\"container pt-page\\\">\\n        <div class=\\\"row\\\" *ngIf=\\\"appName !== 'sgpmx'; else sgpmxTemplate\\\">\\n            <div class=\\\"col\\\">\\n                <div class=\\\"quickbar quickbar-wrap\\\">\\n                    <div class=\\\"quickbar-item\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/deposit']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faArrowAltToBottom\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.deposit' | translate }}</span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"quickbar-item\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/withdraw']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faArrowAltFromBottom\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.withdraw' | translate }}</span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"quickbar-item\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/transfer']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faPaperPlane\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.transfer' | translate }}</span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"quickbar-item\\\" *ngIf=\\\"session.user?.hasPermission('marketplaces')\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/discover']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faCompass\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.discover' | translate }}</span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"quickbar-item\\\" *ngIf=\\\"session.user?.hasPermission('cards')\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/cards']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faCreditCardFront\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.manage-cards' | translate }}</span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"quickbar-item\\\" *ngIf=\\\"session.user?.hasPermission('conversions')\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/services/conversions']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faSync\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.swap-currency' | translate }}</span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"quickbar-item d-none d-xl-flex\\\" *ngIf=\\\"session.user?.hasPermission('invoices')\\\">\\n                        <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/services/invoices']\\\">\\n                            <figure>\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faFileInvoice\\\"></fa-icon>\\n                            </figure>\\n                            <span>{{ 'dashboard.create-invoice' | translate }}</span>\\n                        </a>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"card-deck\\\">\\n            <account-balance class=\\\"card\\\"></account-balance>\\n            <ng-container *ngIf=\\\"session.user?.hasPermission('cards'); else activity\\\">\\n                <account-cards class=\\\"card\\\"></account-cards>\\n            </ng-container>\\n            <ng-template #activity>\\n                <activity-feed class=\\\"card\\\" [cardView]=\\\"true\\\"></activity-feed>\\n            </ng-template>\\n            <account-profile class=\\\"card\\\"></account-profile>\\n        </div>\\n    </div>\\n    <router-outlet></router-outlet>\\n</div>\\n<ng-template #sgpmxTemplate>\\n    <div class=\\\"row no-gutters\\\">\\n        <div class=\\\"col-sm-24 col-lg-14\\\">\\n            <div class=\\\"quickbar quickbar-wrap sgpmx\\\">\\n                <div class=\\\"w-100 pl-2\\\"><b>Bullion</b></div>\\n                <div class=\\\"quickbar-item\\\" *ngIf=\\\"session.user?.hasPermission('trades')\\\">\\n                    <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/buy-and-sell']\\\">\\n                        <figure>\\n                            <fa-icon class=\\\"quickbar-icon text-warning\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faBalanceScale\\\"></fa-icon>\\n                        </figure>\\n                        <span>Buy &amp; Sell</span>\\n                    </a>\\n                </div>\\n                <div class=\\\"quickbar-item\\\">\\n                    <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/transfer']\\\">\\n                        <figure>\\n                            <fa-icon class=\\\"quickbar-icon text-warning\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faExchange\\\"></fa-icon>\\n                        </figure>\\n                        <span>{{ 'dashboard.transfer' | translate }}</span>\\n                    </a>\\n                </div>\\n                <div class=\\\"quickbar-item\\\" *ngIf=\\\"session.user?.hasPermission('redeem')\\\">\\n                    <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/redeem']\\\">\\n                        <figure>\\n                            <fa-icon class=\\\"quickbar-icon text-warning\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faBox\\\"></fa-icon>\\n                        </figure>\\n                        <span>{{ 'common.redeem' | translate }}</span>\\n                    </a>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col-sm-24 col-lg-10 pl-lg-3\\\">\\n            <div class=\\\"quickbar quickbar-wrap sgpmx\\\">\\n                <div class=\\\"w-100 pl-2\\\"><b>Cash</b></div>\\n                <div class=\\\"quickbar-item\\\">\\n                    <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/deposit']\\\">\\n                        <figure class=\\\"success\\\">\\n                            <fa-icon class=\\\"quickbar-icon text-success\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faPlus\\\"></fa-icon>\\n                        </figure>\\n                        <span>{{ 'dashboard.deposit' | translate }}</span>\\n                    </a>\\n                </div>\\n                <div class=\\\"quickbar-item\\\">\\n                    <a class=\\\"quickbar-link\\\" [routerLink]=\\\"['/withdraw']\\\">\\n                        <figure class=\\\"success\\\">\\n                            <fa-icon class=\\\"quickbar-icon text-success\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faMinus\\\"></fa-icon>\\n                        </figure>\\n                        <span>{{ 'dashboard.withdraw' | translate }}</span>\\n                    </a>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-template>\\n\";","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { DashboardTransactionsComponent } from './dashboard-transactions/dashboard-transactions.component'\nimport { DashboardComponent } from './dashboard.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: DashboardComponent,\n        canActivate: [LoggedInAuthGuard],\n        children: [\n            {\n                path: '',\n                component: DashboardTransactionsComponent,\n            },\n        ],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class DashboardRoutingModule {}\n","import { HttpClient } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit } from '@angular/core'\nimport { Router } from '@angular/router'\nimport {\n    faArrowAltFromBottom,\n    faArrowAltToBottom,\n    faBalanceScale,\n    faBox,\n    faCompass,\n    faCreditCardFront,\n    faExchange,\n    faFileInvoice,\n    faMinus,\n    faPaperPlane,\n    faPlus,\n    faSync,\n} from '@fortawesome/pro-duotone-svg-icons'\nimport { faAngleDown } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { forkJoin, Subscription } from 'rxjs'\nimport { delay, flatMap, take } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { ICardOrder, TermsAcceptance } from '../common/api-interfaces'\nimport { TermService } from '../common/services/compliance/term.service'\nimport { ConfirmationResult, ConfirmationService } from '../common/services/confirmation.service'\nimport { SessionService } from '../common/services/session.service'\nimport { ToastrService } from '../common/services/toastr.service'\nimport { TermsModalComponent } from '../common/terms-modal/terms-modal.component'\nimport { CardOrderConfirmationComponent } from '../user-cards/card-order-confirmation/card-order-confirmation.component'\n\n@Component({\n    selector: 'dashboard',\n    templateUrl: 'dashboard.component.html',\n})\nexport class DashboardComponent implements OnInit, OnDestroy {\n    public faArrowAltToBottom = faArrowAltToBottom\n    public faArrowAltFromBottom = faArrowAltFromBottom\n    public faCreditCardFront = faCreditCardFront\n    public faFileInvoice = faFileInvoice\n    public faPaperPlane = faPaperPlane\n    public faSync = faSync\n    public faAngleDown = faAngleDown\n    public faCompass = faCompass\n    public faBalanceScale = faBalanceScale\n    public faExchange = faExchange\n    public faBox = faBox\n    public faPlus = faPlus\n    public faMinus = faMinus\n    public appName = environment.appName\n\n    private unconfirmedCardOrder: ICardOrder\n    private subscriptions = new Subscription()\n\n    constructor(\n        public session: SessionService,\n        public router: Router,\n        public translate: TranslateService,\n        private termService: TermService,\n        private modal: NgbModal,\n        private toastr: ToastrService,\n        private confirmation: ConfirmationService,\n        private http: HttpClient\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.session.userStream\n                .pipe(\n                    take(1),\n                    flatMap(user =>\n                        forkJoin([\n                            this.termService.getTermsAcceptance(user.id),\n                            this.http.get<ICardOrder[]>(`/users/${user.id}/card-orders`),\n                        ])\n                    ),\n                    delay(500)\n                )\n                .subscribe(([termsAcceptance, cardOrders]) => {\n                    // Store result and avoid overlap of terms modal and confirm card order modal\n                    this.unconfirmedCardOrder = cardOrders.find(cardOrder => cardOrder.status === 'unconfirmed')!\n                    if (!termsAcceptance.acceptedAt) {\n                        this.openTermsModal(termsAcceptance)\n                    } else if (!!this.unconfirmedCardOrder) {\n                        this.openConfirmCardOrderModal()\n                    }\n                })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public openTermsModal(termsAcceptance: TermsAcceptance): void {\n        const termsModal = this.modal.open(TermsModalComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n            keyboard: false,\n        })\n\n        termsModal.result\n            .then(() => {\n                this.subscriptions.add(\n                    this.termService.accept(termsAcceptance, true).subscribe(() => {\n                        this.toastr.success(this.translate.instant('dashboard.accepted-terms-successfully'))\n                        if (!!this.unconfirmedCardOrder) {\n                            this.openConfirmCardOrderModal()\n                        }\n                    })\n                )\n            })\n            .catch(() => {\n                this.subscriptions.add(\n                    this.confirmation\n                        .show({\n                            type: 'danger',\n                            text: this.translate.instant('dashboard.you-will-redirected'),\n                            confirmText: this.translate.instant('common.logout'),\n                            confirmClass: 'default',\n                            cancelText: this.translate.instant('dashboard.back-to-terms'),\n                            cancelClass: 'success',\n                        })\n                        .subscribe(async result => {\n                            if (result === ConfirmationResult.CONFIRMED) {\n                                this.session.logout()\n                                await this.router.navigate(['/login'])\n                            } else {\n                                this.openTermsModal(termsAcceptance)\n                            }\n                        })\n                )\n            })\n    }\n\n    public openConfirmCardOrderModal(): void {\n        const cardOrderConfirmationModal = this.modal.open(CardOrderConfirmationComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n            keyboard: false,\n        })\n        ;(cardOrderConfirmationModal.componentInstance as CardOrderConfirmationComponent).cardOrder =\n            this.unconfirmedCardOrder\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { IonicModule } from '@ionic/angular'\nimport { NgxChartsModule } from '@swimlane/ngx-charts'\nimport { CardDummyModule } from '../common/card-dummy/card-dummy.module'\nimport { CardViewModule } from '../common/card-view/card-view.module'\nimport { CommonModule } from '../common/common.module'\nimport { UserActivityModule } from '../common/user-activity/user-activity.module'\nimport { UserTransactionsModule } from '../common/user-transactions/user-transactions.module'\nimport { AccountBalanceComponent } from './account-balance/account-balance.component'\nimport { AccountCardsComponent } from './account-cards/account-cards.component'\nimport { AccountProfileComponent } from './account-profile/account-profile.component'\nimport { ActivityFeedComponent } from './account-profile/activity-feed/activity-feed.component'\nimport { DashboardRoutingModule } from './dashboard-routing.module'\nimport { DashboardTransactionsComponent } from './dashboard-transactions/dashboard-transactions.component'\nimport { DashboardComponent } from './dashboard.component'\n\n@NgModule({\n    declarations: [\n        DashboardComponent,\n        AccountBalanceComponent,\n        ActivityFeedComponent,\n        AccountProfileComponent,\n        AccountCardsComponent,\n        DashboardTransactionsComponent,\n    ],\n    imports: [\n        CommonModule,\n        DashboardRoutingModule,\n        CardDummyModule,\n        NgxChartsModule,\n        UserActivityModule,\n        UserTransactionsModule,\n        CardViewModule,\n        IonicModule,\n    ],\n    exports: [AccountBalanceComponent],\n})\nexport class DashboardModule {}\n","export default \"<div class=\\\"card-header\\\">\\n    {{ 'common.cards' | translate }}\\n    <div class=\\\"card-menu\\\">\\n        <a class=\\\"font-lg\\\" [routerLink]=\\\"['/cards']\\\">{{ 'common.view-all' | translate }} &#x203A;</a>\\n    </div>\\n</div>\\n<ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n    <ng-container *ngIf=\\\"items.length > 0; else orderCard\\\">\\n        <div class=\\\"card-body\\\">\\n            <a href class=\\\"card-preview\\\" *ngFor=\\\"let card of items\\\" (click)=\\\"showCard(card); $event.preventDefault()\\\">\\n                <div class=\\\"card-preview-details\\\">\\n                    <span>{{ formatPan(card.maskedPan) }}</span>\\n                    <span\\n                        class=\\\"text-capitalize badge badge-sm\\\"\\n                        [ngClass]=\\\"{\\n                            'badge-success': card.status === 'active',\\n                            'badge-danger': card.status === 'blocked',\\n                            'badge-warning': card.status === 'inactive'\\n                        }\\\"\\n                        >{{ card.status }}</span\\n                    >\\n                </div>\\n                <ng-container *ngIf=\\\"$any(card).balances$ | async; else loading; let balance\\\">\\n                    <div class=\\\"table-responsive\\\">\\n                        <table class=\\\"table table-borderless table-sm b-t-0 mb-0\\\">\\n                            <tbody>\\n                                <tr *ngFor=\\\"let record of balance; let index = index\\\">\\n                                    <td>\\n                                        <fa-icon class=\\\"mr-2\\\" [style.color]=\\\"getCurrencyColor($any({}))\\\" [icon]=\\\"faCircle\\\"></fa-icon>\\n                                        {{ getCurrencyName(record.curSymbol) }}\\n                                    </td>\\n                                    <td class=\\\"text-right\\\">\\n                                        <span class=\\\"font-size-sm\\\">{{ record.balance | amount: 2 }} {{ record.curSymbol }}</span>\\n                                    </td>\\n                                </tr>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </ng-container>\\n                <ng-template #loading>\\n                    <div class=\\\"d-flex justify-content-center\\\">\\n                        <ion-spinner name=\\\"dots\\\"></ion-spinner>\\n                    </div>\\n                </ng-template>\\n            </a>\\n        </div>\\n        <div class=\\\"card-footer text-center text-muted\\\"><fa-icon [icon]=\\\"faInfoCircle\\\"></fa-icon> {{ 'common.click-card-to-view' | translate }}</div>\\n    </ng-container>\\n    <ng-template #orderCard>\\n        <div class=\\\"card-body\\\">\\n            <div class=\\\"d-flex flex-column justify-content-between h-100\\\">\\n                <div></div>\\n                <div class=\\\"text-center\\\">\\n                    <img src=\\\"/img/icons/delivery.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                    <h5 class=\\\"mb-1\\\">{{ 'common.order-your-card' | translate }}</h5>\\n                    <p class=\\\"mb-3 text-gray\\\" *ngIf=\\\"appName === 'sgpmx'; else text\\\">\\n                        Upgrade to Stacker Market Pro account and get your multi-currency prepaid/debit card.\\n                    </p>\\n                    <ng-template #text>\\n                        <p class=\\\"mb-3 text-gray\\\">{{ 'common.get-your-multi-currency-card-now' | translate: { value: displayName } }}</p>\\n                    </ng-template>\\n\\n                    <div *ngIf=\\\"appName === 'sgpmx'\\\" class=\\\"callout callout-info m-0\\\">\\n                        <h6 class=\\\"text-center font-weight-bold\\\">LIMITED TIME OFFER</h6>\\n                        <p class=\\\"text-center\\\">Receive 200.00 USD worth of silver in your account when you apply now!</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"text-center pt-2\\\">\\n                    <a class=\\\"btn btn-primary-air btn-block\\\" [routerLink]=\\\"['/cards/order']\\\">{{ 'common.apply-now' | translate }}</a>\\n                </div>\\n            </div>\\n        </div>\\n    </ng-template>\\n</ng-container>\\n\";","import { Component, ElementRef, Input, OnDestroy, OnInit } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { of, Subject, Subscription } from 'rxjs'\nimport { flatMap, switchMap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { IUser, Term } from '../api-interfaces'\nimport { TermService } from '../services/compliance/term.service'\nimport { SessionService } from '../services/session.service'\n\ntype TermsModalStep = 'terms' | 'privacy' | 'fees'\n\nconst ease = require('ease-component')\nconst scroll = require('scroll')\n\n@Component({\n    selector: 'terms-modal',\n    templateUrl: 'terms-modal.component.html',\n})\nexport class TermsModalComponent implements OnInit, OnDestroy {\n    @Input()\n    public step: TermsModalStep = 'terms'\n    @Input()\n    public viewOnly = false\n    public term: Term\n    public user?: IUser\n    public appName = environment.appName\n\n    public subheader: string\n\n    public isDown = false\n    private modalContainer: HTMLElement\n\n    private fetchEvent = new Subject<void>()\n    private subscriptions = new Subscription()\n\n    constructor(\n        public activeModal: NgbActiveModal,\n        public translate: TranslateService,\n        private session: SessionService,\n        private termsService: TermService,\n        private element: ElementRef\n    ) {}\n\n    public ngOnInit(): void {\n        this.subheader = this.translate.instant('common.you-must-accept-the-terms')\n        this.subscriptions.add(\n            this.fetchEvent\n                .pipe(\n                    switchMap(() => (this.session.isAuthenticated() ? this.session.userStream : of(undefined))),\n                    flatMap(user => this.termsService.getApplicableTerm(user?.id))\n                )\n                .subscribe(term => {\n                    this.term = term\n                    setTimeout(() => this.scrollHandler())\n                })\n        )\n        this.fetchEvent.next()\n\n        this.modalContainer = this.element.nativeElement.querySelector('.terms-container') as HTMLElement\n        this.modalContainer.addEventListener('scroll', this.scrollHandler)\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n        this.modalContainer.removeEventListener('scroll', this.scrollHandler)\n    }\n\n    public nextStep(): void {\n        this.modalContainer.scrollTop = 0\n\n        if (this.step === 'terms') {\n            this.step = 'privacy'\n        } else if (this.step === 'privacy') {\n            this.step = 'fees'\n        } else {\n            this.activeModal.close()\n        }\n        this.subheader = `${this.translate.instant('common.you-must-accept-the')} ${\n            this.step === 'privacy' ? this.translate.instant('common.privacy-policy') : this.step\n        } ${this.translate.instant('common.to-continue')}`\n    }\n\n    public scrollDown(): void {\n        scroll.top(this.modalContainer, this.modalContainer.scrollHeight - this.modalContainer.clientHeight, {\n            duration: 1000,\n            ease: ease.inOutExpo,\n        })\n    }\n\n    private scrollHandler = () => {\n        // 25px threshold\n        if (this.modalContainer.scrollTop >= this.modalContainer.scrollHeight - this.modalContainer.offsetHeight - 25) {\n            this.isDown = true\n        } else {\n            this.isDown = false\n        }\n    }\n}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"card-header font-lg\\\" *ngIf=\\\"session.user?.hasPermission('cards'); else title\\\">\\n        <ul class=\\\"nav nav-tabs nav-fill card-header-tabs\\\">\\n            <li class=\\\"nav-item\\\">\\n                <a\\n                    href\\n                    class=\\\"nav-link\\\"\\n                    [ngClass]=\\\"{ active: activeTab === 'information' }\\\"\\n                    (click)=\\\"activeTab = 'information'; $event.preventDefault()\\\"\\n                    >{{ 'common.information' | translate }}</a\\n                >\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a\\n                    href\\n                    class=\\\"nav-link\\\"\\n                    [ngClass]=\\\"{ active: activeTab === 'audit-log' }\\\"\\n                    (click)=\\\"activeTab = 'audit-log'; $event.preventDefault()\\\"\\n                    >{{ 'common.audit-log' | translate | titlecase }}</a\\n                >\\n            </li>\\n        </ul>\\n    </div>\\n    <ng-template #title>\\n        <div class=\\\"card-header\\\">{{ 'common.account-information' | translate }}</div>\\n    </ng-template>\\n    <div class=\\\"card-body\\\">\\n        <div class=\\\"flex-column justify-content-between h-100\\\" [ngClass]=\\\"activeTab === 'information' ? 'd-flex' : 'd-none'\\\">\\n            <div class=\\\"d-flex flex-column justify-content-center h-100\\\">\\n                <div class=\\\"text-center position-relative mx-auto\\\">\\n                    <div class=\\\"profile-completeness\\\">\\n                        <user-avatar [user]=\\\"user\\\" size=\\\"xl\\\"></user-avatar>\\n                        <div class=\\\"progress-circle\\\">\\n                            <!-- htmllint attr-bans=\\\"[]\\\" -->\\n                            <svg width=\\\"128\\\" height=\\\"128\\\" viewBox=\\\"0 0 120 120\\\">\\n                                <circle [attr.r]=\\\"radius\\\" cx=\\\"60\\\" cy=\\\"60\\\" stroke-width=\\\"4\\\" class=\\\"progress-circle-meter\\\"></circle>\\n                                <circle\\n                                    [style.strokeDasharray]=\\\"circumference\\\"\\n                                    [style.strokeDashoffset]=\\\"dashoffset\\\"\\n                                    [style.strokeLinecap]=\\\"'round'\\\"\\n                                    [attr.r]=\\\"radius\\\"\\n                                    cx=\\\"60\\\"\\n                                    cy=\\\"60\\\"\\n                                    stroke-width=\\\"6\\\"\\n                                    class=\\\"progress-circle-value\\\"\\n                                ></circle>\\n                            </svg>\\n                            <!-- htmllint attr-bans=\\\"$previous\\\" -->\\n                        </div>\\n                    </div>\\n                    <div\\n                        class=\\\"badge-profile\\\"\\n                        [ngClass]=\\\"!!user.approvedAt ? 'bg-success' : 'bg-warning'\\\"\\n                        [ngbTooltip]=\\\"(!!user.approvedAt ? 'common.your-identity-verified' : 'common.your-identiy-no-verified') | translate\\\"\\n                        placement=\\\"right\\\"\\n                    >\\n                        <fa-icon class=\\\"text-white\\\" [icon]=\\\"!!user.approvedAt ? faCheck : faExclamation\\\" [fixedWidth]=\\\"true\\\"></fa-icon>\\n                    </div>\\n                </div>\\n                <div class=\\\"text-center mb-3\\\">\\n                    <span class=\\\"label\\\" [ngClass]=\\\"user.type === 'personal' ? 'label-success' : 'label-primary'\\\">{{ user.type | startCase }}</span>\\n                </div>\\n                <div class=\\\"text-center\\\">\\n                    <div class=\\\"text-muted font-sm\\\">{{ 'common.account-name' | translate | titlecase }}</div>\\n                    <p class=\\\"profile-value text-primary\\\">{{ user.name }}</p>\\n                    <div class=\\\"text-muted font-sm\\\">{{ 'common.account-number' | translate | titlecase }}</div>\\n                    <p [ngClass]=\\\"user.association ? '' : 'mb-4'\\\">\\n                        <copy-wrap [value]=\\\"user.accountNumber\\\">\\n                            <span class=\\\"profile-value text-body\\\">{{ user.accountNumber | accountNumber }}</span>\\n                        </copy-wrap>\\n                    </p>\\n                    <ng-container *ngIf=\\\"user.association\\\">\\n                        <div class=\\\"text-muted font-sm\\\">{{ 'common.account-group' | translate }}</div>\\n                        <p class=\\\"profile-value text-primary mb-4\\\">{{ user.association.name }}</p>\\n                    </ng-container>\\n                </div>\\n            </div>\\n            <div class=\\\"text-center\\\">\\n                <button class=\\\"btn btn-primary-air btn-block\\\" [routerLink]=\\\"buildProfileLink(user)\\\">{{ 'common.view-profile' | translate }}</button>\\n            </div>\\n        </div>\\n        <div class=\\\"flex-column justify-content-between h-100\\\" [ngClass]=\\\"activeTab === 'audit-log' ? 'd-flex' : 'd-none'\\\">\\n            <activity-feed></activity-feed>\\n            <div class=\\\"text-center pt-2\\\">\\n                <a class=\\\"btn btn-primary-air btn-block\\\" [routerLink]=\\\"['/activities']\\\">{{ 'common.view-all' | translate }}</a>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n\";","import { Component, Input } from '@angular/core'\nimport { UserActivitiesComponent } from '../../../user-activities/user-activities.component'\n\n@Component({\n    selector: 'activity-feed',\n    templateUrl: 'activity-feed.component.html',\n})\nexport class ActivityFeedComponent extends UserActivitiesComponent {\n    @Input()\n    public cardView: boolean\n    public limit = 5\n    protected defaultLimit = 5\n    protected async stateChange(): Promise<void> {\n        // do nothing\n    }\n}\n","import { Component, Input } from '@angular/core'\nimport { faChevronDoubleDown, faChevronDoubleUp } from '@fortawesome/pro-regular-svg-icons'\nimport { faCircle } from '@fortawesome/pro-solid-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport * as getSymbolFromCurrency from 'currency-symbol-map'\nimport { Observable } from 'rxjs'\nimport { filter, flatMap, map, switchMap, take, tap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { ICurrency, Wallet } from '../../common/api-interfaces'\nimport { UserService } from '../../common/services/core/user.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { TokenService } from '../../common/services/token.service'\nimport { getCurrencyColor } from '../../store/currencies/currencies.mixin'\nimport { CurrenciesQuery } from '../../store/currencies/currencies.query'\nimport { WalletsQuery } from '../../store/wallets/wallets.query'\n\n@Component({\n    selector: 'account-balance',\n    templateUrl: 'account-balance.component.html',\n})\nexport class AccountBalanceComponent {\n    @Input()\n    public compact = false\n    @Input()\n    public extended = false\n    @Input()\n    public filter: string[] = []\n\n    public faCircle = faCircle\n    public faChevronDoubleDown = faChevronDoubleDown\n    public faChevronDoubleUp = faChevronDoubleUp\n\n    public getSymbolFromCurrency = getSymbolFromCurrency\n    public getCurrencyColor = getCurrencyColor\n\n    public chartData$: Observable<{ name: string; value: number }[]>\n    public colorScheme = { domain: [] as string[] }\n\n    public currencies$: Observable<(ICurrency & { exchangeRateFlipped: string })[]>\n    public preferredCurrency$: Observable<ICurrency>\n    public totalBalance$: Observable<string>\n    public wallets$: Observable<(Wallet & { value: string; topupAmount?: string })[]>\n    public appName = environment.appName\n    public proceedOfSalesBalance = '0.00'\n\n    public filteredWallets$: Observable<(Wallet & { value: string; topupAmount?: string })[]>\n    public otherWallets$: Observable<(Wallet & { value: string; topupAmount?: string })[]>\n    public showOther = false\n\n    constructor(\n        public session: SessionService,\n        private toastr: ToastrService,\n        private userService: UserService,\n        private tokenService: TokenService,\n        private currenciesQuery: CurrenciesQuery,\n        private walletsQuery: WalletsQuery,\n        public translate: TranslateService\n    ) {\n        this.preferredCurrency$ = this.currenciesQuery.preferredCurrency$\n        this.wallets$ = this.walletsQuery.filteredBalances$\n        this.totalBalance$ = this.walletsQuery.totalBalance$\n\n        this.filteredWallets$ = this.wallets$.pipe(\n            map(wallets => wallets.filter(wallet => !this.filter.length || this.filter.includes(wallet.currency.code)))\n        )\n        this.otherWallets$ = this.wallets$.pipe(\n            map(wallets => wallets.filter(wallet => !this.filter.length || !this.filter.includes(wallet.currency.code)))\n        )\n\n        this.currencies$ = this.currenciesQuery\n            .selectAll({\n                filterBy: currency => ['fiat', 'crypto'].includes(currency.type),\n            })\n            .pipe(\n                map(currencies =>\n                    currencies.map(currency => ({\n                        ...currency,\n                        exchangeRateFlipped:\n                            new BigNumber(1).div(currency.exchangeRate).toFixed(2, 1) === '0.00'\n                                ? new BigNumber(1).div(currency.exchangeRate).toFixed(4, 1)\n                                : new BigNumber(1).div(currency.exchangeRate).toFixed(2, 1),\n                    }))\n                )\n            )\n\n        this.chartData$ = this.walletsQuery.balances$.pipe(\n            tap(wallets => {\n                // Compute chart color based on css primary var\n                for (let i = 0; i < wallets.length; i++) {\n                    this.colorScheme.domain.push(getCurrencyColor(wallets[i].currency, i))\n                }\n            }),\n            map(wallets => {\n                const chartData = wallets.map(wallet => ({\n                    name: `${new BigNumber(wallet.availableBalance).toFormat(2, 1)} ${wallet.currency.code}`,\n                    value: parseFloat(wallet.value),\n                }))\n                if (chartData.length && chartData.every(data => data.value === 0)) {\n                    chartData[0].value = 1\n                }\n                return chartData\n            })\n        )\n    }\n\n    public changePreferredCurrency(currency: ICurrency): void {\n        this.session.userStream\n            .pipe(\n                take(1),\n                filter(user => user.preferredCurrency.code !== currency.code),\n                switchMap(user => this.userService.changePreferredCurrency(user.id, currency)),\n                flatMap(() => this.tokenService.refresh())\n            )\n            .subscribe(() => {\n                this.toastr.success(this.translate.instant('common.preferred-currency-changed'))\n            })\n    }\n\n    public formatTooltip = (item: any) => item.data.name\n}\n","import { currencies as CurrencyMap } from '@aerapass/country-data'\nimport { HttpClient, HttpResponse } from '@angular/common/http'\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { faInfoCircle } from '@fortawesome/pro-light-svg-icons'\nimport { faCircle } from '@fortawesome/pro-solid-svg-icons'\nimport { ModalController } from '@ionic/angular'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { startCase } from 'lodash'\nimport { Observable } from 'rxjs'\nimport { flatMap, map, take, tap } from 'rxjs/operators'\nimport { CardViewPage } from 'src/app/common/card-view/card-view.page'\nimport { ConfirmationService } from 'src/app/common/services/confirmation.service'\nimport { environment } from 'src/environments/environment'\nimport { ICard, ICurrency } from '../../common/api-interfaces'\nimport { ListComponent } from '../../common/list.component'\nimport { SessionService } from '../../common/services/session.service'\nimport { getCurrencyColor } from '../../store/currencies/currencies.mixin'\nimport { CurrenciesQuery } from '../../store/currencies/currencies.query'\n\n@Component({\n    selector: 'account-cards',\n    templateUrl: 'account-cards.component.html',\n})\nexport class AccountCardsComponent extends ListComponent<ICard> implements OnInit {\n    public getCurrencyColor = getCurrencyColor\n    public faCircle = faCircle\n    public faInfoCircle = faInfoCircle\n    public limit = 4\n    public currencies: ICurrency[]\n    public displayName = environment.displayName\n    public appName = environment.appName\n    private isLoading = false\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        confirmation: ConfirmationService,\n        private currenciesQuery: CurrenciesQuery,\n        private modalController: ModalController\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n    }\n\n    public ngOnInit(): void {\n        super.ngOnInit()\n        this.subscriptions.add(\n            this.currenciesQuery.selectAll().subscribe(currencies => {\n                this.currencies = currencies\n            })\n        )\n    }\n\n    public find(): Observable<HttpResponse<any[]>> {\n        return this.session.userStream.pipe(\n            take(1),\n            tap(user => {\n                this.apiUrl = `/users/${user.id}/cards`\n            }),\n            flatMap(() => super.find())\n        )\n    }\n\n    public async showCard(card: ICard): Promise<void> {\n        if (this.isLoading) {\n            return\n        }\n        this.isLoading = true\n        const modal = await this.modalController.create({\n            component: CardViewPage,\n            componentProps: {\n                item: card,\n            },\n        })\n        return await modal.present().finally(() => {\n            this.isLoading = false\n        })\n    }\n\n    public getCurrencyByCode(code: string): ICurrency | undefined {\n        return this.currencies.find(currency => currency.code === code)\n    }\n\n    public getCurrencyName(code: string): string {\n        if (code === 'USD') {\n            return 'US Dollar'\n        }\n        const currency = CurrencyMap[code]\n        if (currency) {\n            return startCase(currency.name)\n        }\n        return ''\n    }\n\n    public formatPan(pan: string): string {\n        return `${pan.slice(0, 4)} ${pan.slice(4, 8)} ${pan.slice(8, 12)} ${pan.slice(12)}`\n    }\n\n    protected mapItem(item: any): ICard {\n        item.balances$ = this.http.get<any[]>(`/cards/${item.id}/balance`).pipe(\n            map(balance => balance.filter(currency => currency.balance > 0)),\n            map(balance => (balance.length ? balance : [{ curSymbol: 'USD', balance: 0 }]))\n        )\n        return item\n    }\n}\n","export default \"<div class=\\\"card-header\\\" *ngIf=\\\"cardView\\\">\\n    {{ 'common.activities' | translate }}\\n    <div class=\\\"card-menu\\\">\\n        <a class=\\\"font-lg\\\" [routerLink]=\\\"['/activities']\\\">{{ 'common.view-all' | translate }} &#x203A;</a>\\n    </div>\\n</div>\\n<div [ngClass]=\\\"{ 'card-body': cardView }\\\">\\n    <div class=\\\"activity-feed\\\">\\n        <div class=\\\"feed-item\\\" [ngClass]=\\\"activity.severity\\\" *ngFor=\\\"let activity of itemsStream | async\\\">\\n            <div class=\\\"date\\\">{{ activity.createdAt | formatDistanceToNow: true:true }}</div>\\n            <div class=\\\"text\\\">\\n                <user-activity [activity]=\\\"activity\\\"></user-activity>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \"<ng-container *ngIf=\\\"preferredCurrency$ | async; let preferredCurrency\\\">\\n    <div class=\\\"card-header d-flex justify-content-between\\\">\\n        <span>{{ 'account-balance.account-balance' | translate }}</span>\\n        <div ngbDropdown placement=\\\"bottom-right\\\" class=\\\"account-balance-dropdown\\\" *ngIf=\\\"!compact\\\">\\n            <a href class=\\\"font-lg\\\" (click)=\\\"$event.preventDefault()\\\" ngbDropdownToggle>in {{ preferredCurrency.code }} &#x203A;</a>\\n            <div class=\\\"dropdown-menu-right\\\" ngbDropdownMenu>\\n                <h6 class=\\\"dropdown-header title-decorative text-center\\\">{{ 'common.choose-preferred-currency' | translate }}</h6>\\n                <div class=\\\"dropdown-divider mt-1\\\"></div>\\n                <button\\n                    ngbDropdownItem\\n                    *ngFor=\\\"let currency of currencies$ | async\\\"\\n                    [ngClass]=\\\"{ active: preferredCurrency.code === currency.code }\\\"\\n                    (click)=\\\"changePreferredCurrency(currency)\\\"\\n                >\\n                    <div>{{ currency.code }} ({{ currency.name }})</div>\\n                    <small class=\\\"text-muted\\\">\\n                        1.00 {{ currency.code }} = {{ currency.exchangeRateFlipped | amount: currency.decimalPlaces }} USD\\n                    </small>\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"d-flex flex-column justify-content-between h-100\\\">\\n        <div class=\\\"statistic-box\\\" *ngIf=\\\"!compact\\\">\\n            <div class=\\\"box-content\\\">\\n                <div class=\\\"box-chart-wrapper\\\">\\n                    <ngx-charts-pie-chart\\n                        *ngIf=\\\"chartData$ | async; let chartData\\\"\\n                        [scheme]=\\\"colorScheme\\\"\\n                        [results]=\\\"chartData\\\"\\n                        [legend]=\\\"false\\\"\\n                        [doughnut]=\\\"true\\\"\\n                        [arcWidth]=\\\"0.29\\\"\\n                        [tooltipText]=\\\"formatTooltip\\\"\\n                    >\\n                    </ngx-charts-pie-chart>\\n                </div>\\n            </div>\\n        </div>\\n        <div>\\n            <div class=\\\"table-responsive\\\">\\n                <ng-container *ngIf=\\\"appName !== 'sgpmx'; else sgpmx\\\">\\n                    <ng-container *ngIf=\\\"!extended; else extendedTemplate\\\">\\n                        <table class=\\\"table table-striped table-borderless table-card b-t-0 mb-0\\\">\\n                            <tbody>\\n                                <tr *ngFor=\\\"let wallet of wallets$ | async; let index = index\\\">\\n                                    <td>\\n                                        <fa-icon class=\\\"mr-2\\\" [style.color]=\\\"colorScheme.domain[index]\\\" [icon]=\\\"faCircle\\\"></fa-icon>\\n                                        {{ wallet.currency.name }}\\n                                    </td>\\n                                    <td class=\\\"text-right\\\">\\n                                        <span\\n                                            class=\\\"font-size-sm\\\"\\n                                            placement=\\\"left\\\"\\n                                            [ngbTooltip]=\\\"\\n                                                (preferredCurrency?.code === wallet.currency.code ? '' : '~') +\\n                                                ($any(wallet).value | amount: 2) +\\n                                                ' ' +\\n                                                preferredCurrency?.code\\n                                            \\\"\\n                                            >{{ wallet.availableBalance | amount: wallet.currency.decimalPlaces }} {{ wallet.currency.code }}</span\\n                                        >\\n                                    </td>\\n                                </tr>\\n                            </tbody>\\n                        </table>\\n                    </ng-container>\\n                </ng-container>\\n                <ng-template #sgpmx>\\n                    <table class=\\\"table table-striped table-borderless table-card b-t-0 mb-0\\\">\\n                        <tbody>\\n                            <tr *ngFor=\\\"let wallet of wallets$ | async; let index = index\\\">\\n                                <td>\\n                                    <ng-container [ngSwitch]=\\\"wallet.currency.code\\\">\\n                                        <ng-container *ngSwitchDefault>\\n                                            <fa-icon\\n                                                class=\\\"mr-2\\\"\\n                                                [style.color]=\\\"getCurrencyColor(wallet.currency, index)\\\"\\n                                                [icon]=\\\"faCircle\\\"\\n                                            ></fa-icon>\\n                                            {{ wallet.currency.name }}\\n                                        </ng-container>\\n                                        <ng-container *ngSwitchCase=\\\"'AU'\\\">\\n                                            <div class=\\\"d-flex align-items-center\\\">\\n                                                <fa-icon\\n                                                    class=\\\"mr-2\\\"\\n                                                    [style.color]=\\\"getCurrencyColor(wallet.currency, index)\\\"\\n                                                    [icon]=\\\"faCircle\\\"\\n                                                ></fa-icon>\\n                                                <div>\\n                                                    <div>Gold</div>\\n                                                    <span class=\\\"font-sm text-muted\\\">Troy Ounce</span>\\n                                                </div>\\n                                            </div>\\n                                        </ng-container>\\n                                        <ng-container *ngSwitchCase=\\\"'AG'\\\">\\n                                            <div class=\\\"d-flex align-items-center\\\">\\n                                                <fa-icon\\n                                                    class=\\\"mr-2\\\"\\n                                                    [style.color]=\\\"getCurrencyColor(wallet.currency, index)\\\"\\n                                                    [icon]=\\\"faCircle\\\"\\n                                                ></fa-icon>\\n                                                <div>\\n                                                    <div>Silver</div>\\n                                                    <span class=\\\"font-sm text-muted\\\">Troy Ounce</span>\\n                                                </div>\\n                                            </div>\\n                                        </ng-container>\\n                                    </ng-container>\\n                                </td>\\n                                <td class=\\\"text-right\\\">\\n                                    <span class=\\\"font-size-sm\\\">\\n                                        {{ wallet.availableBalance | amount: wallet.currency.decimalPlaces }} {{ wallet.currency.code }} </span\\n                                    ><br />\\n                                    <ng-container *ngIf=\\\"wallet.currency.code !== 'USD'; else usd\\\">\\n                                        <span class=\\\"font-sm text-muted\\\">{{ $any(wallet).usdValue | amount: 2 }} USD</span>\\n                                    </ng-container>\\n                                    <ng-template #usd>\\n                                        <div class=\\\"small text-muted\\\">\\n                                            {{ compact ? 'TUA' : 'Top Up Account' }}: {{ wallet.topupAmount | amount: 2 }} USD\\n                                        </div>\\n                                        <span class=\\\"small text-muted\\\">\\n                                            {{ compact ? 'SP' : 'Sales Proceeds' }}:\\n                                            {{ wallet.proceedsOfSales | amount: 2 }}\\n                                            USD\\n                                        </span>\\n                                    </ng-template>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </ng-template>\\n                <ng-template #extendedTemplate>\\n                    <table class=\\\"table table-striped table-borderless table-card b-t-0 mb-0\\\">\\n                        <tbody>\\n                            <tr *ngFor=\\\"let wallet of filteredWallets$ | async; let index = index\\\">\\n                                <td>\\n                                    <fa-icon class=\\\"mr-2\\\" [style.color]=\\\"getCurrencyColor(wallet.currency, index)\\\" [icon]=\\\"faCircle\\\"></fa-icon>\\n                                    {{ wallet.currency.name }}\\n                                </td>\\n                                <td class=\\\"text-right\\\">\\n                                    <span class=\\\"font-size-sm\\\">\\n                                        {{ wallet.availableBalance | amount: wallet.currency.decimalPlaces }} {{ wallet.currency.code }} </span\\n                                    ><br />\\n                                    <span class=\\\"font-sm text-muted\\\">{{ $any(wallet).usdValue | amount: 2 }} USD</span>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                    <div class=\\\"overlay overlay-dark\\\" [(ngbCollapse)]=\\\"!showOther\\\">\\n                        <table class=\\\"table table-striped table-borderless table-card b-t-1 mb-0\\\">\\n                            <tbody>\\n                                <tr *ngFor=\\\"let wallet of otherWallets$ | async; let index = index\\\">\\n                                    <td>\\n                                        <fa-icon class=\\\"mr-2\\\" [style.color]=\\\"getCurrencyColor(wallet.currency, index)\\\" [icon]=\\\"faCircle\\\"></fa-icon>\\n                                        {{ wallet.currency.name }}\\n                                    </td>\\n                                    <td class=\\\"text-right\\\">\\n                                        <span class=\\\"font-size-sm\\\">\\n                                            {{ wallet.availableBalance | amount: wallet.currency.decimalPlaces }} {{ wallet.currency.code }} </span\\n                                        ><br />\\n                                        <span class=\\\"font-sm text-muted\\\">{{ $any(wallet).usdValue | amount: 2 }} USD</span>\\n                                    </td>\\n                                </tr>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </ng-template>\\n            </div>\\n            <div class=\\\"card-footer text-center p-0\\\" *ngIf=\\\"extended\\\">\\n                <a href=\\\"javascript:;\\\" class=\\\"d-block text-muted text-primary-hover py-2\\\" (click)=\\\"showOther = !showOther\\\">\\n                    <fa-icon [icon]=\\\"!showOther ? faChevronDoubleDown : faChevronDoubleUp\\\"></fa-icon>\\n                </a>\\n            </div>\\n            <div class=\\\"card-footer text-center text-muted\\\" *ngIf=\\\"!compact\\\">\\n                {{ 'common.total-balance' | translate | sentenceCase }}\\n                <span class=\\\"text-primary\\\">\\n                    {{ totalBalance$ | async | amount: preferredCurrency?.decimalPlaces }} {{ preferredCurrency?.code }}\\n                </span>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n\";","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">\\n        {{\\n            (step === 'terms' ? 'common.terms-and-conditions' : step === 'privacy' ? 'common.data-privacy-notice' : 'common.fee-schedule')\\n                | translate\\n                | titlecase\\n        }}\\n    </h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n</div>\\n<div *ngIf=\\\"!viewOnly\\\" class=\\\"modal-subheader\\\">\\n    {{ subheader }}\\n</div>\\n<div class=\\\"modal-body terms-container text-body e2e-terms-modal\\\">\\n    <ng-container *ngIf=\\\"term; else loadingContent\\\">\\n        <div *ngIf=\\\"step === 'terms'\\\" [innerHtml]=\\\"term.terms | safeHtml\\\"></div>\\n        <div *ngIf=\\\"step === 'privacy'\\\" [innerHtml]=\\\"term.privacy | safeHtml\\\"></div>\\n        <div *ngIf=\\\"step === 'fees'\\\">\\n            <ng-container *ngIf=\\\"appName !== 'sgpmx'; else sgpmxFees\\\">\\n                <term-fees [user]=\\\"user\\\"></term-fees>\\n            </ng-container>\\n            <ng-template #sgpmxFees>\\n                <sgpmx-term-fees [user]=\\\"user\\\"></sgpmx-term-fees>\\n            </ng-template>\\n        </div>\\n    </ng-container>\\n    <ng-template #loadingContent>\\n        <svg class=\\\"spinner spinner-dark\\\" viewBox=\\\"0 0 50 50\\\">\\n            <circle class=\\\"path\\\" cx=\\\"25\\\" cy=\\\"25\\\" r=\\\"20\\\" fill=\\\"none\\\" stroke-width=\\\"5\\\"></circle>\\n        </svg>\\n        <p class=\\\"mb-0 mt-5 text-center\\\">{{ 'common.loading-terms' | translate }}</p>\\n    </ng-template>\\n</div>\\n<div class=\\\"modal-footer flex-column flex-md-row justify-content-center justify-content-md-end\\\">\\n    <ng-container *ngIf=\\\"!viewOnly; else closeButton\\\">\\n        <button class=\\\"btn btn-link mr-md-auto mb-2 mb-md-0 e2e-scroll-down-button\\\" (click)=\\\"scrollDown()\\\">\\n            {{ 'common.scroll-to-bottom' | translate }}\\n        </button>\\n        <div class=\\\"d-flex justify-content-end\\\">\\n            <button class=\\\"btn btn-default btn-w-sm ml-1\\\" (click)=\\\"activeModal.dismiss()\\\">{{ 'common.decline' | translate }}</button>\\n            <button class=\\\"btn btn-success btn-w-sm ml-1 e2e-accept-button\\\" (click)=\\\"nextStep()\\\" [disabled]=\\\"!isDown\\\">\\n                {{ 'common.accept' | translate }}\\n            </button>\\n        </div>\\n    </ng-container>\\n    <ng-template #closeButton>\\n        <div class=\\\"d-flex justify-content-end\\\">\\n            <button class=\\\"btn btn-default btn-w-sm\\\" (click)=\\\"activeModal.dismiss()\\\">{{ 'common.close' | translate }}</button>\\n        </div>\\n    </ng-template>\\n</div>\\n\";"],"sourceRoot":"webpack:///"}