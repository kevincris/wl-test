{"version":3,"sources":["./src/app/registration/registration.component.html","./src/app/common/terms-modal/term-fees/term-fees.component.html","./src/app/registration/registration.component.ts","./src/app/store/fees/fees.store.ts","./src/app/common/services/compliance/term.service.ts","./src/app/store/fees/fees.query.ts","./src/app/registration/registration.module.ts","./src/app/common/terms-modal/sgpmx-term-fees/sgpmx-term-fees.component.html","./src/app/registration/registration-notice/registration-notice.component.ts","./src/app/registration/registration-notice/registration-notice.component.html","./src/app/common/terms-modal/sgpmx-term-fees/sgpmx-term-fees.component.ts","./src/app/registration/email-verification-modal.component.html","./node_modules/ease-component/index.js","./src/app/common/terms-modal/terms-modal.component.ts","./src/app/common/terms-modal/terms-modal.module.ts","./src/app/common/terms-modal/term-fees/term-fees.component.ts","./src/app/store/fees/fees.service.ts","./src/app/registration/email-verification-modal.component.ts","./src/app/common/terms-modal/terms-modal.component.html","./src/app/registration/registration.auth-guard.ts","./node_modules/scroll/index.js","./src/app/registration/registration-routing.module.ts"],"names":[],"mappings":"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","file":"registration-registration-module.js","sourcesContent":["export default \"<div class=\\\"registration-page fullscreen-bg-body e2e-registration-page\\\">\\n    <div class=\\\"registration-box\\\">\\n        <a [routerLink]=\\\"['/']\\\">\\n            <img class=\\\"registration-logo\\\" [src]=\\\"getLogo()\\\" />\\n        </a>\\n        <div class=\\\"card shadow b-a-0\\\">\\n            <div class=\\\"card-body\\\">\\n                <img src=\\\"/img/icons/wallet.svg\\\" draggable=\\\"false\\\" class=\\\"float-right\\\" />\\n                <h2 class=\\\"text-primary mb-1\\\">{{ 'common.sign-up' | translate }}</h2>\\n                <p class=\\\"text-custom\\\">{{ 'common.create-your-account' | translate: { value: displayName } }}</p>\\n                <p class=\\\"callout callout-info mb-3 text-gray\\\" *ngIf=\\\"referrerId\\\">\\n                    {{ 'common.you-have-been-invited-by' | translate }}\\n                    <span class=\\\"text-primary\\\" *ngIf=\\\"referrer; else loading\\\">{{ referrer.user.name }}</span>\\n                </p>\\n                <div *ngIf=\\\"isRegistrationDisabled\\\" class=\\\"callout callout-warning text-warning\\\">\\n                    {{ 'common.registration-disabled' | translate }}\\n                </div>\\n                <alert-outlet></alert-outlet>\\n                <div class=\\\"callout callout-danger mt-0\\\" *ngIf=\\\"appName !== 'sgpmx' && user.type === 'business'\\\">\\n                    <p class=\\\"mb-0\\\">{{ 'common.please-note-that' | translate }} <b>500 USD</b> {{ 'common.is-charged' | translate }}</p>\\n                </div>\\n                <form\\n                    #registrationForm=\\\"ngForm\\\"\\n                    class=\\\"form-validation\\\"\\n                    (ngSubmit)=\\\"submit()\\\"\\n                    [ngClass]=\\\"{ 'ng-submitted': registrationForm.submitted }\\\"\\n                    novalidate\\n                >\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"form-group col-sm-12\\\">\\n                            <div class=\\\"custom-control custom-radio\\\">\\n                                <input\\n                                    type=\\\"radio\\\"\\n                                    id=\\\"typePersonal\\\"\\n                                    name=\\\"type\\\"\\n                                    value=\\\"personal\\\"\\n                                    class=\\\"custom-control-input\\\"\\n                                    [(ngModel)]=\\\"user.type\\\"\\n                                />\\n                                <label class=\\\"custom-control-label font-md\\\" for=\\\"typePersonal\\\">{{ 'common.personal-account' | translate }}</label>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group col-sm-12\\\">\\n                            <div class=\\\"custom-control custom-radio\\\">\\n                                <input\\n                                    type=\\\"radio\\\"\\n                                    id=\\\"typeCorporate\\\"\\n                                    name=\\\"type\\\"\\n                                    value=\\\"business\\\"\\n                                    class=\\\"custom-control-input\\\"\\n                                    [(ngModel)]=\\\"user.type\\\"\\n                                />\\n                                <label class=\\\"custom-control-label font-md\\\" for=\\\"typeCorporate\\\">{{ 'common.corporate-account' | translate }}</label>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\" *ngIf=\\\"user.type === 'business'\\\">\\n                        <label class=\\\"font-md\\\" for=\\\"companyName\\\">{{ 'common.entity-name' | translate }}</label>\\n                        <input\\n                            type=\\\"text\\\"\\n                            class=\\\"form-control form-control-lg\\\"\\n                            id=\\\"companyName\\\"\\n                            name=\\\"companyName\\\"\\n                            [(ngModel)]=\\\"business.name\\\"\\n                            autocomplete=\\\"organization\\\"\\n                            #companyName=\\\"ngModel\\\"\\n                            required\\n                        />\\n                        <div *ngIf=\\\"companyName.invalid && (registrationForm.submitted || companyName.dirty)\\\" class=\\\"error-messages\\\">\\n                            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"companyName?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"form-group col-sm-12\\\">\\n                            <label class=\\\"font-md\\\" for=\\\"firstName\\\">{{ 'common.first-name' | translate }}</label>\\n                            <input\\n                                type=\\\"text\\\"\\n                                class=\\\"form-control form-control-lg\\\"\\n                                id=\\\"firstName\\\"\\n                                name=\\\"firstName\\\"\\n                                [(ngModel)]=\\\"details.firstName\\\"\\n                                autocomplete=\\\"given-name\\\"\\n                                #firstName=\\\"ngModel\\\"\\n                                required\\n                                nameValidator\\n                            />\\n                            <div *ngIf=\\\"firstName.invalid && (registrationForm.submitted || firstName.dirty)\\\" class=\\\"error-messages\\\">\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"firstName?.errors?.required\\\">\\n                                    {{ 'common.this-is-required' | translate }}\\n                                </div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"firstName?.errors?.nameError\\\">\\n                                    {{ 'common.only-alphabets-are-allowed' | translate }}\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group col-sm-12\\\">\\n                            <label class=\\\"font-md\\\" for=\\\"lastName\\\">{{ 'common.last-name' | translate }}</label>\\n                            <input\\n                                type=\\\"text\\\"\\n                                class=\\\"form-control form-control-lg\\\"\\n                                id=\\\"lastName\\\"\\n                                name=\\\"lastName\\\"\\n                                [(ngModel)]=\\\"details.lastName\\\"\\n                                autocomplete=\\\"family-name\\\"\\n                                #lastName=\\\"ngModel\\\"\\n                                required\\n                                nameValidator\\n                            />\\n                            <div *ngIf=\\\"lastName.invalid && (registrationForm.submitted || lastName.dirty)\\\" class=\\\"error-messages\\\">\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"lastName?.errors?.required\\\">\\n                                    {{ 'common.this-is-required' | translate }}\\n                                </div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"lastName?.errors?.nameError\\\">\\n                                    {{ 'common.only-alphabets-are-allowed' | translate }}\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"font-md\\\" for=\\\"email\\\">{{ 'common.email' | translate }}</label>\\n                        <input\\n                            type=\\\"email\\\"\\n                            id=\\\"email\\\"\\n                            name=\\\"email\\\"\\n                            class=\\\"form-control form-control-lg\\\"\\n                            [(ngModel)]=\\\"user.email\\\"\\n                            [disabled]=\\\"isInvitation\\\"\\n                            autocomplete=\\\"email\\\"\\n                            #email=\\\"ngModel\\\"\\n                            email\\n                            required\\n                        />\\n                        <div *ngIf=\\\"email.invalid && (registrationForm.submitted || email.dirty)\\\" class=\\\"error-messages\\\">\\n                            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"email?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"email?.errors?.email\\\">{{ 'common.not-a-valid-email-address' | translate }}</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"font-md\\\" for=\\\"password\\\">{{ 'common.password' | translate }}</label>\\n                        <input\\n                            type=\\\"password\\\"\\n                            id=\\\"password\\\"\\n                            name=\\\"password\\\"\\n                            class=\\\"form-control form-control-lg\\\"\\n                            [(ngModel)]=\\\"user.password\\\"\\n                            [passwordStrength]=\\\"requiredPasswordStrength\\\"\\n                            (onEntropyChange)=\\\"passwordStrength = $event\\\"\\n                            autocomplete=\\\"new-password\\\"\\n                            #password=\\\"ngModel\\\"\\n                            required\\n                        />\\n                        <div class=\\\"mt-2\\\">\\n                            <password-strength-bar\\n                                [requiredStrength]=\\\"requiredPasswordStrength\\\"\\n                                [strength]=\\\"passwordStrength\\\"\\n                            ></password-strength-bar>\\n                        </div>\\n                        <div *ngIf=\\\"password.invalid && (registrationForm.submitted || password.dirty)\\\" class=\\\"error-messages\\\">\\n                            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"password?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"password?.errors?.weakPassword\\\">\\n                                {{ 'common.this-is-required' | translate }}\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"form-group col-sm-12\\\">\\n                            <label class=\\\"form-control-label font-md\\\" for=\\\"birthday\\\">{{ 'common.birthday' | translate }}</label>\\n                            <input\\n                                class=\\\"form-control form-control-lg\\\"\\n                                type=\\\"text\\\"\\n                                id=\\\"birthday\\\"\\n                                name=\\\"birthday\\\"\\n                                [(ngModel)]=\\\"birthday\\\"\\n                                mask=\\\"00/00/0000\\\"\\n                                #birthdayField=\\\"ngModel\\\"\\n                                required\\n                                birthdayValidator\\n                            />\\n                            <small class=\\\"form-text text-muted\\\">{{ 'common.format' | translate }}: dd/mm/yyyy</small>\\n                            <div *ngIf=\\\"birthdayField.invalid && (registrationForm.submitted || birthdayField.dirty)\\\" class=\\\"error-messages\\\">\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"birthdayField?.errors?.required\\\">\\n                                    {{ 'common.this-is-required' | translate }}\\n                                </div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"birthdayField?.errors?.invalidDate\\\">\\n                                    {{ 'common.invalid-date' | translate }}\\n                                </div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"birthdayField?.errors?.dateLongAgo\\\">\\n                                    {{ 'common.date-should-be-1900' | translate }}\\n                                </div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"birthdayField?.errors?.dateInFuture\\\">\\n                                    {{ 'common.you-should-18' | translate }}\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group col-sm-12\\\">\\n                            <label class=\\\"form-control-label font-md\\\" for=\\\"nationality\\\">{{ 'common.nationality' | translate }}</label>\\n                            <ng-select\\n                                class=\\\"ng-select-lg\\\"\\n                                id=\\\"nationality\\\"\\n                                name=\\\"nationality\\\"\\n                                [(ngModel)]=\\\"details.nationality\\\"\\n                                bindLabel=\\\"name\\\"\\n                                bindValue=\\\"alpha2\\\"\\n                                [items]=\\\"countriesSortedByName\\\"\\n                                [clearable]=\\\"false\\\"\\n                                [virtualScroll]=\\\"true\\\"\\n                                #nationality=\\\"ngModel\\\"\\n                                autocomplete=\\\"false\\\"\\n                                aria-autocomplete=\\\"false\\\"\\n                                required\\n                            >\\n                                <ng-template ng-label-tmp let-item=\\\"item\\\">{{ item.emoji }} {{ item.name }}</ng-template>\\n                                <ng-template ng-option-tmp let-item=\\\"item\\\" let-search=\\\"searchTerm\\\"\\n                                    >{{ item.emoji }} <span [ngOptionHighlight]=\\\"search\\\">{{ item.name }}</span></ng-template\\n                                >\\n                            </ng-select>\\n                            <div *ngIf=\\\"nationality.invalid && (registrationForm.submitted || nationality.dirty)\\\" class=\\\"error-messages\\\">\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"nationality?.errors?.required\\\">\\n                                    {{ 'common.this-is-required' | translate }}\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\" *ngIf=\\\"!referrerId\\\">\\n                        <div class=\\\"form-group col\\\">\\n                            <label class=\\\"font-md\\\" for=\\\"referral\\\">{{ 'registration.did-someone-refer-you' | translate }}</label>\\n                            <ng-select\\n                                class=\\\"ng-select-lg\\\"\\n                                name=\\\"referredBy\\\"\\n                                id=\\\"referredBy\\\"\\n                                [placeholder]=\\\"'registration.no-one-referred-me' | translate\\\"\\n                                [(ngModel)]=\\\"details.referredBy\\\"\\n                                [items]=\\\"referredByOptions\\\"\\n                                [clearable]=\\\"true\\\"\\n                                dropdownPosition=\\\"bottom\\\"\\n                                #referredByInput=\\\"ngModel\\\"\\n                            >\\n                                <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                                    {{ item }}\\n                                </ng-template>\\n                                <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                                    {{ item }}\\n                                </ng-template>\\n                            </ng-select>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\" *ngIf=\\\"details.referredBy === 'Other'\\\">\\n                        <div class=\\\"form-group col\\\">\\n                            <label class=\\\"font-md\\\" for=\\\"customReferredBy\\\">{{ 'common.please-specify' | translate }}</label>\\n                            <input\\n                                class=\\\"form-control form-control-lg\\\"\\n                                type=\\\"text\\\"\\n                                id=\\\"customReferredBy\\\"\\n                                name=\\\"customReferredBy\\\"\\n                                [(ngModel)]=\\\"customReferredBy\\\"\\n                                #customReferredByInput=\\\"ngModel\\\"\\n                                required\\n                            />\\n                            <div\\n                                *ngIf=\\\"customReferredByInput.invalid && (registrationForm.submitted || customReferredByInput.dirty)\\\"\\n                                class=\\\"error-messages\\\"\\n                            >\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"customReferredByInput?.errors?.required\\\">\\n                                    {{ 'common.this-is-required' | translate }}\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"custom-control custom-checkbox\\\">\\n                            <input\\n                                type=\\\"checkbox\\\"\\n                                class=\\\"custom-control-input\\\"\\n                                name=\\\"terms\\\"\\n                                [(ngModel)]=\\\"termsAccepted\\\"\\n                                #termsCheckbox=\\\"ngModel\\\"\\n                                (ngModelChange)=\\\"onAcceptTerms($event, termsCheckbox)\\\"\\n                            />\\n                            <span class=\\\"custom-control-label font-md\\\"\\n                                >{{ 'common.i-have-read' | translate }}\\n                                <a href (click)=\\\"$event.stopPropagation(); openTermsModal(); $event.preventDefault()\\\">{{\\n                                    'common.terms-and-conditions' | translate\\n                                }}</a></span\\n                            >\\n                        </label>\\n                    </div>\\n                    <button\\n                        type=\\\"submit\\\"\\n                        class=\\\"btn btn-primary btn-lg btn-block mb-1\\\"\\n                        [ngClass]=\\\"{ loading: isLoading }\\\"\\n                        [disabled]=\\\"isLoading || isRegistrationDisabled\\\"\\n                    >\\n                        {{ (user.id ? 'common.open' : 'common.create') | translate }} {{ 'common.account' | translate | lowercase }}\\n                    </button>\\n                </form>\\n                <ng-template #loading>\\n                    <svg class=\\\"spinner spinner-inline spinner-dark\\\" viewBox=\\\"0 0 50 50\\\">\\n                        <circle class=\\\"path\\\" cx=\\\"25\\\" cy=\\\"25\\\" r=\\\"20\\\" fill=\\\"none\\\" stroke-width=\\\"5\\\"></circle>\\n                    </svg>\\n                </ng-template>\\n            </div>\\n        </div>\\n    </div>\\n    <p class=\\\"text-center\\\">\\n        <a class=\\\"text-white\\\" [routerLink]=\\\"['/login']\\\">{{ 'common.already-have-account' | translate }}</a>\\n    </p>\\n</div>\\n\";","export default \"<div class=\\\"container h-100\\\">\\n    <div class=\\\"row justify-content-end\\\">\\n        <div class=\\\"col-sm-24\\\">\\n            <currency-select-tab\\n                *ngIf=\\\"currency\\\"\\n                [(currency)]=\\\"currency\\\"\\n                (currencyChange)=\\\"onCurrencyChange()\\\"\\n                [user]=\\\"session.user\\\"\\n                [useShortCurrencyNames]=\\\"true\\\"\\n                [moreButtonOptions]=\\\"{ text: 'Others', hasCaret: true }\\\"\\n                #currencySelect\\n            ></currency-select-tab>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-2\\\" *ngIf=\\\"!isLoading; else loader\\\">\\n        <div class=\\\"col\\\">\\n            <table class=\\\"table table-borderless table-striped mb-0\\\">\\n                <tbody>\\n                    <ng-container *ngIf=\\\"currency && ['fiat', 'crypto'].includes(currency.type)\\\">\\n                        <ng-container *ngIf=\\\"currency.code === 'USD'\\\">\\n                            <tr>\\n                                <td class=\\\"font-weight-bold\\\">{{ 'common.monthly-account-fee' | translate }}</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"getFee('account-fee', 'internal'); else noFee; let fee\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                    </ng-container>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"getFee('gst', 'internal'); let fee\\\">\\n                            <tr>\\n                                <td class=\\\"font-weight-bold\\\">GST</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                    </ng-container>\\n                    <tr *ngIf=\\\"currency?.type !== 'metal'\\\">\\n                        <td class=\\\"font-weight-bold\\\">{{ 'common.internal-transfer' | translate }}</td>\\n                        <td class=\\\"text-right\\\">\\n                            <ng-container *ngIf=\\\"getFee('transfer', 'internal'); else noFee; let fee\\\">\\n                                <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                            </ng-container>\\n                        </td>\\n                    </tr>\\n                    <ng-container *ngIf=\\\"currency?.type === 'fiat'\\\">\\n                        <tr>\\n                            <td class=\\\"font-weight-bold\\\">{{ 'common.deposit-via' | translate }} SWIFT</td>\\n                            <td class=\\\"text-right\\\">\\n                                <ng-container *ngIf=\\\"getFee('deposit', 'swift'); else noFee; let fee\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </ng-container>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td class=\\\"font-weight-bold\\\">{{ 'common.withdrawal-via' | translate }} SWIFT</td>\\n                            <td class=\\\"text-right\\\">\\n                                <ng-container *ngIf=\\\"getFee('withdrawal', 'swift'); else noFee; let fee\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </ng-container>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td class=\\\"font-weight-bold\\\">{{ 'common.deposit-via' | translate }} {{ 'common.local' | translate | titlecase }}</td>\\n                            <td class=\\\"text-right\\\">\\n                                <ng-container *ngIf=\\\"getFee('deposit', 'local'); else noFee; let fee\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </ng-container>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td class=\\\"font-weight-bold\\\">{{ 'common.withdrawal-via' | translate }} {{ 'common.local' | translate | titlecase }}</td>\\n                            <td class=\\\"text-right\\\">\\n                                <ng-container *ngIf=\\\"getFee('withdrawal', 'local'); else noFee; let fee\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </ng-container>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td class=\\\"font-weight-bold\\\">{{ 'common.card-topup' | translate }}</td>\\n                            <td class=\\\"text-right\\\">\\n                                <ng-container *ngIf=\\\"getFee('withdrawal', 'card'); else noFee; let fee\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </ng-container>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td class=\\\"font-weight-bold\\\">{{ 'common.card-unload' | translate }}</td>\\n                            <td class=\\\"text-right\\\">\\n                                <ng-container *ngIf=\\\"getFee('deposit', 'card'); else noFee; let fee\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </ng-container>\\n                            </td>\\n                        </tr>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"currency?.type === 'crypto'\\\">\\n                        <tr>\\n                            <td class=\\\"font-weight-bold\\\">{{ 'common.deposit' | translate }}</td>\\n                            <td class=\\\"text-right\\\">\\n                                <ng-container *ngIf=\\\"getFee('deposit', 'crypto'); else noFee; let fee\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </ng-container>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td class=\\\"font-weight-bold\\\">{{ 'common.withdrawal' | translate }}</td>\\n                            <td class=\\\"text-right\\\">\\n                                <ng-container *ngIf=\\\"getFee('withdrawal', 'crypto'); else noFee; let fee\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </ng-container>\\n                            </td>\\n                        </tr>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"currency?.type === 'metal'\\\">\\n                        <tr>\\n                            <td class=\\\"font-weight-bold\\\">{{ 'common.buy' | translate }} &amp; {{ 'common.sell' | translate }}</td>\\n                            <td class=\\\"text-right\\\">\\n                                <ng-container *ngIf=\\\"getFee('service', 'internal'); else noFee; let fee\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </ng-container>\\n                            </td>\\n                        </tr>\\n                    </ng-container>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n</div>\\n\\n<ng-template #loader>\\n    <div class=\\\"d-flex align-items-center justify-content-center term-fees-loader\\\">{{ 'common.loading-fees' | translate }}...</div>\\n</ng-template>\\n<ng-template #noFee>\\n    <span class=\\\"text-success\\\">{{ 'common.free' | translate | uppercase }}</span>\\n</ng-template>\\n<ng-template #withFee let-fee=\\\"fee\\\">\\n    <div>\\n        <span *ngIf=\\\"fee.relative && fee.fixed\\\">\\n            {{ convert(fee.fixed, fee.currency) | amount: currency.decimalPlaces }} {{ currency.code }} + {{ fee.relative | percent: '1.2' }}\\n        </span>\\n        <span *ngIf=\\\"fee.relative && !fee.fixed\\\">\\n            {{ fee.relative | percent: '1.2' }}\\n        </span>\\n        <span *ngIf=\\\"!fee.relative && fee.fixed\\\"> {{ convert(fee.fixed, fee.currency) | amount: currency.decimalPlaces }} {{ currency.code }} </span>\\n    </div>\\n    <div *ngIf=\\\"fee.min\\\">\\n        <small class=\\\"text-muted\\\">\\n            min. {{ convert(fee.min, fee.currency) | amount: currency.decimalPlaces }} {{ currency.type !== 'metal' ? currency.code : 'USD' }}\\n        </small>\\n    </div>\\n    <div *ngIf=\\\"fee.max\\\">\\n        <small class=\\\"text-muted\\\">\\n            {{ 'common.max' | translate }}. {{ convert(fee.max, fee.currency) | amount: currency.decimalPlaces }}\\n            {{ currency.type !== 'metal' ? currency.code : 'USD' }}\\n        </small>\\n    </div>\\n    <div *ngIf=\\\"fee.minValue\\\">\\n        <small class=\\\"text-muted\\\">\\n            min. {{ fee.type }} {{ convert(fee.minValue, fee.currency) | amount: currency.decimalPlaces }}\\n            {{ currency.type !== 'metal' ? currency.code : 'USD' }}\\n        </small>\\n    </div>\\n</ng-template>\\n\";","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core'\nimport { NgForm, NgModel } from '@angular/forms'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport formatDate from 'date-fns/format'\nimport parseISO from 'date-fns/parseISO'\nimport { omit, pick } from 'lodash'\nimport { of, Subscription } from 'rxjs'\nimport { flatMap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { BusinessDetails, IUser, Referrer, Setting, UserDetails } from '../common/api-interfaces'\nimport { countriesSortedByName } from '../common/countries'\nimport { AlertService } from '../common/services/alert.service'\nimport { LoginService } from '../common/services/login.service'\nimport { TermsModalComponent } from '../common/terms-modal/terms-modal.component'\nimport { formatMaskedDate } from '../common/user-details-form/user-details-form.component'\nimport { EmailVerificationModalComponent } from './email-verification-modal.component'\nimport { RegistrationNoticeComponent } from './registration-notice/registration-notice.component'\n\n@Component({\n    selector: 'registration',\n    templateUrl: 'registration.component.html',\n})\nexport class RegistrationComponent implements OnInit, OnDestroy, AfterViewInit {\n    public countriesSortedByName = countriesSortedByName\n\n    public activationToken?: string\n    public user: Partial<IUser> & { password?: string } = {\n        type: 'personal',\n    }\n    public details: Partial<UserDetails> = {}\n    public business: Partial<BusinessDetails> = {}\n    public birthday: string | null = ''\n\n    @ViewChild('registrationForm')\n    public registrationForm: NgForm\n    public termsAccepted = false\n    public hasReadTerms = false\n\n    public isLoading = false\n    public isInvitation = false\n    public isRegistrationDisabled = false\n\n    public requiredPasswordStrength = 60\n    public passwordStrength = 0\n    public externalId: string | undefined\n    public referrerId: string | undefined\n    public referrer: Referrer | null = null\n    public appName = environment.appName\n    public displayName = environment.displayName\n    public referredByOptions = [\n        `${this.translate.instant('registration.friend-relative')}`,\n        `${this.translate.instant('registration.business-contact')}`,\n        `${this.translate.instant('registration.corporate-service-provider')}`,\n        `Authorised Partner of ${environment.displayName}`,\n        'Other',\n    ]\n    public customReferredBy = ''\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private router: Router,\n        private route: ActivatedRoute,\n        private http: HttpClient,\n        public alertService: AlertService,\n        private loginService: LoginService,\n        private ngbModal: NgbModal,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.route.queryParamMap.subscribe(params => {\n            this.activationToken = params.get('activationToken') || undefined\n            Object.assign(this.user, {\n                id: params.get('userId') || undefined,\n                email: params.get('email') || undefined,\n            })\n            if (this.user.id && this.activationToken) {\n                this.http\n                    .get<IUser>(`/users/${this.user.id}`, {\n                        headers: new HttpHeaders({ 'X-Activation-Token': this.activationToken }),\n                    })\n                    .subscribe(\n                        user => {\n                            Object.assign(this.user, pick(user, ['type', 'email', 'details']))\n                            this.details = this.user.details || {}\n                            this.business = this.user.details?.business || {}\n                            this.birthday = this.details.birthday\n                                ? formatDate(parseISO(this.details.birthday), 'ddMMyyyy')\n                                : null\n                            this.isInvitation = !!user.email\n                        },\n                        () => {\n                            this.alertService.add({\n                                severity: 'danger',\n                                message: this.translate.instant('common.invitation-expired'),\n                            })\n                            return this.router.navigate(['/login'])\n                        }\n                    )\n            }\n            if (params.has('referrerId')) {\n                this.referrerId = params.get('referrerId')!\n\n                this.http.get<Referrer>(`/referrers/${this.referrerId}`).subscribe(\n                    referrer => {\n                        this.referrer = referrer\n                    },\n                    () => {\n                        this.referrerId = undefined\n                        this.referrer = null\n                    }\n                )\n            }\n            this.externalId = params.get('externalId') ?? undefined\n        })\n        this.subscriptions.add(\n            this.http.get<Setting>(`/settings/registration-disabled`).subscribe(setting => {\n                this.isRegistrationDisabled = setting && (setting.value as boolean)\n            })\n        )\n    }\n\n    public ngAfterViewInit(): void {\n        setTimeout(() => {\n            if (this.appName === 'sgpmx') {\n                this.openNoticeModal()\n            }\n        }, 200)\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (!this.registrationForm.valid) {\n            return\n        }\n        let headers = new HttpHeaders()\n        if (!this.termsAccepted) {\n            this.alertService.add({\n                severity: 'danger',\n                message: this.translate.instant('common.you-must-accept-terms'),\n            })\n            return\n        }\n        if (this.activationToken) {\n            headers = headers.set('X-Activation-Token', this.activationToken)\n        }\n        if (this.details.referredBy === 'Other') {\n            this.details.referredBy = this.customReferredBy\n        }\n        const body = {\n            ...this.user,\n            details: {\n                ...this.details,\n                birthday: this.birthday ? formatMaskedDate(this.birthday) : null,\n                ...(this.user.type === 'business' ? { business: this.business } : {}),\n            },\n            externalId: this.externalId ?? undefined,\n        }\n        if (this.referrer) {\n            body.referrer = { id: this.referrer.id } as Referrer\n        }\n        this.isLoading = true\n        this.http\n            .post<IUser>('/users', omit(body, ['id']), { headers })\n            .pipe(\n                flatMap(user =>\n                    this.isInvitation\n                        ? this.loginService.login({\n                              password: this.user.password,\n                              email: user.email,\n                          })\n                        : of(user)\n                )\n            )\n            .subscribe(\n                async user => {\n                    if (this.isInvitation) {\n                        await this.router.navigate(['/verify'])\n                    } else {\n                        this.reset()\n                        const modal = this.ngbModal.open(EmailVerificationModalComponent, {\n                            backdrop: 'static',\n                            keyboard: false,\n                            centered: true,\n                        })\n                        modal.componentInstance.email = user.email\n                        await modal.result.then(() => this.router.navigate(['/login']))\n                    }\n                },\n                error => {\n                    this.isLoading = false\n                    this.alertService.clear()\n                    if (error.name === 'UniqueConstraintError') {\n                        switch (error.errors[0]) {\n                            case 'email must be unique':\n                                this.alertService.add({\n                                    severity: 'danger',\n                                    message: this.translate.instant('common.email-already-in-use'),\n                                })\n                        }\n                    }\n                    throw error\n                }\n            )\n    }\n\n    public openTermsModal(): void {\n        const termsModal = this.ngbModal.open(TermsModalComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n            keyboard: false,\n        })\n        const termsModalComponent = termsModal.componentInstance as TermsModalComponent\n        termsModalComponent.user = this.user as IUser\n        termsModal.result\n            .then(() => {\n                this.termsAccepted = true\n                this.hasReadTerms = true\n            })\n            .catch(() => {\n                this.termsAccepted = false\n            })\n    }\n\n    public onAcceptTerms(accepted: boolean, ngModel: NgModel): void {\n        if (accepted && !this.hasReadTerms) {\n            ngModel.control.markAsTouched()\n            this.openTermsModal()\n        }\n    }\n\n    public getLogo(): string {\n        switch (environment.appName) {\n            case 'etransfer':\n                return '/img/brand/logo.svg'\n            default:\n                return '/img/brand/logo-white-horizontal.svg'\n        }\n    }\n\n    public openNoticeModal(): void {\n        this.ngbModal.open(RegistrationNoticeComponent, {\n            windowClass: 'modal-primary',\n        })\n    }\n\n    private reset(): void {\n        this.user = {}\n        this.registrationForm.resetForm()\n        this.isLoading = false\n        this.alertService.clear()\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita'\nimport { IFee } from '../../common/api-interfaces'\n\nexport interface FeesState extends EntityState<IFee, string> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'fees', idKey: 'id' })\nexport class FeesStore extends EntityStore<FeesState> {\n    constructor() {\n        super()\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { Term, TermsAcceptance } from '../../api-interfaces'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TermService {\n    constructor(private http: HttpClient) {}\n\n    public create(term: Term): Observable<Term> {\n        return this.http.post<Term>('/admin/terms', { terms: term.terms, privacy: term.privacy })\n    }\n\n    public getApplicableTerm(userId?: string): Observable<Term> {\n        return userId\n            ? this.getTermsAcceptance(userId).pipe(map(termsAcceptance => termsAcceptance.term))\n            : this.http.get<Term>(`/terms`)\n    }\n\n    public getTermsAcceptance(userId: string): Observable<TermsAcceptance> {\n        return this.http.get<TermsAcceptance>(`/users/${userId}/terms-acceptance`)\n    }\n\n    public accept(termsAcceptance: TermsAcceptance, accepted = true): Observable<TermsAcceptance> {\n        return this.http.post<TermsAcceptance>(`/users/${termsAcceptance.user.id}/terms-acceptance`, {\n            termsAcceptance: {\n                id: termsAcceptance.id,\n            },\n            accepted,\n        })\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { QueryEntity } from '@datorama/akita'\nimport { Observable, of } from 'rxjs'\nimport { flatMap, map } from 'rxjs/operators'\nimport { FeeType, IFee, TransactionMethod } from 'src/app/common/api-interfaces'\nimport { FeesState, FeesStore } from './fees.store'\n\n@Injectable({ providedIn: 'root' })\nexport class FeesQuery extends QueryEntity<FeesState> {\n    constructor(protected store: FeesStore) {\n        super(store)\n    }\n\n    public findByPrimaryAttributes(query: {\n        type: FeeType\n        method: TransactionMethod\n        currencyCode: string\n    }): Observable<IFee | null> {\n        return this.selectEntity(\n            entity =>\n                entity.type === query.type &&\n                entity.method === query.method &&\n                query.currencyCode === entity.currency.code\n        ).pipe(\n            flatMap(fee =>\n                fee\n                    ? of(fee)\n                    : this.selectEntity(\n                          entity =>\n                              entity.type === query.type &&\n                              entity.method === query.method &&\n                              entity.currency.code === 'USD'\n                      ).pipe(map(usdFee => usdFee ?? null))\n            )\n        )\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { TermsModalModule } from '../common/terms-modal/terms-modal.module'\nimport { EmailVerificationModalComponent } from './email-verification-modal.component'\nimport { RegistrationNoticeComponent } from './registration-notice/registration-notice.component'\nimport { RegistrationRoutingModule } from './registration-routing.module'\nimport { RegistrationComponent } from './registration.component'\n\n@NgModule({\n    declarations: [RegistrationComponent, EmailVerificationModalComponent, RegistrationNoticeComponent],\n    imports: [CommonModule, RegistrationRoutingModule, TermsModalModule],\n    entryComponents: [EmailVerificationModalComponent],\n})\nexport class RegistrationModule {}\n","export default \"<div class=\\\"container h-100\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <ng-container *ngIf=\\\"!isLoading; else loader\\\">\\n                <h6>Buy &amp; Sell</h6>\\n                <table class=\\\"table table-borderless table-striped mb-2\\\">\\n                    <tbody>\\n                        <tr>\\n                            <td>\\n                                <div class=\\\"font-weight-bold\\\">Gold Troy Ounce</div>\\n                                <span class=\\\"font-sm text-gray\\\">Buy &amp; Sell</span>\\n                            </td>\\n                            <td class=\\\"text-right\\\">\\n                                <ng-container *ngIf=\\\"getFee('service', 'internal', 'AU'); else noFee; let fee\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </ng-container>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>\\n                                <div class=\\\"font-weight-bold\\\">Silver Troy Ounce</div>\\n                                <span class=\\\"font-sm text-gray\\\">Buy &amp; Sell</span>\\n                            </td>\\n                            <td class=\\\"text-right\\\">\\n                                <ng-container *ngIf=\\\"getFee('service', 'internal', 'AG'); else noFee; let fee\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </ng-container>\\n                            </td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n                <h6>{{ 'common.transfer' | translate }}</h6>\\n                <table class=\\\"table table-borderless table-striped b-b-1 mb-2\\\">\\n                    <tbody>\\n                        <tr>\\n                            <td>\\n                                <div class=\\\"font-weight-bold\\\">Gold Troy Ounce</div>\\n                                <span class=\\\"font-sm text-gray\\\">{{ 'common.transfer' | translate }}</span>\\n                            </td>\\n                            <td class=\\\"text-right\\\">\\n                                <ng-container *ngIf=\\\"getFee('transfer', 'internal', 'AU'); else noFee; let fee\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </ng-container>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>\\n                                <div class=\\\"font-weight-bold\\\">Silver Troy Ounce</div>\\n                                <span class=\\\"font-sm text-gray\\\">{{ 'common.transfer' | translate }}</span>\\n                            </td>\\n                            <td class=\\\"text-right\\\">\\n                                <ng-container *ngIf=\\\"getFee('transfer', 'internal', 'AG'); else noFee; let fee\\\">\\n                                    <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                </ng-container>\\n                            </td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n                <p class=\\\"text-right font-sm\\\">\\n                    <i>* Subject to additional {{ getGst() | async }} GST</i>\\n                </p>\\n            </ng-container>\\n        </div>\\n    </div>\\n</div>\\n\\n<ng-template #loader>\\n    <div class=\\\"d-flex align-items-center justify-content-center\\\" [ngStyle]=\\\"{ width: '100%', height: '300px' }\\\">\\n        <ion-spinner color=\\\"primary\\\" name=\\\"dots\\\"></ion-spinner>\\n    </div>\\n</ng-template>\\n\\n<ng-template #noFee>\\n    <span class=\\\"text-success\\\">FREE</span>\\n</ng-template>\\n<ng-template #withFee let-fee=\\\"fee\\\">\\n    <div>\\n        <span *ngIf=\\\"fee.relative && fee.fixed\\\"> {{ fee.fixed | amount }} USD + {{ fee.relative | percent: '1.2' }}*</span>\\n        <span *ngIf=\\\"fee.relative && !fee.fixed\\\">{{ fee.relative | percent: '1.2' }}*</span>\\n        <span *ngIf=\\\"!fee.relative && fee.fixed\\\"> {{ fee.fixed | amount }} USD*</span>\\n    </div>\\n    <div *ngIf=\\\"fee.min\\\">\\n        <small class=\\\"text-muted\\\"> min. {{ fee.min | amount }} USD</small>\\n    </div>\\n    <div *ngIf=\\\"fee.max\\\">\\n        <small class=\\\"text-muted\\\"> max. {{ fee.max | amount }} USD </small>\\n    </div>\\n    <div *ngIf=\\\"fee.minValue\\\">\\n        <small class=\\\"text-muted\\\"> min. {{ fee.type }} {{ fee.minValue | amount }} USD</small>\\n    </div>\\n</ng-template>\\n\";","import { Component } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\n\n@Component({\n    selector: 'registration-notice',\n    templateUrl: 'registration-notice.component.html',\n})\nexport class RegistrationNoticeComponent {\n    constructor(public modal: NgbActiveModal) {}\n}\n","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">{{ 'common.important-notice' | translate }}</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"modal.dismiss()\\\">&times;</button>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    <p>\\n        In line with Singapore’s efforts in the prevention of money laundering and terrorism financing under the Precious Stones and Precious Metals\\n        (Prevention of Money Laundering and Terrorism Financing) Act 2019 (“PSPM Act”), all customers are to adhere to Stacker Market’s account\\n        registration requirements, terms and conditions and to the following notice from the\\n        <a rel=\\\"noopener\\\" target=\\\"_blank\\\" href=\\\"https://acd.mlaw.gov.sg/images/List%20of%20Registered%20Dealers.pdf\\\">Ministry of Law Singapore</a>.\\n    </p>\\n    <ul>\\n        <li>\\n            <a\\n                rel=\\\"noopener\\\"\\n                target=\\\"_blank\\\"\\n                href=\\\"https://www.stackermarket.com/wp-content/uploads/2022/01/NoticeForCustomersPosterEnglishMar2020.pdf\\\"\\n                >Notice for Customers (English)</a\\n            >\\n        </li>\\n        <li>\\n            <a\\n                rel=\\\"noopener\\\"\\n                target=\\\"_blank\\\"\\n                href=\\\"https://www.stackermarket.com/wp-content/uploads/2022/01/NoticeForCustomersPosterChineseMar2020.pdf\\\"\\n                >客户须知(Chinese)</a\\n            >\\n        </li>\\n        <li>\\n            <a rel=\\\"noopener\\\" target=\\\"_blank\\\" href=\\\"https://www.stackermarket.com/wp-content/uploads/2022/01/NoticeForCustomersPosterMalayMar2020.pdf\\\"\\n                >Notis Bagi Pelanggan (Malay)</a\\n            >\\n        </li>\\n        <li>\\n            <a rel=\\\"noopener\\\" target=\\\"_blank\\\" href=\\\"https://www.stackermarket.com/wp-content/uploads/2022/01/NoticeForCustomersPosterTamilMar2020.pdf\\\"\\n                >வாடிக்கையாளர்களுக்கான அறிவிப்பு (Tamil)</a\\n            >\\n        </li>\\n    </ul>\\n</div>\\n\";","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport BigNumber from 'bignumber.js'\nimport { forkJoin, Observable, of, Subscription } from 'rxjs'\nimport { flatMap, map, switchMap, tap } from 'rxjs/operators'\nimport { FeesQuery } from 'src/app/store/fees/fees.query'\nimport { FeesService } from 'src/app/store/fees/fees.service'\nimport { FeeType, IFee, IUser, TransactionMethod } from '../../api-interfaces'\nimport { SessionService } from '../../services/session.service'\n\n@Component({\n    selector: 'sgpmx-term-fees',\n    templateUrl: 'sgpmx-term-fees.component.html',\n})\nexport class SgpmxTermFeesComponent implements OnInit, OnDestroy {\n    @Input()\n    public user: IUser\n    public fees: IFee[] = []\n    public isLoading = false\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private session: SessionService,\n        private route: ActivatedRoute,\n        private http: HttpClient,\n        private feesQuery: FeesQuery,\n        private feesService: FeesService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            of(undefined)\n                .pipe(\n                    tap(() => {\n                        this.isLoading = true\n                    }),\n                    switchMap(() => (this.session.isAuthenticated() ? this.session.userStream : of(undefined))),\n                    flatMap(sessionUser => {\n                        const referrerId = this.route.snapshot.queryParamMap.get('referrerId')\n                        const activationToken = this.route.snapshot.queryParamMap.get('activationToken')\n                        const user = this.user || sessionUser\n                        let headers = new HttpHeaders()\n\n                        if (activationToken) {\n                            headers = headers.set('X-Activation-Token', activationToken)\n                        }\n                        return user && user.id\n                            ? forkJoin([\n                                  this.http.get<IFee[]>(`/users/${user.id}/fee-schedule`, {\n                                      params: { currencyCode: 'AU' },\n                                      headers,\n                                  }),\n                                  this.http.get<IFee[]>(`/users/${user.id}/fee-schedule`, {\n                                      params: { currencyCode: 'AG' },\n                                      headers,\n                                  }),\n                              ])\n                            : forkJoin([\n                                  this.http.get<IFee[]>(`/fee-schedule`, {\n                                      params: referrerId\n                                          ? {\n                                                currencyCode: 'AU',\n                                                referrerId,\n                                            }\n                                          : {\n                                                currencyCode: 'AU',\n                                            },\n                                  }),\n                                  this.http.get<IFee[]>(`/fee-schedule`, {\n                                      params: referrerId\n                                          ? {\n                                                currencyCode: 'AG',\n                                                referrerId,\n                                            }\n                                          : {\n                                                currencyCode: 'AG',\n                                            },\n                                  }),\n                              ])\n                    })\n                )\n                .subscribe(([goldFees, silverFees]) => {\n                    this.fees = [...goldFees, ...silverFees]\n                    this.isLoading = false\n                })\n        )\n        this.feesService.fetch()\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public getFee(type: FeeType, method: TransactionMethod, currencyCode: string): IFee | null {\n        const found = this.fees.find(\n            fee => fee.type === type && fee.method === method && fee.currency.code === currencyCode\n        )\n        if (!found || (!found.relative && !found.fixed)) {\n            return null\n        }\n        return found\n    }\n\n    public getGst(): Observable<string> {\n        return this.feesQuery\n            .findByPrimaryAttributes({\n                type: 'gst',\n                method: 'internal',\n                currencyCode: 'USD',\n            })\n            .pipe(map(gst => (gst ? `${new BigNumber(gst.relative || 0).times(100).toFixed(0)}%` : 'FREE')))\n    }\n}\n","export default \"<div class=\\\"modal-body text-center my-2 e2e-registration-completed\\\">\\n    <img src=\\\"/img/icons/envelope.svg\\\" class=\\\"img-md mb-3\\\" />\\n    <h4 class=\\\"text-primary mb-3\\\">{{ 'common.email-verification' | translate }}</h4>\\n    <p class=\\\"mb-4\\\">\\n        {{ 'common.congrats-sent-email' | translate }} <span class=\\\"text-primary\\\">{{ email }}</span> {{ 'common.for-email-verification' | translate }}\\n    </p>\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary btn-lg btn-block\\\" (click)=\\\"modal.close()\\\">{{ 'common.got-it' | translate }}</button>\\n</div>\\n\";","\n// easing functions from \"Tween.js\"\n\nexports.linear = function(n){\n  return n;\n};\n\nexports.inQuad = function(n){\n  return n * n;\n};\n\nexports.outQuad = function(n){\n  return n * (2 - n);\n};\n\nexports.inOutQuad = function(n){\n  n *= 2;\n  if (n < 1) return 0.5 * n * n;\n  return - 0.5 * (--n * (n - 2) - 1);\n};\n\nexports.inCube = function(n){\n  return n * n * n;\n};\n\nexports.outCube = function(n){\n  return --n * n * n + 1;\n};\n\nexports.inOutCube = function(n){\n  n *= 2;\n  if (n < 1) return 0.5 * n * n * n;\n  return 0.5 * ((n -= 2 ) * n * n + 2);\n};\n\nexports.inQuart = function(n){\n  return n * n * n * n;\n};\n\nexports.outQuart = function(n){\n  return 1 - (--n * n * n * n);\n};\n\nexports.inOutQuart = function(n){\n  n *= 2;\n  if (n < 1) return 0.5 * n * n * n * n;\n  return -0.5 * ((n -= 2) * n * n * n - 2);\n};\n\nexports.inQuint = function(n){\n  return n * n * n * n * n;\n}\n\nexports.outQuint = function(n){\n  return --n * n * n * n * n + 1;\n}\n\nexports.inOutQuint = function(n){\n  n *= 2;\n  if (n < 1) return 0.5 * n * n * n * n * n;\n  return 0.5 * ((n -= 2) * n * n * n * n + 2);\n};\n\nexports.inSine = function(n){\n  return 1 - Math.cos(n * Math.PI / 2 );\n};\n\nexports.outSine = function(n){\n  return Math.sin(n * Math.PI / 2);\n};\n\nexports.inOutSine = function(n){\n  return .5 * (1 - Math.cos(Math.PI * n));\n};\n\nexports.inExpo = function(n){\n  return 0 == n ? 0 : Math.pow(1024, n - 1);\n};\n\nexports.outExpo = function(n){\n  return 1 == n ? n : 1 - Math.pow(2, -10 * n);\n};\n\nexports.inOutExpo = function(n){\n  if (0 == n) return 0;\n  if (1 == n) return 1;\n  if ((n *= 2) < 1) return .5 * Math.pow(1024, n - 1);\n  return .5 * (-Math.pow(2, -10 * (n - 1)) + 2);\n};\n\nexports.inCirc = function(n){\n  return 1 - Math.sqrt(1 - n * n);\n};\n\nexports.outCirc = function(n){\n  return Math.sqrt(1 - (--n * n));\n};\n\nexports.inOutCirc = function(n){\n  n *= 2\n  if (n < 1) return -0.5 * (Math.sqrt(1 - n * n) - 1);\n  return 0.5 * (Math.sqrt(1 - (n -= 2) * n) + 1);\n};\n\nexports.inBack = function(n){\n  var s = 1.70158;\n  return n * n * (( s + 1 ) * n - s);\n};\n\nexports.outBack = function(n){\n  var s = 1.70158;\n  return --n * n * ((s + 1) * n + s) + 1;\n};\n\nexports.inOutBack = function(n){\n  var s = 1.70158 * 1.525;\n  if ( ( n *= 2 ) < 1 ) return 0.5 * ( n * n * ( ( s + 1 ) * n - s ) );\n  return 0.5 * ( ( n -= 2 ) * n * ( ( s + 1 ) * n + s ) + 2 );\n};\n\nexports.inBounce = function(n){\n  return 1 - exports.outBounce(1 - n);\n};\n\nexports.outBounce = function(n){\n  if ( n < ( 1 / 2.75 ) ) {\n    return 7.5625 * n * n;\n  } else if ( n < ( 2 / 2.75 ) ) {\n    return 7.5625 * ( n -= ( 1.5 / 2.75 ) ) * n + 0.75;\n  } else if ( n < ( 2.5 / 2.75 ) ) {\n    return 7.5625 * ( n -= ( 2.25 / 2.75 ) ) * n + 0.9375;\n  } else {\n    return 7.5625 * ( n -= ( 2.625 / 2.75 ) ) * n + 0.984375;\n  }\n};\n\nexports.inOutBounce = function(n){\n  if (n < .5) return exports.inBounce(n * 2) * .5;\n  return exports.outBounce(n * 2 - 1) * .5 + .5;\n};\n\n// aliases\n\nexports['in-quad'] = exports.inQuad;\nexports['out-quad'] = exports.outQuad;\nexports['in-out-quad'] = exports.inOutQuad;\nexports['in-cube'] = exports.inCube;\nexports['out-cube'] = exports.outCube;\nexports['in-out-cube'] = exports.inOutCube;\nexports['in-quart'] = exports.inQuart;\nexports['out-quart'] = exports.outQuart;\nexports['in-out-quart'] = exports.inOutQuart;\nexports['in-quint'] = exports.inQuint;\nexports['out-quint'] = exports.outQuint;\nexports['in-out-quint'] = exports.inOutQuint;\nexports['in-sine'] = exports.inSine;\nexports['out-sine'] = exports.outSine;\nexports['in-out-sine'] = exports.inOutSine;\nexports['in-expo'] = exports.inExpo;\nexports['out-expo'] = exports.outExpo;\nexports['in-out-expo'] = exports.inOutExpo;\nexports['in-circ'] = exports.inCirc;\nexports['out-circ'] = exports.outCirc;\nexports['in-out-circ'] = exports.inOutCirc;\nexports['in-back'] = exports.inBack;\nexports['out-back'] = exports.outBack;\nexports['in-out-back'] = exports.inOutBack;\nexports['in-bounce'] = exports.inBounce;\nexports['out-bounce'] = exports.outBounce;\nexports['in-out-bounce'] = exports.inOutBounce;\n","import { Component, ElementRef, Input, OnDestroy, OnInit } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { of, Subject, Subscription } from 'rxjs'\nimport { flatMap, switchMap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { IUser, Term } from '../api-interfaces'\nimport { TermService } from '../services/compliance/term.service'\nimport { SessionService } from '../services/session.service'\n\ntype TermsModalStep = 'terms' | 'privacy' | 'fees'\n\nconst ease = require('ease-component')\nconst scroll = require('scroll')\n\n@Component({\n    selector: 'terms-modal',\n    templateUrl: 'terms-modal.component.html',\n})\nexport class TermsModalComponent implements OnInit, OnDestroy {\n    @Input()\n    public step: TermsModalStep = 'terms'\n    @Input()\n    public viewOnly = false\n    public term: Term\n    public user?: IUser\n    public appName = environment.appName\n\n    public subheader: string\n\n    public isDown = false\n    private modalContainer: HTMLElement\n\n    private fetchEvent = new Subject<void>()\n    private subscriptions = new Subscription()\n\n    constructor(\n        public activeModal: NgbActiveModal,\n        public translate: TranslateService,\n        private session: SessionService,\n        private termsService: TermService,\n        private element: ElementRef\n    ) {}\n\n    public ngOnInit(): void {\n        this.subheader = this.translate.instant('common.you-must-accept-the-terms')\n        this.subscriptions.add(\n            this.fetchEvent\n                .pipe(\n                    switchMap(() => (this.session.isAuthenticated() ? this.session.userStream : of(undefined))),\n                    flatMap(user => this.termsService.getApplicableTerm(user?.id))\n                )\n                .subscribe(term => {\n                    this.term = term\n                    setTimeout(() => this.scrollHandler())\n                })\n        )\n        this.fetchEvent.next()\n\n        this.modalContainer = this.element.nativeElement.querySelector('.terms-container') as HTMLElement\n        this.modalContainer.addEventListener('scroll', this.scrollHandler)\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n        this.modalContainer.removeEventListener('scroll', this.scrollHandler)\n    }\n\n    public nextStep(): void {\n        this.modalContainer.scrollTop = 0\n\n        if (this.step === 'terms') {\n            this.step = 'privacy'\n        } else if (this.step === 'privacy') {\n            this.step = 'fees'\n        } else {\n            this.activeModal.close()\n        }\n        this.subheader = `${this.translate.instant('common.you-must-accept-the')} ${\n            this.step === 'privacy' ? this.translate.instant('common.privacy-policy') : this.step\n        } ${this.translate.instant('common.to-continue')}`\n    }\n\n    public scrollDown(): void {\n        scroll.top(this.modalContainer, this.modalContainer.scrollHeight - this.modalContainer.clientHeight, {\n            duration: 1000,\n            ease: ease.inOutExpo,\n        })\n    }\n\n    private scrollHandler = () => {\n        // 25px threshold\n        if (this.modalContainer.scrollTop >= this.modalContainer.scrollHeight - this.modalContainer.offsetHeight - 25) {\n            this.isDown = true\n        } else {\n            this.isDown = false\n        }\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { IonicModule } from '@ionic/angular'\nimport { CommonModule } from '../common.module'\nimport { SgpmxTermFeesComponent } from './sgpmx-term-fees/sgpmx-term-fees.component'\nimport { TermFeesComponent } from './term-fees/term-fees.component'\nimport { TermsModalComponent } from './terms-modal.component'\n\n@NgModule({\n    declarations: [TermsModalComponent, TermFeesComponent, SgpmxTermFeesComponent],\n    exports: [TermsModalComponent],\n    imports: [CommonModule, IonicModule],\n})\nexport class TermsModalModule {}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { find } from 'lodash'\nimport { of, Subject, Subscription } from 'rxjs'\nimport { flatMap, switchMap, tap } from 'rxjs/operators'\nimport { FeeType, ICurrency, IFee, IUser, Paginated, TransactionMethod } from '../../api-interfaces'\nimport { Currency } from '../../models/accounting/currency.model'\nimport { SessionService } from '../../services/session.service'\n\n@Component({\n    selector: 'term-fees',\n    templateUrl: 'term-fees.component.html',\n})\nexport class TermFeesComponent implements OnInit, OnDestroy {\n    public fees: IFee[]\n    public currency: ICurrency\n    public currencies: ICurrency[] = []\n    public fetchEvent = new Subject<void>()\n    @Input()\n    public user?: IUser\n    public isLoading = false\n\n    protected subscriptions = new Subscription()\n\n    constructor(protected http: HttpClient, public session: SessionService, private route: ActivatedRoute) {}\n\n    public ngOnInit(): void {\n        this.http\n            .get<Paginated<ICurrency>>('/currencies', {\n                params: {\n                    limit: 100 + '',\n                },\n            })\n            .subscribe(response => {\n                this.currencies = response.data\n                this.currency = find(this.currencies, {\n                    code: this.session.user ? this.session.user.preferredCurrency.code : 'USD',\n                })!\n                this.fetchEvent.next()\n            })\n        this.subscriptions.add(\n            this.fetchEvent\n                .pipe(\n                    tap(() => {\n                        this.isLoading = true\n                    }),\n                    switchMap(() => (this.session.isAuthenticated() ? this.session.userStream : of(undefined))),\n                    flatMap(sessionUser => {\n                        const params = {\n                            currencyCode: this.currency.code,\n                        }\n                        const referrerId = this.route.snapshot.queryParamMap.get('referrerId')\n                        const user = this.user || sessionUser\n                        const activationToken = this.route.snapshot.queryParamMap.get('activationToken')\n                        let headers = new HttpHeaders()\n                        if (activationToken) {\n                            headers = headers.set('X-Activation-Token', activationToken)\n                        }\n                        return user && user.id\n                            ? this.http.get<IFee[]>(`/users/${user.id}/fee-schedule`, {\n                                  params,\n                                  headers,\n                              })\n                            : this.http.get<IFee[]>(`/fee-schedule`, {\n                                  params: referrerId\n                                      ? {\n                                            ...params,\n                                            referrerId,\n                                        }\n                                      : params,\n                              })\n                    })\n                )\n                .subscribe(fees => {\n                    this.fees = fees\n                    this.isLoading = false\n                })\n        )\n    }\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public getFee(type: FeeType, method: TransactionMethod): IFee | null {\n        const found = find(this.fees, fee => fee.type === type && fee.method === method)\n        if (!found || (!found.relative && !found.fixed)) {\n            return null\n        }\n        return found\n    }\n\n    public convert(amount: string, baseCurrency: ICurrency): string {\n        const base = this.currencies.find(currency => currency.code === baseCurrency.code)\n        const counter = this.currencies.find(currency => currency.code === this.currency.code)\n        if (!base || !counter) {\n            return '0'\n        }\n        return Currency.convert(amount, base, counter)\n    }\n\n    public onCurrencyChange() {\n        this.fees = []\n        this.fetchEvent.next()\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { forkJoin, Observable } from 'rxjs'\nimport { map, tap } from 'rxjs/operators'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { IFee } from '../../common/api-interfaces'\nimport { FeesStore } from './fees.store'\n\n@Injectable({ providedIn: 'root' })\nexport class FeesService {\n    constructor(protected store: FeesStore, private http: HttpClient, private session: SessionService) {}\n\n    public fetchAsObservable(): Observable<IFee[]> {\n        return forkJoin([\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'AU',\n                },\n            }),\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'AG',\n                },\n            }),\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'USD',\n                },\n            }),\n        ]).pipe(\n            map(([goldFees, silverFees, usdFees]) => [...goldFees, ...silverFees, ...usdFees]),\n            tap(fees => {\n                this.store.set(fees)\n            })\n        )\n    }\n\n    public fetch(): void {\n        this.fetchAsObservable().subscribe(() => undefined)\n    }\n}\n","import { Component } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\n\n@Component({\n    selector: 'email-verification-modal',\n    templateUrl: 'email-verification-modal.component.html',\n})\nexport class EmailVerificationModalComponent {\n    public email: string\n    constructor(public modal: NgbActiveModal) {}\n}\n","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">\\n        {{\\n            (step === 'terms' ? 'common.terms-and-conditions' : step === 'privacy' ? 'common.data-privacy-notice' : 'common.fee-schedule')\\n                | translate\\n                | titlecase\\n        }}\\n    </h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n</div>\\n<div *ngIf=\\\"!viewOnly\\\" class=\\\"modal-subheader\\\">\\n    {{ subheader }}\\n</div>\\n<div class=\\\"modal-body terms-container text-body e2e-terms-modal\\\">\\n    <ng-container *ngIf=\\\"term; else loadingContent\\\">\\n        <div *ngIf=\\\"step === 'terms'\\\" [innerHtml]=\\\"term.terms | safeHtml\\\"></div>\\n        <div *ngIf=\\\"step === 'privacy'\\\" [innerHtml]=\\\"term.privacy | safeHtml\\\"></div>\\n        <div *ngIf=\\\"step === 'fees'\\\">\\n            <ng-container *ngIf=\\\"appName !== 'sgpmx'; else sgpmxFees\\\">\\n                <term-fees [user]=\\\"user\\\"></term-fees>\\n            </ng-container>\\n            <ng-template #sgpmxFees>\\n                <sgpmx-term-fees [user]=\\\"user\\\"></sgpmx-term-fees>\\n            </ng-template>\\n        </div>\\n    </ng-container>\\n    <ng-template #loadingContent>\\n        <svg class=\\\"spinner spinner-dark\\\" viewBox=\\\"0 0 50 50\\\">\\n            <circle class=\\\"path\\\" cx=\\\"25\\\" cy=\\\"25\\\" r=\\\"20\\\" fill=\\\"none\\\" stroke-width=\\\"5\\\"></circle>\\n        </svg>\\n        <p class=\\\"mb-0 mt-5 text-center\\\">{{ 'common.loading-terms' | translate }}</p>\\n    </ng-template>\\n</div>\\n<div class=\\\"modal-footer flex-column flex-md-row justify-content-center justify-content-md-end\\\">\\n    <ng-container *ngIf=\\\"!viewOnly; else closeButton\\\">\\n        <button class=\\\"btn btn-link mr-md-auto mb-2 mb-md-0 e2e-scroll-down-button\\\" (click)=\\\"scrollDown()\\\">\\n            {{ 'common.scroll-to-bottom' | translate }}\\n        </button>\\n        <div class=\\\"d-flex justify-content-end\\\">\\n            <button class=\\\"btn btn-default btn-w-sm ml-1\\\" (click)=\\\"activeModal.dismiss()\\\">{{ 'common.decline' | translate }}</button>\\n            <button class=\\\"btn btn-success btn-w-sm ml-1 e2e-accept-button\\\" (click)=\\\"nextStep()\\\" [disabled]=\\\"!isDown\\\">\\n                {{ 'common.accept' | translate }}\\n            </button>\\n        </div>\\n    </ng-container>\\n    <ng-template #closeButton>\\n        <div class=\\\"d-flex justify-content-end\\\">\\n            <button class=\\\"btn btn-default btn-w-sm\\\" (click)=\\\"activeModal.dismiss()\\\">{{ 'common.close' | translate }}</button>\\n        </div>\\n    </ng-template>\\n</div>\\n\";","import { Injectable } from '@angular/core'\nimport { CanActivate, Router, UrlTree } from '@angular/router'\nimport { SessionService } from '../common/services/session.service'\n\n@Injectable()\nexport class RegistrationAuthGuard implements CanActivate {\n    constructor(private session: SessionService, private router: Router) {}\n    public canActivate(): boolean | UrlTree {\n        if (this.session.isAuthenticated()) {\n            return this.router.parseUrl('/dashboard')\n        }\n        return true\n    }\n}\n","var E_NOSCROLL = new Error('Element already at target scroll position')\nvar E_CANCELLED = new Error('Scroll cancelled')\nvar min = Math.min\nvar ms = Date.now\n\nmodule.exports = {\n  left: make('scrollLeft'),\n  top: make('scrollTop')\n}\n\nfunction make (prop) {\n  return function scroll (el, to, opts, cb) {\n    opts = opts || {}\n\n    if (typeof opts == 'function') cb = opts, opts = {}\n    if (typeof cb != 'function') cb = noop\n\n    var start = ms()\n    var from = el[prop]\n    var ease = opts.ease || inOutSine\n    var duration = !isNaN(opts.duration) ? +opts.duration : 350\n    var cancelled = false\n\n    return from === to ?\n      cb(E_NOSCROLL, el[prop]) :\n      requestAnimationFrame(animate), cancel\n\n    function cancel () {\n      cancelled = true\n    }\n\n    function animate (timestamp) {\n      if (cancelled) return cb(E_CANCELLED, el[prop])\n\n      var now = ms()\n      var time = min(1, ((now - start) / duration))\n      var eased = ease(time)\n\n      el[prop] = (eased * (to - from)) + from\n\n      time < 1 ?\n        requestAnimationFrame(animate) :\n        requestAnimationFrame(function () {\n          cb(null, el[prop])\n        })\n    }\n  }\n}\n\nfunction inOutSine (n) {\n  return 0.5 * (1 - Math.cos(Math.PI * n))\n}\n\nfunction noop () {}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { RegistrationAuthGuard } from './registration.auth-guard'\nimport { RegistrationComponent } from './registration.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: RegistrationComponent,\n        canActivate: [RegistrationAuthGuard],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [RegistrationAuthGuard],\n})\nexport class RegistrationRoutingModule {}\n"],"sourceRoot":"webpack:///"}