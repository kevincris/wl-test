{"version":3,"sources":["./src/app/common/user-transactions/user-transactions.module.ts","./src/app/common/user-transactions/user-transactions.component.html","./src/app/common/user-transactions/user-transactions.component.ts"],"names":[],"mappings":"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","file":"default~dashboard-dashboard-module~transactions-transactions-module~user-redemption-user-redemption-~a37267c0.js","sourcesContent":["import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common.module'\nimport { TransactionModule } from '../transaction/transaction.module'\nimport { UserTransactionsComponent } from './user-transactions.component'\n\n@NgModule({\n    declarations: [UserTransactionsComponent],\n    exports: [UserTransactionsComponent],\n    imports: [CommonModule, TransactionModule],\n})\nexport class UserTransactionsModule {}\n","export default \"<ng-container *ngIf=\\\"!router.isActive('/dashboard', false)\\\">\\n    <div class=\\\"container pt-page\\\">\\n        <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n            <div class=\\\"col-auto\\\">\\n                <h5 class=\\\"mb-0\\\">{{ 'common.transactions' | translate }}</h5>\\n            </div>\\n            <div class=\\\"col-auto d-flex justify-content-end\\\">\\n                <ol class=\\\"breadcrumb px-0\\\">\\n                    <li class=\\\"breadcrumb-item\\\">\\n                        <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                    </li>\\n                    <li class=\\\"breadcrumb-item active\\\">{{ 'common.transactions' | translate }}</li>\\n                </ol>\\n            </div>\\n        </div>\\n        <div class=\\\"mb-3\\\">\\n            <div class=\\\"row align-items-center\\\">\\n                <div class=\\\"col-lg-7 mb-2 mb-lg-0\\\">\\n                    <div class=\\\"input-group\\\">\\n                        <span class=\\\"input-group-prepend\\\">\\n                            <span class=\\\"input-group-text\\\"><fa-icon [icon]=\\\"faSearch\\\"></fa-icon></span>\\n                        </span>\\n                        <input\\n                            #searchElement\\n                            type=\\\"text\\\"\\n                            name=\\\"searchText\\\"\\n                            (ngModelChange)=\\\"searchEvent.next()\\\"\\n                            [placeholder]=\\\"'common.search' | translate\\\"\\n                            class=\\\"form-control\\\"\\n                            [(ngModel)]=\\\"search\\\"\\n                        />\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-7 d-flex align-items-center\\\">\\n                    <div>\\n                        <span>{{ count | number }} {{ (count === 1 ? 'common.entry-found' : 'common.entries-found') | translate | lowercase }}</span>\\n                        <span class=\\\"ml-3\\\"\\n                            ><a href (click)=\\\"isFilterOptionsCollapsed = !isFilterOptionsCollapsed; $event.preventDefault()\\\"\\n                                >{{ isFilterOptionsCollapsed ? '+' : '-' }} {{ 'common.filter-options' | translate }}</a\\n                            ></span\\n                        >\\n                    </div>\\n                </div>\\n                <div class=\\\"col pt-3 pt-md-0 d-flex justify-content-end\\\">\\n                    <div ngbDropdown class=\\\"d-inline-block mr-2\\\" container=\\\"body\\\">\\n                        <button class=\\\"btn btn-primary-air\\\" id=\\\"dropdownReport\\\" ngbDropdownToggle>{{ 'common.export-statement' | translate }}</button>\\n                        <div ngbDropdownMenu aria-labelledby=\\\"dropdownReport\\\">\\n                            <div class=\\\"px-2 py-1\\\">\\n                                <p class=\\\"mb-1\\\">{{ 'common.select-date-range' | translate }}</p>\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"fromDate\\\">{{ 'common.from' | translate }}</label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <input\\n                                            class=\\\"form-control\\\"\\n                                            placeholder=\\\"yyyy-mm-dd\\\"\\n                                            name=\\\"fromDate\\\"\\n                                            [(ngModel)]=\\\"fromDate\\\"\\n                                            ngbDatepicker\\n                                            #dfromDate=\\\"ngbDatepicker\\\"\\n                                        />\\n                                        <div class=\\\"input-group-append\\\">\\n                                            <button class=\\\"btn btn-default calendar\\\" (click)=\\\"dfromDate.toggle()\\\" type=\\\"button\\\">\\n                                                <fa-icon [icon]=\\\"faCalendarAlt\\\"></fa-icon>\\n                                            </button>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"toDate\\\">{{ 'common.to' | translate | lowercase }}</label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <input\\n                                            class=\\\"form-control\\\"\\n                                            placeholder=\\\"yyyy-mm-dd\\\"\\n                                            name=\\\"toDate\\\"\\n                                            [(ngModel)]=\\\"toDate\\\"\\n                                            ngbDatepicker\\n                                            #dtoDate=\\\"ngbDatepicker\\\"\\n                                        />\\n                                        <div class=\\\"input-group-append\\\">\\n                                            <button class=\\\"btn btn-default calendar\\\" (click)=\\\"dtoDate.toggle()\\\" type=\\\"button\\\">\\n                                                <fa-icon [icon]=\\\"faCalendarAlt\\\"></fa-icon>\\n                                            </button>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"btn-group w-100\\\">\\n                                    <button type=\\\"button\\\" class=\\\"btn btn-primary-air\\\" (click)=\\\"downloadReport('pdf')\\\">.PDF</button>\\n                                    <button type=\\\"button\\\" class=\\\"btn btn-secondary-air\\\" (click)=\\\"downloadReport('xls')\\\">.XLS</button>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <a class=\\\"btn btn-secondary-air mr-2\\\" [routerLink]=\\\"['/deposit']\\\">\\n                        <fa-icon class=\\\"mr-1\\\" [icon]=\\\"faPlus\\\"></fa-icon> {{ 'common.deposit' | translate }}\\n                    </a>\\n                    <a class=\\\"btn btn-primary-air\\\" [routerLink]=\\\"['/withdraw']\\\">\\n                        <fa-icon class=\\\"mr-1\\\" [icon]=\\\"faMinus\\\"></fa-icon> {{ 'common.withdraw' | translate }}\\n                    </a>\\n                </div>\\n            </div>\\n        </div>\\n        <div [ngbCollapse]=\\\"isFilterOptionsCollapsed\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-8\\\">\\n                    <div class=\\\"form-group row\\\" *ngIf=\\\"!getDefaultQuery().type?.eq\\\">\\n                        <label for=\\\"type\\\" class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.type' | translate }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <ng-select\\n                                id=\\\"type\\\"\\n                                name=\\\"type\\\"\\n                                [items]=\\\"types\\\"\\n                                [multiple]=\\\"true\\\"\\n                                [closeOnSelect]=\\\"false\\\"\\n                                [searchable]=\\\"false\\\"\\n                                [placeholder]=\\\"'common.filter-by-type' | translate\\\"\\n                                [ngModel]=\\\"queryParams['type']['or']\\\"\\n                                (ngModelChange)=\\\"queryParams['type']['or'] = $event; searchEvent.next()\\\"\\n                            >\\n                                <ng-template ng-label-tmp let-item=\\\"item\\\">{{ $any(typeMap)[item] }}</ng-template>\\n                                <ng-template ng-option-tmp let-item=\\\"item\\\" let-item$=\\\"item$\\\" let-index=\\\"index\\\">\\n                                    <input class=\\\"mr-2\\\" [id]=\\\"'item-' + index\\\" type=\\\"checkbox\\\" [ngModel]=\\\"item$.selected\\\" />\\n                                    <span>{{ $any(typeMap)[item] }}</span>\\n                                </ng-template>\\n                            </ng-select>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group row\\\" *ngIf=\\\"appName !== 'sgpmx'\\\">\\n                        <label for=\\\"method\\\" class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.method' | translate }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <ng-select\\n                                id=\\\"method\\\"\\n                                name=\\\"method\\\"\\n                                [items]=\\\"methods\\\"\\n                                [multiple]=\\\"true\\\"\\n                                [closeOnSelect]=\\\"false\\\"\\n                                [searchable]=\\\"false\\\"\\n                                [placeholder]=\\\"'common.filter-by-method' | translate\\\"\\n                                [ngModel]=\\\"queryParams['method']['or']\\\"\\n                                (ngModelChange)=\\\"queryParams['method']['or'] = $event; searchEvent.next()\\\"\\n                            >\\n                                <ng-template ng-option-tmp let-item=\\\"item\\\" let-item$=\\\"item$\\\" let-index=\\\"index\\\">\\n                                    <input class=\\\"mr-2\\\" [id]=\\\"'item-' + index\\\" type=\\\"checkbox\\\" [ngModel]=\\\"item$.selected\\\" />\\n                                    <span class=\\\"text-uppercase\\\">{{ toStartCase(item) }}</span>\\n                                </ng-template>\\n                            </ng-select>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group row\\\">\\n                        <label for=\\\"currency\\\" class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.currency' | translate }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <ng-select\\n                                id=\\\"currencyCode\\\"\\n                                name=\\\"currencyCode\\\"\\n                                bindLabel=\\\"code\\\"\\n                                bindValue=\\\"code\\\"\\n                                [items]=\\\"currencies\\\"\\n                                [multiple]=\\\"true\\\"\\n                                [closeOnSelect]=\\\"false\\\"\\n                                [searchable]=\\\"false\\\"\\n                                [placeholder]=\\\"'common.filter-by-currency' | translate\\\"\\n                                [ngModel]=\\\"queryParams['currencyCode']['or']\\\"\\n                                (ngModelChange)=\\\"queryParams['currencyCode']['or'] = $event; searchEvent.next()\\\"\\n                            >\\n                                <ng-template ng-option-tmp let-item=\\\"item\\\" let-item$=\\\"item$\\\" let-index=\\\"index\\\">\\n                                    <input class=\\\"mr-2\\\" [id]=\\\"'item-' + index\\\" type=\\\"checkbox\\\" [ngModel]=\\\"item$.selected\\\" />\\n                                    <span class=\\\"text-uppercase\\\">{{ toStartCase(item.code) }}</span>\\n                                </ng-template>\\n                            </ng-select>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-8\\\">\\n                    <div class=\\\"form-group row\\\">\\n                        <label for=\\\"status\\\" class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.status' | translate }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <ng-select\\n                                id=\\\"status\\\"\\n                                name=\\\"status\\\"\\n                                [items]=\\\"statuses\\\"\\n                                [multiple]=\\\"true\\\"\\n                                [closeOnSelect]=\\\"false\\\"\\n                                [searchable]=\\\"false\\\"\\n                                [placeholder]=\\\"'common.filter-by-status' | translate\\\"\\n                                [ngModel]=\\\"queryParams['status']['or']\\\"\\n                                (ngModelChange)=\\\"queryParams['status']['or'] = $event; searchEvent.next()\\\"\\n                            >\\n                                <ng-template ng-option-tmp let-item=\\\"item\\\" let-item$=\\\"item$\\\" let-index=\\\"index\\\">\\n                                    <input class=\\\"mr-2\\\" [id]=\\\"'item-' + index\\\" type=\\\"checkbox\\\" [ngModel]=\\\"item$.selected\\\" />\\n                                    <span>{{ toStartCase(item) }}</span>\\n                                </ng-template>\\n                            </ng-select>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group row\\\">\\n                        <label class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.amount' | translate }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <div class=\\\"d-flex align-items-center\\\">\\n                                <div class=\\\"input-group\\\">\\n                                    <input\\n                                        class=\\\"form-control\\\"\\n                                        type=\\\"text\\\"\\n                                        id=\\\"amountFrom\\\"\\n                                        name=\\\"amountFrom\\\"\\n                                        [placeholder]=\\\"'common.from' | translate\\\"\\n                                        [ngModel]=\\\"queryParams['amount']['gte']\\\"\\n                                        (ngModelChange)=\\\"queryParams['amount']['gte'] = $event; searchEvent.next()\\\"\\n                                    />\\n                                    <input\\n                                        class=\\\"form-control\\\"\\n                                        type=\\\"text\\\"\\n                                        id=\\\"amountTo\\\"\\n                                        name=\\\"amountTo\\\"\\n                                        [placeholder]=\\\"'common.to' | translate\\\"\\n                                        [ngModel]=\\\"queryParams['amount']['lte']\\\"\\n                                        (ngModelChange)=\\\"queryParams['amount']['lte'] = $event; searchEvent.next()\\\"\\n                                    />\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-8\\\">\\n                    <div class=\\\"form-group row\\\">\\n                        <label class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.created-at' | translate | titlecase }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <div class=\\\"d-flex align-items-center\\\">\\n                                <div class=\\\"input-group\\\">\\n                                    <input\\n                                        class=\\\"form-control\\\"\\n                                        type=\\\"text\\\"\\n                                        id=\\\"createdAtFrom\\\"\\n                                        name=\\\"createdAtFrom\\\"\\n                                        [placeholder]=\\\"queryParams['createdAt']['gte'] || ('common.from' | translate)\\\"\\n                                        (dateTimeChange)=\\\"\\n                                            queryParams['createdAt']['gte'] = $event.value && formatDate($event.value, 'yyyy-MM-dd');\\n                                            searchEvent.next()\\n                                        \\\"\\n                                        [owlDateTime]=\\\"createdAtFrom\\\"\\n                                        [owlDateTimeTrigger]=\\\"createdAtFrom\\\"\\n                                    />\\n                                    <input\\n                                        class=\\\"form-control\\\"\\n                                        type=\\\"text\\\"\\n                                        id=\\\"createdAtTo\\\"\\n                                        name=\\\"createdAtTo\\\"\\n                                        [placeholder]=\\\"queryParams['createdAt']['lte'] || 'To'\\\"\\n                                        (dateTimeChange)=\\\"\\n                                            queryParams['createdAt']['lte'] = $event.value && formatDate($event.value, 'yyyy-MM-dd');\\n                                            searchEvent.next()\\n                                        \\\"\\n                                        [owlDateTime]=\\\"createdAtTo\\\"\\n                                        [owlDateTimeTrigger]=\\\"createdAtTo\\\"\\n                                    />\\n                                </div>\\n                                <owl-date-time pickerType=\\\"calendar\\\" [firstDayOfWeek]=\\\"1\\\" #createdAtFrom></owl-date-time>\\n                                <owl-date-time pickerType=\\\"calendar\\\" [firstDayOfWeek]=\\\"1\\\" #createdAtTo></owl-date-time>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group row\\\">\\n                        <label class=\\\"col-sm-6 col-form-label text-body\\\">{{ 'common.settled-at' | translate | titlecase }}</label>\\n                        <div class=\\\"col-sm-18\\\">\\n                            <div class=\\\"d-flex align-items-center\\\">\\n                                <div class=\\\"input-group\\\">\\n                                    <input\\n                                        class=\\\"form-control\\\"\\n                                        type=\\\"text\\\"\\n                                        id=\\\"settledAtFrom\\\"\\n                                        name=\\\"settledAtFrom\\\"\\n                                        [placeholder]=\\\"queryParams['settledAt']['gte'] || ('common.from' | translate)\\\"\\n                                        (dateTimeChange)=\\\"\\n                                            queryParams['settledAt']['gte'] = $event.value && formatDate($event.value, 'yyyy-MM-dd');\\n                                            searchEvent.next()\\n                                        \\\"\\n                                        [owlDateTime]=\\\"settledAtFrom\\\"\\n                                        [owlDateTimeTrigger]=\\\"settledAtFrom\\\"\\n                                    />\\n                                    <input\\n                                        class=\\\"form-control\\\"\\n                                        type=\\\"text\\\"\\n                                        id=\\\"settledAtTo\\\"\\n                                        name=\\\"settledAtTo\\\"\\n                                        [placeholder]=\\\"queryParams['settledAt']['lte'] || 'To'\\\"\\n                                        (dateTimeChange)=\\\"\\n                                            queryParams['settledAt']['lte'] = $event.value && formatDate($event.value, 'yyyy-MM-dd');\\n                                            searchEvent.next()\\n                                        \\\"\\n                                        [owlDateTime]=\\\"settledAtTo\\\"\\n                                        [owlDateTimeTrigger]=\\\"settledAtTo\\\"\\n                                    />\\n                                </div>\\n                                <owl-date-time pickerType=\\\"calendar\\\" [firstDayOfWeek]=\\\"1\\\" #settledAtFrom></owl-date-time>\\n                                <owl-date-time pickerType=\\\"calendar\\\" [firstDayOfWeek]=\\\"1\\\" #settledAtTo></owl-date-time>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n<div class=\\\"container\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header b-b-0\\\">\\n            {{ 'common.transactions' | translate }}\\n            <div class=\\\"card-menu\\\" *ngIf=\\\"router.isActive('/dashboard', false)\\\">\\n                <a class=\\\"font-lg\\\" [routerLink]=\\\"['/transactions']\\\">{{ 'common.view-all' | translate }} &#x203A;</a>\\n            </div>\\n        </div>\\n        <div class=\\\"table-responsive\\\">\\n            <table class=\\\"table table-hover table-card\\\">\\n                <thead class=\\\"thead-light\\\">\\n                    <tr>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.subject' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['counterWallet', 'id']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['counterWallet', 'id'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['counterWallet', 'id']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\" class=\\\"text-right\\\">\\n                            {{ 'common.amount' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['amount']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['amount'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['amount']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.status' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.created-at' | translate | titlecase }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['createdAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['createdAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['createdAt']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\"></th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                        <ng-container *ngIf=\\\"items.length === 0; else rows\\\">\\n                            <tr>\\n                                <td class=\\\"bg-white\\\" colspan=\\\"12\\\">\\n                                    <div class=\\\"mx-auto p-3 mt-2 mb-4 text-center max-width-sm\\\">\\n                                        <img src=\\\"/img/icons/wallet.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                                        <h4 class=\\\"mb-1\\\">{{ 'common.get-started' | translate }}</h4>\\n                                        <p class=\\\"mb-3 text-gray\\\">\\n                                            {{ 'common.load-funds' | translate }} {{ displayName }} {{ 'common.account' | translate | lowercase }}.\\n                                        </p>\\n                                        <a class=\\\"btn btn-primary-air btn-lg btn-block\\\" [routerLink]=\\\"['/deposit']\\\">\\n                                            {{ 'common.make-deposit' | translate }}\\n                                        </a>\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-template #rows>\\n                            <tr\\n                                *ngFor=\\\"let transaction of items\\\"\\n                                class=\\\"clickable bg-white e2e-user-transaction transaction-row\\\"\\n                                (click)=\\\"viewTransaction(transaction)\\\"\\n                                [ngClass]=\\\"{ 'text-muted': transaction.status !== 'completed' }\\\"\\n                            >\\n                                <th scope=\\\"row\\\">\\n                                    <div class=\\\"d-flex align-items-center\\\">\\n                                        <ng-container\\n                                            *ngIf=\\\"\\n                                                transaction.type === 'deposit' ||\\n                                                    transaction.type === 'withdrawal' ||\\n                                                    transaction.type === 'card-order' ||\\n                                                    transaction.type === 'conversion' ||\\n                                                    transaction.type === 'trade' ||\\n                                                    transaction.type === 'account-fee' ||\\n                                                    transaction.type === 'investment';\\n                                                else avatar\\n                                            \\\"\\n                                        >\\n                                            <!-- htmllint attr-bans=\\\"[]\\\" -->\\n                                            <div class=\\\"avatar avatar-sm mr-3\\\">\\n                                                <svg\\n                                                    class=\\\"img-avatar\\\"\\n                                                    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                    xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n                                                    xml:space=\\\"preserve\\\"\\n                                                    text-rendering=\\\"geometricPrecision\\\"\\n                                                    style=\\\"\\n                                                        shape-rendering: geometricPrecision;\\n                                                        image-rendering: optimizeQuality;\\n                                                        fill-rule: evenodd;\\n                                                        clip-rule: evenodd;\\n                                                    \\\"\\n                                                    viewBox=\\\"0 0 120 120\\\"\\n                                                >\\n                                                    <g>\\n                                                        <rect [style.fill]=\\\"appColor\\\" width=\\\"120\\\" height=\\\"120\\\"></rect>\\n                                                        <text\\n                                                            font-weight=\\\"500\\\"\\n                                                            font-size=\\\"3.25em\\\"\\n                                                            font-family=\\\"sans-serif\\\"\\n                                                            fill=\\\"#ffffff\\\"\\n                                                            x=\\\"50%\\\"\\n                                                            y=\\\"50%\\\"\\n                                                            text-anchor=\\\"middle\\\"\\n                                                            dy=\\\"0.35em\\\"\\n                                                        >\\n                                                            {{ formatType(transaction.type) }}\\n                                                        </text>\\n                                                    </g>\\n                                                </svg>\\n                                            </div>\\n                                            <!-- htmllint attr-bans=\\\"$previous\\\" -->\\n                                        </ng-container>\\n                                        <ng-template #avatar>\\n                                            <user-avatar\\n                                                *ngIf=\\\"!isReceiver(transaction)\\\"\\n                                                [user]=\\\"transaction.counterWallet.user\\\"\\n                                                size=\\\"sm\\\"\\n                                                elementClass=\\\"mr-3\\\"\\n                                            ></user-avatar>\\n                                            <user-avatar\\n                                                *ngIf=\\\"isReceiver(transaction)\\\"\\n                                                [user]=\\\"transaction.baseWallet.user\\\"\\n                                                size=\\\"sm\\\"\\n                                                elementClass=\\\"mr-3\\\"\\n                                            ></user-avatar>\\n                                        </ng-template>\\n                                        <div>\\n                                            <div>{{ buildBeautifiedType(transaction) }}</div>\\n                                            <ng-container *ngIf=\\\"!['conversion', 'investment', 'trade'].includes(transaction.type); else addon\\\">\\n                                                <span\\n                                                    [ngClass]=\\\"transaction.status !== 'completed' ? 'text-muted' : 'text-primary'\\\"\\n                                                    [innerHtml]=\\\"determineSubject(transaction)\\\"\\n                                                ></span>\\n                                            </ng-container>\\n                                            <ng-template #addon>\\n                                                <ng-container *ngIf=\\\"$any(transaction).allocationsStream | async; let allocations\\\">\\n                                                    <span [ngClass]=\\\"transaction.status !== 'completed' ? 'text-muted' : 'text-primary'\\\">\\n                                                        {{ allocations[0]?.product?.name }}\\n                                                        <span class=\\\"text-muted\\\">/ {{ allocations[0]?.id | truncate: false:7:'' }}</span>\\n                                                    </span>\\n                                                </ng-container>\\n                                                <ng-container *ngIf=\\\"$any(transaction).conversionsStream | async; let conversions\\\">\\n                                                    <span [ngClass]=\\\"transaction.status !== 'completed' ? 'text-muted' : 'text-primary'\\\">\\n                                                        {{\\n                                                            isReceiver(transaction)\\n                                                                ? conversions[0]?.baseTransaction?.currency?.name\\n                                                                : conversions[0]?.currency?.name\\n                                                        }}\\n                                                        <span class=\\\"text-muted\\\">/ {{ conversions[0]?.id | truncate: false:7:'' }}</span>\\n                                                    </span>\\n                                                </ng-container>\\n                                                <ng-container *ngIf=\\\"$any(transaction).tradeStream | async; let trades\\\">\\n                                                    <span [ngClass]=\\\"transaction.status !== 'completed' ? 'text-muted' : 'text-primary'\\\">\\n                                                        {{\\n                                                            isReceiver(transaction)\\n                                                                ? trades[0]?.counterTransaction?.currency?.name\\n                                                                : trades[0]?.baseTransaction?.currency?.name\\n                                                        }}\\n                                                        <span class=\\\"text-muted\\\">/ {{ trades[0]?.id | truncate: false:7:'' }}</span>\\n                                                        <span\\n                                                            [ngClass]=\\\"\\n                                                                !queryParams['currencyCode']['or']?.length\\n                                                                    ? isReceiver(transaction)\\n                                                                        ? 'tx-marker down'\\n                                                                        : 'tx-marker up'\\n                                                                    : ''\\n                                                            \\\"\\n                                                        ></span>\\n                                                    </span>\\n                                                </ng-container>\\n                                            </ng-template>\\n                                        </div>\\n                                    </div>\\n                                </th>\\n                                <td class=\\\"text-right\\\">\\n                                    <span\\n                                        [ngClass]=\\\"\\n                                            transaction.status !== 'completed' ? 'text-muted' : isReceiver(transaction) ? 'text-green' : 'text-danger'\\n                                        \\\"\\n                                        >{{ isReceiver(transaction) ? '' : '-'\\n                                        }}{{\\n                                            (isReceiver(transaction) ? transaction.settledAmount : calculateDeductableAmount(transaction))\\n                                                | amount: transaction.currency.decimalPlaces\\n                                        }}\\n                                        {{ transaction.currency.code }}</span\\n                                    >\\n                                </td>\\n                                <td>\\n                                    <span\\n                                        class=\\\"text-capitalize label\\\"\\n                                        [ngClass]=\\\"{\\n                                            'label-success': transaction.status === 'completed',\\n                                            'label-info': transaction.status === 'pending',\\n                                            'label-warning': transaction.status === 'processing',\\n                                            'label-danger': ['cancelled', 'failed'].indexOf(transaction.status) !== -1\\n                                        }\\\"\\n                                        >{{ transaction.status }}</span\\n                                    >\\n                                </td>\\n                                <td>{{ transaction.createdAt | date: 'medium' }}</td>\\n                                <td class=\\\"action pr-4 text-right\\\">\\n                                    <button\\n                                        type=\\\"button\\\"\\n                                        class=\\\"btn btn-sm btn-success\\\"\\n                                        [ngClass]=\\\"{ loading: transactionsLoading.has(transaction.id) }\\\"\\n                                        [disabled]=\\\"transactionsLoading.has(transaction.id)\\\"\\n                                        *ngIf=\\\"transaction.type === 'deposit' && transaction.status === 'pending'\\\"\\n                                        (click)=\\\"$event.stopPropagation(); markAsPaid(transaction)\\\"\\n                                    >\\n                                        {{ 'common.mark-as-paid' | translate }}\\n                                    </button>\\n                                </td>\\n                            </tr>\\n                            <tr *ngFor=\\\"let empty of fill\\\" class=\\\"fill\\\">\\n                                <td colspan=\\\"12\\\">\\n                                    <div>&nbsp;</div>\\n                                    <span>&nbsp;</span>\\n                                </td>\\n                            </tr>\\n                        </ng-template>\\n                    </ng-container>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n    <footer class=\\\"table-footer mb-3\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-6 col-md-8\\\">\\n                <ng-select\\n                    [(ngModel)]=\\\"limit\\\"\\n                    dropdownPosition=\\\"auto\\\"\\n                    (change)=\\\"select(1)\\\"\\n                    [items]=\\\"limitOpts\\\"\\n                    [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                    [clearable]=\\\"false\\\"\\n                    [searchable]=\\\"false\\\"\\n                    required\\n                >\\n                    <ng-template ng-label-tmp let-item=\\\"item\\\"\\n                        >{{ 'common.show' | translate }} {{ item }} {{ 'common.per-page' | translate }}</ng-template\\n                    >\\n                    <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                </ng-select>\\n            </div>\\n            <div class=\\\"col-lg-18 col-md-16 d-flex justify-content-center justify-content-md-end mt-3 mt-md-0\\\">\\n                <ngb-pagination\\n                    [(page)]=\\\"page\\\"\\n                    [collectionSize]=\\\"count\\\"\\n                    (pageChange)=\\\"select()\\\"\\n                    [pageSize]=\\\"limit\\\"\\n                    [maxSize]=\\\"4\\\"\\n                    [rotate]=\\\"false\\\"\\n                    [boundaryLinks]=\\\"true\\\"\\n                >\\n                </ngb-pagination>\\n            </div>\\n        </div>\\n    </footer>\\n</div>\\n\";","import { HttpClient, HttpResponse } from '@angular/common/http'\nimport { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnInit, ViewChild } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { faCalendarAlt, faEllipsisV } from '@fortawesome/pro-regular-svg-icons'\nimport { faMinus, faPlus } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbDateStruct, NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap'\nimport { NgbCalendar } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport * as Color from 'color'\nimport { capitalize } from 'lodash'\nimport { merge, Observable } from 'rxjs'\nimport { delay, filter, finalize, flatMap, map, take, tap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport {\n    Allocation,\n    ICurrency,\n    IUser,\n    Paginated,\n    Trade,\n    TransactionMethod,\n    TransactionType,\n    Wallet,\n} from '../api-interfaces'\nimport { toStartCase } from '../common.mixin'\nimport { ListComponent } from '../list.component'\nimport { Conversion } from '../models/accounting/conversion.model'\nimport { Transaction } from '../models/accounting/transaction.model'\nimport { User } from '../models/core/user.model'\nimport { ConfirmationResult, ConfirmationService } from '../services/confirmation.service'\nimport { SessionService } from '../services/session.service'\nimport { ToastrService } from '../services/toastr.service'\nimport { TransactionService } from '../services/transaction.service'\nimport { TransactionViewComponent } from '../transaction/transaction-view/transaction-view.component'\nimport { buildWalletOwnerAccountNumber, calculateDeductableAmount, calculateFee } from '../transactions.mixins'\n\n@Component({\n    selector: 'user-transactions',\n    templateUrl: 'user-transactions.component.html',\n})\nexport class UserTransactionsComponent extends ListComponent<Transaction> implements OnInit, AfterViewInit {\n    public user: IUser | null\n    public statuses = ['pending', 'processing', 'completed', 'cancelled', 'failed']\n    public methods: TransactionMethod[] = ['card', 'crypto', 'internal', 'local', 'swift']\n    public types: TransactionType[] =\n        environment.appName === 'sgpmx'\n            ? ['card-order', 'trade', 'deposit', 'payment', 'transfer', 'withdrawal']\n            : [\n                  'card-order',\n                  'conversion',\n                  'trade',\n                  'deposit',\n                  'investment',\n                  'payment',\n                  'account-fee',\n                  'transfer',\n                  'withdrawal',\n              ]\n    public typeMap: { [K in TransactionType]: string } = {\n        'card-order': 'Card Order',\n        conversion: 'Conversion',\n        trade: 'Buy & Sell',\n        deposit: 'Deposit',\n        investment: 'Investment',\n        'account-fee': 'Account Fee',\n        transfer: 'Transfer',\n        withdrawal: 'Withdrawal',\n        reverse: 'Reverse',\n        redeem: 'Redemption',\n        mint: 'Mint',\n        payment: 'Payment',\n        'invoice-p2p': 'Invoice P2P',\n        invoice: 'Invoice',\n    }\n    public currencies: ICurrency[] = []\n\n    public appName = environment.appName\n    public displayName = environment.displayName\n    public transactionsLoading = new Set<string>()\n    public faPlus = faPlus\n    public faMinus = faMinus\n    public faCalendarAlt = faCalendarAlt\n    public faEllipsisV = faEllipsisV\n\n    public fromDate: NgbDateStruct\n    public toDate: NgbDateStruct\n\n    public appColor = Color(getComputedStyle(document.body).getPropertyValue('--primary').trim()).lighten(0.1)\n    public min = Math.min\n    public toStartCase = toStartCase\n    public calculateFee = calculateFee\n    public calculateDeductableAmount = calculateDeductableAmount\n\n    @ViewChild('searchElement') public searchElement: ElementRef\n\n    protected apiQuery = ['amount', 'type', 'method', 'currencyCode', 'status', 'settledAt', 'createdAt']\n    protected defaultLimit = this.limitOpts[1]\n    protected model = Transaction\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        confirmation: ConfirmationService,\n        private transactionService: TransactionService,\n        private toastr: ToastrService,\n        public calendar: NgbCalendar,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n        this.fromDate = { year: new Date().getFullYear(), month: 1, day: 1 }\n        this.toDate = this.calendar.getToday()\n        this.http.get<Paginated<ICurrency>>('/currencies', { params: { limit: 100 + '' } }).subscribe(response => {\n            this.currencies = response.data\n        })\n    }\n\n    public ngOnInit(): void {\n        super.ngOnInit()\n        this.subscriptions.add(\n            this.route.paramMap\n                .pipe(\n                    filter(params => params.has('transactionId')),\n                    flatMap(params => this.http.get<Transaction>(`/transactions/${params.get('transactionId')}`))\n                )\n                .subscribe(transaction => {\n                    const modal = this.viewTransaction(transaction)\n                    const closeHook = () => this.router.navigate(['/transactions'])\n                    modal.result.then(closeHook, closeHook)\n                })\n        )\n    }\n\n    public ngAfterViewInit(): void {\n        this.subscriptions.add(\n            this.transactionService.searchEvent.subscribe(() => {\n                this.selectSearchInput()\n            })\n        )\n        this.subscriptions.add(\n            this.route.queryParamMap.subscribe(params => {\n                if (params.has('searchFocus')) {\n                    this.selectSearchInput()\n                }\n            })\n        )\n    }\n\n    public selectSearchInput(): void {\n        if (this.searchElement) {\n            this.searchElement.nativeElement.focus()\n            this.searchElement.nativeElement.select()\n        }\n    }\n\n    public find(): Observable<HttpResponse<any[]>> {\n        return this.session.userStream.pipe(\n            delay(0),\n            take(1),\n            tap(user => {\n                this.user = new User(user)\n                this.apiUrl = `/users/${user.id}/transactions`\n            }),\n            flatMap(() => super.find())\n        )\n    }\n\n    public buildBeautifiedType(transaction: Transaction): string {\n        switch (transaction.type) {\n            case 'transfer':\n                if (this.isReceiver(transaction)) {\n                    return this.translate.instant('common.transfer-from')\n                }\n                return this.translate.instant('common.transfer-to')\n            case 'deposit':\n                return transaction.method === 'card'\n                    ? this.translate.instant('common.unload-from')\n                    : this.translate.instant('common.deposit-from')\n            case 'withdrawal':\n                if (transaction.method === 'card') {\n                    return this.translate.instant('common.topup-to')\n                }\n                return this.translate.instant('common.withdrawal-to')\n            case 'card-order':\n            case 'account-fee':\n            case 'payment':\n                return this.translate.instant('common.payment-to')\n            case 'conversion':\n                if (this.isReceiver(transaction)) {\n                    return this.translate.instant('common.conversion-from')\n                }\n                return this.translate.instant('common.conversion-to')\n            case 'trade':\n                if (this.isReceiver(transaction)) {\n                    return transaction.currency.code === 'USD'\n                        ? this.translate.instant('common.credit')\n                        : this.translate.instant('common.buy')\n                }\n                return transaction.currency.code === 'USD'\n                    ? this.translate.instant('common.debit')\n                    : this.translate.instant('common.sell')\n            case 'investment':\n                if (this.isReceiver(transaction)) {\n                    return this.translate.instant('common.investment-from')\n                }\n                return this.translate.instant('common.investment-to')\n            case 'invoice-p2p':\n                if (this.isReceiver(transaction)) {\n                    return this.translate.instant('common.invoice-to')\n                }\n                return this.translate.instant('common.invoice-from')\n            case 'invoice':\n                return this.translate.instant('common.invoice-from')\n            default:\n                return capitalize(transaction.type)\n        }\n    }\n\n    public determineSubject(transaction: Transaction): string {\n        switch (transaction.type) {\n            case 'card-order':\n                return `${environment.displayName} <span class=\"text-muted\">/ ${this.translate.instant(\n                    'common.card'\n                )}</span>`\n            case 'account-fee':\n                return `${environment.displayName} <span class=\"text-muted\">/ ${this.translate.instant(\n                    'common.account-fee'\n                )}</span>`\n            case 'deposit':\n            case 'withdrawal':\n                return this.beautifyMethod(transaction)\n            case 'payment':\n                return environment.displayName\n            case 'invoice-p2p':\n                return this.buildAccountHolder(transaction.baseWallet!)\n            case 'transfer':\n                if (transaction.isPlatformTransfer()) {\n                    return environment.displayName\n                } else if (this.isReceiver(transaction)) {\n                    return this.buildAccountHolder(transaction.baseWallet!)\n                }\n            // eslint-disable-next-line no-fallthrough\n            default:\n                return this.buildAccountHolder(transaction.counterWallet!)\n        }\n    }\n\n    public beautifyMethod(transaction: Transaction): string {\n        switch (transaction.method) {\n            case 'local':\n            case 'swift':\n                if (\n                    transaction.type === 'withdrawal' &&\n                    transaction.beneficiary &&\n                    transaction.beneficiary.accountHolder &&\n                    transaction.beneficiary.accountNumber\n                ) {\n                    return `${transaction.beneficiary.accountHolder} <span class=\"text-muted\">/ ${transaction.beneficiary.accountNumber}</span>`\n                }\n                return `${\n                    this.user?.type === 'business'\n                        ? this.translate.instant('common.corporate')\n                        : this.translate.instant('common.personal')\n                } ${this.translate.instant('common.bank-account')}`\n            case 'card':\n                const maskedPan = transaction.card?.maskedPan\n                return (\n                    'Card' +\n                    (maskedPan\n                        ? ` <span class=\"text-muted\">/ ${maskedPan.slice(0, 4)} ${maskedPan.slice(\n                              4,\n                              8\n                          )} ${maskedPan.slice(8, 12)} ${maskedPan.slice(12)} </span>`\n                        : '')\n                )\n            default:\n                return capitalize(transaction.method)\n        }\n    }\n\n    public isReceiver(transaction: Transaction): boolean {\n        return (\n            !!transaction.counterWallet &&\n            !!transaction.counterWallet.user &&\n            !!this.user &&\n            transaction.counterWallet.user.id === this.user.id\n        )\n    }\n\n    public viewTransaction(\n        transaction: Transaction,\n        options: { activeTab?: 'overview' | 'beneficiary' | 'attachments' } = {}\n    ): NgbModalRef {\n        const modal = this.ngbModal.open(TransactionViewComponent, {\n            windowClass: 'modal-primary',\n        })\n        const transactionView = modal.componentInstance as TransactionViewComponent\n        transactionView.transaction = { ...transaction }\n        if (!!options.activeTab) {\n            transactionView.activeTab = options.activeTab\n        }\n\n        transactionView.onCancel.subscribe(() => {\n            modal.dismiss()\n            this.updateEvent.next()\n        })\n\n        transactionView.onUpdate.subscribe(() => {\n            this.updateEvent.next()\n        })\n\n        return modal\n    }\n\n    public markAsPaid(item: Transaction): void {\n        if (item.method === 'crypto') {\n            this.viewTransaction(item)\n            return\n        }\n        this.transactionsLoading.add(item.id)\n        this.transactionService\n            .changeStatus(item.id, 'processing')\n            .pipe(\n                finalize(() => {\n                    this.transactionsLoading.delete(item.id)\n                })\n            )\n            .subscribe(() => {\n                this.toastr.success(this.translate.instant('common.deposit-mark-as-paid'))\n                this.updateEvent.next()\n\n                this.subscriptions.add(\n                    this.confirmation\n                        .show({\n                            type: 'success',\n                            text: this.translate.instant('common.thank-you-for-notifying'),\n                            confirmText: this.translate.instant('common.i-will-upload-a-receipt'),\n                            cancelText: this.translate.instant('common.i-will-do-it-later'),\n                            cancelClass: 'warning',\n                        })\n                        .subscribe(result => {\n                            if (result === ConfirmationResult.CONFIRMED) {\n                                this.viewTransaction(item, { activeTab: 'attachments' })\n                            }\n                        })\n                )\n            })\n    }\n\n    public formatType(type: TransactionType): string {\n        return type.slice(0, 1).toUpperCase()\n    }\n\n    public fetchAllocation(transaction: Transaction): Observable<Allocation[]> {\n        return this.session.userStream.pipe(\n            take(1),\n            flatMap(user =>\n                this.http.get<Allocation[]>(`/users/${user!.id}/allocations`, {\n                    params: {\n                        baseTransactionId: transaction.id,\n                        counterTransactionId: transaction.id,\n                        q: 'or',\n                    },\n                })\n            )\n        )\n    }\n\n    public fetchConversion(transaction: Transaction): Observable<Conversion[]> {\n        return this.session.userStream.pipe(\n            take(1),\n            flatMap(user =>\n                this.http.get<Conversion[]>(`/users/${user!.id}/conversions`, {\n                    params: {\n                        baseTransactionId: transaction.id,\n                        counterTransactionId: transaction.id,\n                        q: 'or',\n                    },\n                })\n            )\n        )\n    }\n\n    public fetchTrade(transaction: Transaction): Observable<Trade[]> {\n        return this.session.userStream.pipe(\n            take(1),\n            flatMap(user =>\n                this.http.get<Paginated<Trade>>(\n                    `/users/${user.id}/${environment.appName === 'sgpmx' ? 'trades' : 'spot-trades'}`,\n                    {\n                        params: {\n                            'filter.baseTransactionId': transaction.id,\n                            'filter.counterTransactionId': transaction.id,\n                            'filter.q': 'or',\n                        },\n                    }\n                )\n            ),\n            map(response => response.data)\n        )\n    }\n\n    public downloadReport(fileType: string): void {\n        this.subscriptions.add(\n            this.session.userStream\n                .pipe(flatMap(user => this.session.createSignedUrl(`/users/${user.id}/transactions/statement`)))\n                .subscribe(signedUrl => {\n                    window.open(\n                        `${signedUrl}&from=${this.parseNgbdate(this.fromDate)}&to=${this.parseNgbdate(\n                            this.toDate\n                        )}&type=${fileType}`,\n                        '_blank',\n                        'noopener'\n                    )\n                })\n        )\n    }\n\n    public usdValue(trade: Trade): string {\n        return new BigNumber(trade.price).times(trade.quantity).toFixed(2, 1)\n    }\n\n    protected mergeFindEvents(): Observable<void> {\n        return merge(super.mergeFindEvents(), this.transactionService.changeEvent)\n    }\n\n    protected parseNgbdate(date: NgbDateStruct | null): string {\n        return `${date?.year}-${date?.month}-${date?.day}`\n    }\n\n    protected mapItem(item: any): Transaction {\n        if (item.type === 'investment') {\n            item.allocationsStream = this.fetchAllocation(item)\n        }\n        if (item.type === 'conversion') {\n            item.conversionsStream = this.fetchConversion(item)\n        }\n        if (item.type === 'trade') {\n            item.tradeStream = this.fetchTrade(item)\n        }\n        return new Transaction(item)\n    }\n\n    private buildAccountHolder(wallet: Wallet): string {\n        return `${\n            wallet.user ? `${wallet.user!.name}` : this.displayName\n        } <span class=\"text-muted\">/ ${buildWalletOwnerAccountNumber(wallet, environment.appName)}</span>`\n    }\n}\n"],"sourceRoot":"webpack:///"}