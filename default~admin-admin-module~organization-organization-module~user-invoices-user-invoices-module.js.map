{"version":3,"sources":["./src/app/common/currency-mask.config.ts","./src/app/common/models/accounting/invoice.model.ts","./src/app/common/invoices/invoices.component.html","./src/app/common/invoices/invoice-form/invoice-form.component.ts","./src/app/common/models/accounting/invoice-item.model.ts","./src/app/common/services/accounting/invoice.service.ts","./src/app/common/invoices/invoices.module.ts","./src/app/common/invoices/invoice-form/invoice-form.component.html","./src/app/common/invoices/invoice-modal/invoice-modal.component.html","./src/app/common/invoices/invoices.component.ts","./src/app/common/invoices/invoice-modal/invoice-modal.component.ts","./src/app/common/invoices/invoice-item-form/invoice-item-form.component.ts","./src/app/common/invoices/invoice-item-form/invoice-item-form.component.html"],"names":[],"mappings":"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","file":"default~admin-admin-module~organization-organization-module~user-invoices-user-invoices-module.js","sourcesContent":["import { CurrencyMaskConfig } from '@aerapass/ngx-currency-mask'\n\nexport const baseCurrencyMaskOptions: Partial<CurrencyMaskConfig> = {\n    align: 'left',\n    allowNegative: false,\n}\n\nexport const integerCurrencyMaskOptions = {\n    ...baseCurrencyMaskOptions,\n    precision: 0,\n}\n\nexport const percentageCurrencyMaskOptions = {\n    ...baseCurrencyMaskOptions,\n    prefix: '',\n    suffix: ' %',\n}\n","import BigNumber from 'bignumber.js'\nimport { IInvoice, InvoiceStatus } from '../../api-interfaces'\nimport { User } from '../core/user.model'\nimport { Currency } from './currency.model'\nimport { InvoiceItem } from './invoice-item.model'\n\nexport class Invoice implements IInvoice {\n    public id: string\n    public subject: string\n    public valueAddedTax: string\n    public invoicer: User | null\n    public invoicee: User\n    public currency: Currency\n    public dueDate: Date\n    public items: InvoiceItem[] = []\n    public status: InvoiceStatus\n    public terms: string | null\n    public createdAt: Date\n    public updatedAt: Date\n\n    public constructor(data?: IInvoice) {\n        if (data) {\n            Object.assign(this, data)\n            this.currency = new Currency(data.currency)\n            if (data.invoicer) {\n                this.invoicer = new User(data.invoicer)\n            }\n            if (data.invoicee) {\n                this.invoicee = new User(data.invoicee)\n            }\n            if (data.items) {\n                this.items = data.items.map(item => new InvoiceItem(item))\n            }\n        }\n    }\n\n    public get total(): string {\n        return this.items && this.items.length > 0\n            ? this.items\n                  .reduce((total: BigNumber, item: InvoiceItem) => {\n                      const result = new BigNumber(total).plus(\n                          new BigNumber(item.quantity).times(new BigNumber(item.price))\n                      )\n                      return result.isFinite() ? result : new BigNumber(0)\n                  }, new BigNumber(0))\n                  .toFixed(6, 1)\n            : '0'\n    }\n\n    public get tax(): string {\n        return new BigNumber(this.total).times(new BigNumber(this.valueAddedTax || 0)).toFixed(6, 1)\n    }\n\n    public get net(): string {\n        return new BigNumber(this.total).plus(new BigNumber(this.tax)).toFixed(6, 1)\n    }\n}\n","export default \"<section class=\\\"container-fluid\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header d-flex justify-content-between align-items-center\\\">\\n            <span>{{ 'common.invoices' | translate }}</span>\\n            <div>\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"requestExport()\\\">\\n                    <fa-icon [icon]=\\\"faDownload\\\" class=\\\"mr-1\\\"></fa-icon> {{ 'common.export' | translate }}\\n                </button>\\n                <button\\n                    type=\\\"button\\\"\\n                    class=\\\"btn btn-primary btn-sm ml-1\\\"\\n                    (click)=\\\"showForm($event, {})\\\"\\n                    *ngIf=\\\"['admin'].includes(session.user?.role)\\\"\\n                >\\n                    <fa-icon [icon]=\\\"faPlus\\\" class=\\\"mr-1\\\"></fa-icon> {{ 'common.new-invoice' | translate | sentenceCase }}\\n                </button>\\n            </div>\\n        </div>\\n        <div class=\\\"card-body\\\">\\n            <div class=\\\"row no-gutters align-items-center mb-3\\\">\\n                <div class=\\\"col-lg-7 mb-2 mb-lg-0\\\">\\n                    <div class=\\\"input-group\\\">\\n                        <span class=\\\"input-group-prepend\\\">\\n                            <span class=\\\"input-group-text\\\"><fa-icon [icon]=\\\"faSearch\\\"></fa-icon></span>\\n                        </span>\\n                        <input\\n                            type=\\\"text\\\"\\n                            name=\\\"searchText\\\"\\n                            (ngModelChange)=\\\"searchEvent.next()\\\"\\n                            [placeholder]=\\\"'common.search' | translate\\\"\\n                            class=\\\"form-control\\\"\\n                            [(ngModel)]=\\\"search\\\"\\n                        />\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-17 d-flex justify-content-between align-items-center\\\">\\n                    <span class=\\\"ml-lg-3\\\"\\n                        >{{ count | number }} {{ (count === 1 ? 'common.entry-found' : 'common.entries-found') | translate | lowercase }}</span\\n                    >\\n                    <div class=\\\"d-flex align-items-center\\\">\\n                        <ng-select\\n                            class=\\\"mr-2\\\"\\n                            [(ngModel)]=\\\"limit\\\"\\n                            dropdownPosition=\\\"auto\\\"\\n                            (change)=\\\"select(1)\\\"\\n                            [items]=\\\"limitOpts\\\"\\n                            [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                            [clearable]=\\\"false\\\"\\n                            [searchable]=\\\"false\\\"\\n                            required\\n                        >\\n                            <ng-template ng-label-tmp let-item=\\\"item\\\">{{ 'common.show-entries' | translate: { value: item } }}</ng-template>\\n                            <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                        </ng-select>\\n                        <ngb-pagination\\n                            [(page)]=\\\"page\\\"\\n                            [collectionSize]=\\\"count\\\"\\n                            (pageChange)=\\\"select()\\\"\\n                            [pageSize]=\\\"limit\\\"\\n                            [maxSize]=\\\"5\\\"\\n                            [ellipses]=\\\"false\\\"\\n                            [rotate]=\\\"true\\\"\\n                            [boundaryLinks]=\\\"true\\\"\\n                        >\\n                        </ngb-pagination>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"table-responsive position-relative\\\">\\n                <table class=\\\"table table-hover table-bordered table-data\\\">\\n                    <thead class=\\\"thead-light\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\">#</th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.invoicer' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['invoicer', 'name']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['invoicer', 'name'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['invoicer', 'name']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.invoicee' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['invoicee', 'name']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['invoicee', 'name'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['invoicee', 'name']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.subject' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['subject']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['subject'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['subject']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.status' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th class=\\\"text-right\\\" scope=\\\"col\\\">{{ 'common.total' | translate }}</th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.due-date' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['dueDate']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['dueDate'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['dueDate']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\" *ngIf=\\\"['admin'].includes(session.user?.role)\\\">{{ 'common.actions' | translate }}</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                            <tr *ngFor=\\\"let invoice of items\\\">\\n                                <th scope=\\\"row\\\" [width]=\\\"'1%'\\\">\\n                                    <uuid [value]=\\\"invoice.id\\\"></uuid>\\n                                </th>\\n                                <td>\\n                                    <user-display [user]=\\\"invoice.invoicer\\\"> </user-display>\\n                                </td>\\n                                <td>\\n                                    <user-display [user]=\\\"invoice.invoicee\\\"> </user-display>\\n                                </td>\\n                                <td>{{ invoice.subject }}</td>\\n                                <td>\\n                                    <span\\n                                        class=\\\"text-capitalize badge badge-lg\\\"\\n                                        [ngClass]=\\\"{\\n                                            'badge-success': invoice.status === 'completed',\\n                                            'badge-info': invoice.status === 'pending',\\n                                            'badge-danger': invoice.status === 'cancelled'\\n                                        }\\\"\\n                                        >{{ invoice.status }}</span\\n                                    >\\n                                </td>\\n                                <td class=\\\"text-right text-primary\\\">\\n                                    {{ (invoice.net | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}\\n                                </td>\\n                                <td>\\n                                    {{ invoice.dueDate | date: 'mediumDate' }}\\n                                </td>\\n                                <td class=\\\"action\\\" *ngIf=\\\"['admin'].includes(session.user?.role)\\\">\\n                                    <div class=\\\"btn-group w-100\\\">\\n                                        <button\\n                                            type=\\\"button\\\"\\n                                            class=\\\"btn btn-primary-air btn-sm btn-block px-2\\\"\\n                                            (click)=\\\"$event.preventDefault(); viewInvoice(invoice)\\\"\\n                                        >\\n                                            {{ 'common.view' | translate }}\\n                                        </button>\\n                                        <div class=\\\"btn-group\\\" ngbDropdown container=\\\"body\\\" placement=\\\"bottom-right\\\">\\n                                            <button class=\\\"btn btn-primary-air btn-sm dropdown-toggle-split\\\" ngbDropdownToggle>\\n                                                <fa-icon [icon]=\\\"faCaretDown\\\"></fa-icon>\\n                                            </button>\\n                                            <div class=\\\"dropdown-menu dropdown-menu-sm\\\" ngbDropdownMenu>\\n                                                <a href ngbDropdownItem (click)=\\\"$event.preventDefault(); openInvoice(invoice)\\\">{{\\n                                                    'common.file' | translate\\n                                                }}</a>\\n                                                <ng-container *ngIf=\\\"invoice.status === 'pending'\\\">\\n                                                    <a href ngbDropdownItem (click)=\\\"$event.preventDefault(); cancel(invoice)\\\">{{\\n                                                        'common.cancel' | translate\\n                                                    }}</a>\\n                                                </ng-container>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                            <tr *ngIf=\\\"items.length === 0\\\">\\n                                <td colspan=\\\"8\\\" class=\\\"text-center\\\">{{ 'common.no-entries-found' | translate }}</td>\\n                            </tr>\\n                        </ng-container>\\n                    </tbody>\\n                </table>\\n                <ng-container *ngIf=\\\"isFetching | async\\\">\\n                    <circle-spinner></circle-spinner>\\n                </ng-container>\\n            </div>\\n        </div>\\n    </div>\\n</section>\\n\";","import { HttpClient, HttpParams } from '@angular/common/http'\nimport {\n    Component,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { faChevronLeft, faSave, faTrash } from '@fortawesome/pro-light-svg-icons'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { find } from 'lodash'\nimport { Subscription } from 'rxjs'\nimport { debounceTime, distinctUntilChanged, finalize, switchMap } from 'rxjs/operators'\nimport { IUser, Paginated } from '../../api-interfaces'\nimport { convertPercentage } from '../../common.mixin'\nimport { countriesSortedByName } from '../../countries'\nimport { percentageCurrencyMaskOptions } from '../../currency-mask.config'\nimport { Currency } from '../../models/accounting/currency.model'\nimport { InvoiceItem } from '../../models/accounting/invoice-item.model'\nimport { Invoice } from '../../models/accounting/invoice.model'\nimport { User } from '../../models/core/user.model'\nimport { InvoiceService } from '../../services/accounting/invoice.service'\nimport { SessionService } from '../../services/session.service'\nimport { ToastrService } from '../../services/toastr.service'\nimport { InvoiceItemFormComponent } from '../invoice-item-form/invoice-item-form.component'\n\n@Component({\n    selector: 'invoice-form',\n    templateUrl: 'invoice-form.component.html',\n})\nexport class InvoiceFormComponent implements OnInit, OnDestroy {\n    @Input()\n    public item: Invoice\n    @Output()\n    public readonly onSave = new EventEmitter<void>()\n    @Output()\n    public readonly onDelete = new EventEmitter<void>()\n    public invoice: Invoice\n    public currencies: Currency[] = []\n    public items: InvoiceItem[] = [new InvoiceItem()]\n    public invoicee: string\n    public dueDate: string\n    @ViewChild('invoiceForm')\n    public form: NgForm\n    @ViewChildren('itemsForm')\n    public itemsForm: QueryList<InvoiceItemFormComponent>\n    public editorModules = {\n        toolbar: [\n            ['bold', 'italic', 'underline'],\n            [{ list: 'bullet' }],\n            [{ indent: '-1' }, { indent: '+1' }],\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\n            [{ align: [] as string[] }],\n            ['clean'],\n            ['link'],\n        ],\n    }\n\n    public user: User | undefined\n    public userAutocomplete = new EventEmitter<string>()\n    public legalEntitiesStream = this.userAutocomplete.pipe(\n        distinctUntilChanged(),\n        debounceTime(200),\n        switchMap(search =>\n            this.http.get<IUser[]>('/users', {\n                params: new HttpParams().set('limit', '25').set('search', search),\n            })\n        )\n    )\n\n    public faChevronLeft = faChevronLeft\n    public faTrash = faTrash\n    public faSave = faSave\n    public isLoading = false\n    public isTermsCollapsed = true\n\n    public percentageCurrencyMaskOptions = percentageCurrencyMaskOptions\n    public convertPercentage = convertPercentage\n\n    public valueAddedTax: string\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private session: SessionService,\n        private http: HttpClient,\n        private toastr: ToastrService,\n        private invoices: InvoiceService,\n        public activeModal: NgbActiveModal,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.invoice = new Invoice()\n        this.invoice.items = this.items\n        this.invoice.valueAddedTax = '0.00'\n        this.valueAddedTax = this.invoice.valueAddedTax\n\n        this.http\n            .get<Paginated<Currency>>('/currencies', {\n                params: {\n                    limit: 100 + '',\n                    'filter.type': 'or:fiat,crypto,metal',\n                },\n            })\n            .subscribe(response => {\n                this.currencies = response.data\n                const currency = find(this.currencies, { code: this.session.user.preferredCurrency.code })\n                if (currency) {\n                    this.invoice.currency = currency\n                } else if (this.currencies.length > 0) {\n                    this.invoice.currency = this.currencies[0]\n                }\n            })\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        for (const form of this.itemsForm.toArray()) {\n            form.submit()\n        }\n        if (this.form.invalid || this.itemsForm.some(form => !form.isValid())) {\n            return\n        }\n        const body = {\n            subject: this.invoice.subject,\n            currency: {\n                code: this.invoice.currency.code,\n            } as Currency,\n            valueAddedTax: this.invoice.valueAddedTax,\n            dueDate: `${this.dueDate.slice(4)}-${this.dueDate.slice(2, 4)}-${this.dueDate.slice(0, 2)}`,\n            invoicer: null as null,\n            invoicee: { accountNumber: this.user?.accountNumber ?? '' },\n            items: this.items.map(item => Object.assign(item, { price: item.price.toString() })),\n            terms: !this.isTermsCollapsed ? this.invoice.terms : null,\n        }\n        this.isLoading = true\n        this.subscriptions.add(\n            this.invoices\n                .create(body)\n                .pipe(\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(invoice => {\n                    this.invoice = invoice\n                    this.toastr.success(this.translate.instant('common.invoice-created'))\n                    this.onSave.next()\n                })\n        )\n    }\n\n    public addItem(): void {\n        this.items.push(new InvoiceItem())\n    }\n\n    public mapToCountry(code: string): string {\n        if (!code) {\n            return ''\n        }\n        const country = find(countriesSortedByName, { alpha2: code })\n        return country ? country.name : ''\n    }\n}\n","import BigNumber from 'bignumber.js'\nimport { IInvoiceItem } from '../../api-interfaces'\n\nexport class InvoiceItem implements IInvoiceItem {\n    public id: string\n    public description: string\n    public quantity: number\n    public price: string\n\n    constructor(data?: IInvoiceItem) {\n        Object.assign(this, data)\n    }\n\n    public get total(): string {\n        const result = new BigNumber(this.quantity).times(new BigNumber(this.price))\n        return result.isFinite() ? result.toFixed(6, 1) : '0'\n    }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Operation } from 'fast-json-patch'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { RPCResult } from '../../api-interfaces'\nimport { Invoice } from '../../models/accounting/invoice.model'\n\nexport interface InvoiceCreatePayload {\n    subject: string\n    dueDate: string\n    invoicer: {\n        id: string\n    } | null\n    invoicee: {\n        accountNumber: string\n    }\n    valueAddedTax: string\n    currency: {\n        code: string\n    }\n    items: {\n        description: string\n        price: string\n        quantity: number\n    }[]\n    terms?: string | null\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class InvoiceService {\n    constructor(private http: HttpClient) {}\n\n    public fetchById(id: string): Observable<Invoice> {\n        return this.http.get<Invoice>(`/invoices/${id}`).pipe(map(invoice => new Invoice(invoice)))\n    }\n\n    public create(createPayload: InvoiceCreatePayload): Observable<Invoice> {\n        return this.http.post<Invoice>('/invoices', createPayload).pipe(map(invoice => new Invoice(invoice)))\n    }\n\n    public patch(id: string, operations: Operation[]): Observable<Invoice> {\n        return this.http\n            .patch<Invoice>(`/invoices/${id}`, operations, {\n                headers: new HttpHeaders({\n                    'Content-Type': 'application/json-patch+json',\n                }),\n            })\n            .pipe(map(invoice => new Invoice(invoice)))\n    }\n\n    public settle(id: string): Observable<Invoice> {\n        return this.http\n            .post<RPCResult<Invoice>>(\n                `/invoices/${id}`,\n                {\n                    id: Math.round(Math.random() * 10000),\n                    jsonrpc: '2.0',\n                    method: 'settle',\n                },\n                {\n                    headers: new HttpHeaders({\n                        'Content-Type': 'application/json-rpc',\n                    }),\n                }\n            )\n            .pipe(map(rpcResult => new Invoice(rpcResult.result)))\n    }\n\n    public countByUserId(id: string, where: any): Observable<number> {\n        return this.count(`/users/${id}/invoices`, where)\n    }\n\n    private count(url: string, where?: any): Observable<number> {\n        return this.http\n            .head(url, {\n                observe: 'response',\n                params: new HttpParams().set('where', JSON.stringify(where)),\n            })\n            .pipe(\n                map(response =>\n                    response.headers && response.headers.has('x-total-count')\n                        ? ~~response.headers.get('x-total-count')!\n                        : 0\n                )\n            )\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common.module'\nimport { QuillEditorModule } from '../quill-editor/quill-editor.module'\nimport { InvoiceFormComponent } from './invoice-form/invoice-form.component'\nimport { InvoiceItemFormComponent } from './invoice-item-form/invoice-item-form.component'\nimport { InvoiceModalComponent } from './invoice-modal/invoice-modal.component'\nimport { InvoicesComponent } from './invoices.component'\n\n@NgModule({\n    declarations: [InvoicesComponent, InvoiceFormComponent, InvoiceItemFormComponent, InvoiceModalComponent],\n    exports: [InvoicesComponent, InvoiceFormComponent, InvoiceItemFormComponent, InvoiceModalComponent],\n    imports: [CommonModule, QuillEditorModule],\n})\nexport class InvoicesModule {}\n","export default \"<form\\n    class=\\\"form-validation\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': invoiceForm.submitted }\\\"\\n    #invoiceForm=\\\"ngForm\\\"\\n    (ngSubmit)=\\\"submit()\\\"\\n    autocomplete=\\\"false\\\"\\n    novalidate\\n>\\n    <div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">{{ 'common.create-invoice' | translate }}</h5>\\n        <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss(); $event.preventDefault()\\\">&times;</button>\\n    </div>\\n    <div class=\\\"modal-body pb-0\\\">\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"user\\\">{{ 'common.invoicee' | translate }}</label>\\n            <ng-select\\n                id=\\\"user\\\"\\n                name=\\\"user\\\"\\n                [placeholder]=\\\"'common.enter-invoicee' | translate\\\"\\n                [(ngModel)]=\\\"user\\\"\\n                #userInput=\\\"ngModel\\\"\\n                [items]=\\\"legalEntitiesStream | async\\\"\\n                [typeahead]=\\\"userAutocomplete\\\"\\n                [clearable]=\\\"false\\\"\\n                required\\n            >\\n                <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                    {{ item.name }} <small class=\\\"text-gray\\\">{{ item.email }}</small>\\n                </ng-template>\\n                <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                    <div class=\\\"d-flex align-items-center justify-content-center\\\">\\n                        <user-avatar *ngIf=\\\"item\\\" [user]=\\\"item\\\" size=\\\"sm\\\" elementClass=\\\"mr-2\\\"></user-avatar>\\n                        <div class=\\\"w-100\\\">\\n                            <div>{{ item.name }}</div>\\n                            <small class=\\\"text-gray\\\">{{ item.email }}</small>\\n                        </div>\\n                    </div>\\n                </ng-template>\\n            </ng-select>\\n            <div *ngIf=\\\"userInput.invalid && (invoiceForm.submitted || userInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"userInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"form-control-label\\\" for=\\\"currency\\\">{{ 'common.subject' | translate }}</label>\\n            <input class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"invoice.subject\\\" id=\\\"subject\\\" name=\\\"subject\\\" #subject=\\\"ngModel\\\" required />\\n            <div *ngIf=\\\"subject.invalid && (invoiceForm.submitted || subject.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"subject?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"valueAddedTax\\\">VAT / GST</label>\\n            <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"valueAddedTax\\\"\\n                name=\\\"valueAddedTax\\\"\\n                [(ngModel)]=\\\"valueAddedTax\\\"\\n                (ngModelChange)=\\\"valueAddedTax && (invoice.valueAddedTax = convertPercentage(valueAddedTax))\\\"\\n                currencyMask\\n                [options]=\\\"percentageCurrencyMaskOptions\\\"\\n                #valueAddedTaxField=\\\"ngModel\\\"\\n                required\\n            />\\n            <div *ngIf=\\\"valueAddedTaxField.invalid && (invoiceForm.submitted || valueAddedTaxField.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"valueAddedTaxField?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"currency\\\">{{ 'common.currency' | translate }}</label>\\n                <ng-select\\n                    id=\\\"currency\\\"\\n                    name=\\\"currency\\\"\\n                    [(ngModel)]=\\\"invoice.currency\\\"\\n                    bindLabel=\\\"code\\\"\\n                    [items]=\\\"currencies\\\"\\n                    [clearable]=\\\"false\\\"\\n                    #currency=\\\"ngModel\\\"\\n                    autocomplete=\\\"false\\\"\\n                    aria-autocomplete=\\\"false\\\"\\n                    required\\n                ></ng-select>\\n                <div *ngIf=\\\"currency.invalid && (invoiceForm.submitted || currency.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currency?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"dueDate\\\">{{ 'common.due-date' | translate | sentenceCase }}</label>\\n                <input\\n                    class=\\\"form-control\\\"\\n                    type=\\\"text\\\"\\n                    id=\\\"dueDate\\\"\\n                    name=\\\"dueDate\\\"\\n                    mask=\\\"00/00/0000\\\"\\n                    [(ngModel)]=\\\"dueDate\\\"\\n                    #dueDateInput=\\\"ngModel\\\"\\n                    required\\n                />\\n                <small class=\\\"form-text text-muted\\\">{{ 'common.format' | translate }}: dd/mm/yyyy</small>\\n                <div *ngIf=\\\"dueDateInput.invalid && (invoiceForm.submitted || dueDateInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"dueDateInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n        </div>\\n        <label class=\\\"form-control-label\\\">{{ 'common.items' | translate }}</label>\\n        <invoice-item-form *ngFor=\\\"let item of items; index as i\\\" [item]=\\\"item\\\" (onDelete)=\\\"items.splice(i, 1)\\\" #itemsForm></invoice-item-form>\\n        <div class=\\\"form-group d-flex justify-content-end\\\">\\n            <a href (click)=\\\"addItem(); $event.preventDefault()\\\">+ {{ 'common.add-item' | translate }}</a>\\n        </div>\\n        <div class=\\\"card\\\">\\n            <div class=\\\"card-body\\\">\\n                <div class=\\\"d-flex flex-column justify-content-end\\\">\\n                    <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                        <span>{{ 'common.subtotal' | translate }}</span>\\n                        <span>{{ (invoice.total | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span>\\n                    </div>\\n                    <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                        <span>VAT ({{ invoice.valueAddedTax | percent }})</span>\\n                        <span>{{ (invoice.tax | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span>\\n                    </div>\\n                    <div class=\\\"d-flex justify-content-between\\\">\\n                        <span class=\\\"font-weight-bold\\\">{{ 'common.total' | translate }}</span>\\n                        <span class=\\\"font-weight-bold\\\"\\n                            >{{ (invoice.net | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span\\n                        >\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <a href class=\\\"d-block mb-2\\\" (click)=\\\"isTermsCollapsed = !isTermsCollapsed; $event.preventDefault()\\\"\\n            >{{ isTermsCollapsed ? '+ ' + ('common.add' | translate) : '- ' + ('common.remove' | translate) }}\\n            {{ 'common.terms' | translate | lowercase }}</a\\n        >\\n        <div class=\\\"mb-2\\\" [ngbCollapse]=\\\"isTermsCollapsed\\\">\\n            <label class=\\\"form-control-label font-md\\\">{{ 'common.terms' | translate }} ({{ 'common.optional' | translate }})</label>\\n            <quill-editor\\n                name=\\\"terms\\\"\\n                [(ngModel)]=\\\"invoice.terms\\\"\\n                [modules]=\\\"editorModules\\\"\\n                [placeholder]=\\\"'common.enter-your-terms' | translate\\\"\\n                [sanitize]=\\\"true\\\"\\n            ></quill-editor>\\n        </div>\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-w-sm\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n            {{ 'common.create' | translate }}\\n        </button>\\n    </div>\\n</form>\\n\";","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">{{ 'common.invoice' | translate }}: {{ invoice ? invoice.subject : 'Loading invoice' }}</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n</div>\\n<div class=\\\"modal-body e2e-invoice-modal\\\" *ngIf=\\\"invoice; else loading\\\">\\n    <div class=\\\"row mb-2\\\">\\n        <div class=\\\"col-sm-12\\\">\\n            <label class=\\\"form-control-label mr-1\\\">{{ 'common.invoicee' | translate }}</label>\\n            <user-display [user]=\\\"invoice.invoicee ? invoice.invoicee : undefined\\\"> </user-display>\\n        </div>\\n        <div class=\\\"col-sm-12\\\">\\n            <div class=\\\"d-flex justify-content-end\\\">\\n                <label class=\\\"form-control-label mr-1\\\" for=\\\"dueDate\\\">{{ 'common.due-date' | translate }}</label>\\n                <div class=\\\"font-weight-bold\\\">{{ invoice.dueDate | formatDate: 'dd/MM/yyyy' }}</div>\\n            </div>\\n            <div class=\\\"d-flex justify-content-end\\\">\\n                <label class=\\\"form-control-label mr-1\\\" for=\\\"dueDate\\\">{{ 'common.status' | translate }}</label>\\n                <span\\n                    class=\\\"text-capitalize label\\\"\\n                    [ngClass]=\\\"{\\n                        'label-success': invoice.status === 'completed',\\n                        'label-info': invoice.status === 'pending',\\n                        'label-danger': invoice.status === 'cancelled'\\n                    }\\\"\\n                    >{{ invoice.status }}</span\\n                >\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"mb-3\\\">\\n        <label class=\\\"form-control-label mr-1\\\">{{ 'common.invoicer' | translate }}</label>\\n        <user-display [user]=\\\"invoice.invoicer ? invoice.invoicer : null\\\"> </user-display>\\n    </div>\\n    <div class=\\\"table-responsive\\\">\\n        <table class=\\\"table table-striped\\\">\\n            <thead>\\n                <tr>\\n                    <th scope=\\\"col\\\">Description</th>\\n                    <th class=\\\"text-right\\\" scope=\\\"col\\\">{{ 'common.price' | translate }}</th>\\n                    <th class=\\\"text-right\\\" scope=\\\"col\\\">{{ 'common.quantity' | translate }}</th>\\n                    <th class=\\\"text-right\\\" scope=\\\"col\\\">{{ 'common.total' | translate }}</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr *ngFor=\\\"let item of invoice.items\\\" class=\\\"bg-white\\\">\\n                    <th scope=\\\"row\\\">{{ item.description }}</th>\\n                    <td class=\\\"text-right\\\">{{ item.price | amount: invoice.currency.decimalPlaces }}</td>\\n                    <td class=\\\"text-right\\\">{{ item.quantity }}</td>\\n                    <td class=\\\"text-right\\\">{{ (item.total | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</td>\\n                </tr>\\n            </tbody>\\n        </table>\\n    </div>\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n            <div class=\\\"d-flex flex-column justify-content-end\\\">\\n                <div class=\\\"d-flex justify-content-between mb-2\\\">\\n                    <span>Subtotal</span>\\n                    <span>{{ (invoice.total | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span>\\n                </div>\\n                <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                    <span>VAT ({{ invoice.valueAddedTax | percent }})</span>\\n                    <span>{{ (invoice.tax | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span>\\n                </div>\\n                <div class=\\\"d-flex justify-content-between\\\">\\n                    <span class=\\\"font-weight-bold\\\">Total</span>\\n                    <span class=\\\"font-weight-bold\\\"\\n                        >{{ (invoice.net | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span\\n                    >\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div *ngIf=\\\"invoice.terms\\\">\\n        <div [innerHTML]=\\\"invoice.terms\\\"></div>\\n    </div>\\n    <button\\n        (click)=\\\"settle()\\\"\\n        *ngIf=\\\"invoice.status === 'pending'\\\"\\n        class=\\\"btn btn-lg btn-block btn-primary mt-1 e2e-pay-invoice-btn\\\"\\n        [ngClass]=\\\"{ loading: isLoading }\\\"\\n        [disabled]=\\\"isLoading\\\"\\n    >\\n        {{ 'common.pay-now' | translate }}\\n    </button>\\n</div>\\n<ng-template #loading>\\n    <div class=\\\"modal-body py-5\\\">\\n        <svg class=\\\"spinner spinner-dark\\\" viewBox=\\\"0 0 50 50\\\">\\n            <circle class=\\\"path\\\" cx=\\\"25\\\" cy=\\\"25\\\" r=\\\"20\\\" fill=\\\"none\\\" stroke-width=\\\"5\\\"></circle>\\n        </svg>\\n    </div>\\n</ng-template>\\n\";","import { HttpClient } from '@angular/common/http'\nimport { ChangeDetectorRef, Component, Input } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { toStartCase } from '../common.mixin'\nimport { ListComponent } from '../list.component'\nimport { Invoice } from '../models/accounting/invoice.model'\nimport { InvoiceService } from '../services/accounting/invoice.service'\nimport { ConfirmationService } from '../services/confirmation.service'\nimport { SessionService } from '../services/session.service'\nimport { ToastrService } from '../services/toastr.service'\nimport { InvoiceFormComponent } from './invoice-form/invoice-form.component'\nimport { InvoiceModalComponent } from './invoice-modal/invoice-modal.component'\n\n@Component({\n    selector: 'invoices',\n    templateUrl: 'invoices.component.html',\n})\nexport class InvoicesComponent extends ListComponent<Invoice> {\n    public toStartCase = toStartCase\n    @Input()\n    protected apiUrl = '/invoices'\n    protected formComponent = InvoiceFormComponent\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        confirmation: ConfirmationService,\n        protected toastr: ToastrService,\n        protected invoices: InvoiceService,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n    }\n\n    public viewInvoice(invoice: Invoice): void {\n        const modal = this.ngbModal.open(InvoiceModalComponent, {\n            backdrop: 'static',\n            windowClass: 'modal-primary',\n        })\n        const viewInvoiceModal = modal.componentInstance as InvoiceModalComponent\n        viewInvoiceModal.invoiceId = invoice.id\n        viewInvoiceModal.onSettle.subscribe(() => this.updateEvent.next())\n    }\n\n    public cancel(invoice: Invoice): void {\n        this.subscriptions.add(\n            this.invoices\n                .patch(invoice.id, [\n                    {\n                        op: 'replace',\n                        path: '/status',\n                        value: 'cancelled',\n                    },\n                ])\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.invoice-cancelled'))\n                    this.updateEvent.next()\n                })\n        )\n    }\n\n    public openInvoice(invoice: Invoice): void {\n        this.subscriptions.add(\n            this.session.createSignedUrl(`/invoices/${invoice.id}/file`).subscribe(signedUrl => {\n                window.open(signedUrl, '_blank', 'noopener')\n            })\n        )\n    }\n\n    protected mapItem(item: any): Invoice {\n        return new Invoice(item)\n    }\n}\n","import { Component, EventEmitter, OnDestroy, OnInit } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\nimport { finalize } from 'rxjs/operators'\nimport { WalletsService } from '../../../store/wallets/wallets.service'\nimport { Invoice } from '../../models/accounting/invoice.model'\nimport { InvoiceService } from '../../services/accounting/invoice.service'\nimport { SessionService } from '../../services/session.service'\nimport { ToastrService } from '../../services/toastr.service'\n\n@Component({\n    selector: 'invoice-modal',\n    templateUrl: 'invoice-modal.component.html',\n})\nexport class InvoiceModalComponent implements OnInit, OnDestroy {\n    public invoiceId: string\n    public invoice: Invoice\n    public isLoading = false\n\n    public onSettle = new EventEmitter<void>()\n    private subscriptions = new Subscription()\n\n    constructor(\n        public activeModal: NgbActiveModal,\n        private invoices: InvoiceService,\n        private session: SessionService,\n        private toastr: ToastrService,\n        private walletsService: WalletsService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.invoices.fetchById(this.invoiceId).subscribe(invoice => {\n                this.invoice = invoice\n            })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public isInvoicee(): boolean {\n        return this.session.user.id === this.invoice.invoicee.id\n    }\n\n    public settle(): void {\n        this.isLoading = true\n        this.subscriptions.add(\n            this.invoices\n                .settle(this.invoice.id)\n                .pipe(\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.invoice-settled'))\n                    this.walletsService.fetch()\n                    this.onSettle.emit()\n                    this.activeModal.close(true)\n                })\n        )\n    }\n}\n","import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { faTrash } from '@fortawesome/pro-solid-svg-icons'\nimport { InvoiceItem } from '../../models/accounting/invoice-item.model'\n\n@Component({\n    selector: 'invoice-item-form',\n    templateUrl: 'invoice-item-form.component.html',\n})\nexport class InvoiceItemFormComponent {\n    @Input()\n    public item: InvoiceItem\n    @Input()\n    public size: 'lg' | undefined\n    @Output()\n    public readonly onDelete = new EventEmitter<void>()\n    @ViewChild('form')\n    public form: NgForm\n    public submitted = false\n\n    public faTrash = faTrash\n\n    public submit(): void {\n        this.submitted = true\n    }\n\n    public isValid(): boolean {\n        return !!this.form.valid\n    }\n}\n","export default \"<form #form=\\\"ngForm\\\" class=\\\"form-validation\\\" [ngClass]=\\\"{ 'ng-submitted': submitted }\\\" novalidate>\\n    <div class=\\\"form-row align-items-baseline\\\">\\n        <div class=\\\"form-group col-12\\\">\\n            <input\\n                class=\\\"form-control\\\"\\n                [ngClass]=\\\"size ? 'form-control-' + size : ''\\\"\\n                [(ngModel)]=\\\"item.description\\\"\\n                [placeholder]=\\\"'common.description' | translate\\\"\\n                type=\\\"text\\\"\\n                id=\\\"description\\\"\\n                name=\\\"description\\\"\\n                #description=\\\"ngModel\\\"\\n                required\\n            />\\n            <div *ngIf=\\\"description.invalid && (submitted || description.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"description?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group col-4\\\">\\n            <input\\n                class=\\\"form-control\\\"\\n                [ngClass]=\\\"size ? 'form-control-' + size : ''\\\"\\n                [(ngModel)]=\\\"item.quantity\\\"\\n                placeholder=\\\"Qty\\\"\\n                type=\\\"number\\\"\\n                step=\\\"1\\\"\\n                [min]=\\\"1\\\"\\n                id=\\\"quantity\\\"\\n                name=\\\"quantity\\\"\\n                #quantity=\\\"ngModel\\\"\\n                integerValidator\\n                required\\n            />\\n            <div *ngIf=\\\"quantity.invalid && (submitted || quantity.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"quantity?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n            <div *ngIf=\\\"quantity.invalid && (submitted || quantity.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"quantity?.errors?.min\\\">{{ 'common.minimum-value-is-one' | translate }}</div>\\n            </div>\\n            <div *ngIf=\\\"quantity.invalid && (submitted || quantity.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"quantity?.errors?.invalidInteger\\\">{{ 'common.value-must-be-integer' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group col-6\\\">\\n            <input\\n                class=\\\"form-control\\\"\\n                [ngClass]=\\\"size ? 'form-control-' + size : ''\\\"\\n                [(ngModel)]=\\\"item.price\\\"\\n                [placeholder]=\\\"'common.price' | translate\\\"\\n                type=\\\"number\\\"\\n                id=\\\"price\\\"\\n                [min]=\\\"0\\\"\\n                step=\\\"2\\\"\\n                name=\\\"price\\\"\\n                [decimal]=\\\"2\\\"\\n                #price=\\\"ngModel\\\"\\n                decimalValidator\\n                required\\n            />\\n            <div *ngIf=\\\"price.invalid && (submitted || price.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"price?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n            <div *ngIf=\\\"price.invalid && (submitted || price.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"price?.errors?.min\\\">{{ 'common.minimum-value-is-zero' | translate }}</div>\\n            </div>\\n            <div *ngIf=\\\"price.invalid && (submitted || price.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"price?.errors?.invalidDecimal\\\">{{ 'common.decimal-more-than-two' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"col-2\\\">\\n            <a href class=\\\"btn btn-danger-air\\\" (click)=\\\"onDelete.emit(); $event.preventDefault()\\\">\\n                <fa-icon [icon]=\\\"faTrash\\\"></fa-icon>\\n            </a>\\n        </div>\\n    </div>\\n</form>\\n\";"],"sourceRoot":"webpack:///"}