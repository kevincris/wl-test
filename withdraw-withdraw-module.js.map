{"version":3,"sources":["./src/app/common/models/accounting/fee.model.ts","./src/app/withdraw/withdraw-routing.module.ts","./src/app/withdraw/withdraw.component.ts","./src/app/withdraw/withdraw-form/withdraw-form.component.ts","./src/app/withdraw/withdraw.module.ts","./src/app/withdraw/withdraw-form/withdraw-form.component.html","./src/app/common/services/accounting/fee.service.ts","./src/app/withdraw/withdraw.component.html"],"names":[],"mappings":"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","file":"withdraw-withdraw-module.js","sourcesContent":["import { FeeType, IFee, TransactionMethod } from '../../api-interfaces'\nimport { User } from '../core/user.model'\nimport { Beneficiary } from './beneficiary.model'\nimport { Currency } from './currency.model'\n\nexport const feeTypeMap: { [K in FeeType]: string } = {\n    'account-fee': 'Account Fee',\n    'card-order': 'Card Order Fee',\n    'fx-spread': 'Exchange Rate Spread',\n    deposit: 'Deposit',\n    withdrawal: 'Withdrawal',\n    transfer: 'Transfer',\n    conversion: 'Conversion',\n    investment: 'Investment',\n    trade: 'Trade',\n    redeem: 'Redeem',\n    service: 'Buy & Sell',\n    gst: 'GST',\n    payment: 'Payment',\n}\n\nexport const feeMethodMap: { [K in TransactionMethod]: string } = {\n    internal: 'Internal',\n    card: 'Topup Card',\n    crypto: 'Crypto',\n    local: 'LOCAL',\n    swift: 'SWIFT',\n}\n\nexport class Fee implements IFee {\n    public id: string\n    public type: FeeType\n    public method: TransactionMethod\n    public fixed: string | null\n    public relative: string | null\n    public max: string | null\n    public min: string | null\n    public minValue: string | null\n    public currency: Currency\n    public user: User | null\n    public beneficiary: Beneficiary | null\n    public createdAt: string\n    public updatedAt: string\n\n    public constructor(data?: Partial<IFee>) {\n        if (data) {\n            Object.assign(this, data)\n            if (data.currency) {\n                this.currency = new Currency(data.currency)\n            }\n            if (data.user) {\n                this.user = new User(data.user)\n            }\n            if (data.beneficiary) {\n                this.beneficiary = new Beneficiary(data.beneficiary)\n            }\n        }\n    }\n\n    public isGlobal(): boolean {\n        return this.user === null\n    }\n\n    public isFallback(currency: Currency): boolean {\n        return this.currency.code !== currency.code\n    }\n\n    public isAssociationFee(user: User | null): boolean {\n        return !!this.user && !!user && this.user.id !== user.id\n    }\n\n    public hasFixedFee(): boolean {\n        return !['fx-spread', 'service', 'gst'].includes(this.type)\n    }\n\n    public hasRelativeFee(): boolean {\n        return !['account-fee'].includes(this.type)\n    }\n\n    public hasMaxOrMin(): boolean {\n        return !['account-fee', 'fx-spread'].includes(this.type)\n    }\n\n    public hasMinValue(): boolean {\n        return ['transfer', 'deposit', 'withdrawal'].includes(this.type)\n    }\n}\n\nexport function getFeeType(transactionType: string): FeeType {\n    const feeMap: Record<string, FeeType> = {\n        deposit: 'deposit',\n        withdrawal: 'withdrawal',\n        transfer: 'transfer',\n        conversion: 'conversion',\n        investment: 'investment',\n        trade: 'trade',\n        redeem: 'redeem',\n        payment: 'payment',\n        // Use transfer fee for invoice\n        invoice: 'transfer',\n        'invoice-p2p': 'transfer',\n        'card-order': 'card-order',\n        'account-fee': 'account-fee',\n    }\n    return feeMap[transactionType]\n}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { PaymentGuard } from '../common/payment/payment.guard'\nimport { WithdrawComponent } from './withdraw.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: WithdrawComponent,\n        data: {\n            redirectTo: '/withdraw',\n        },\n        canActivate: [LoggedInAuthGuard, PaymentGuard],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class WithdrawRoutingModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { Subscription } from 'rxjs'\nimport { IBeneficiary, Transaction, TransactionMethod, Wallet } from '../common/api-interfaces'\nimport { SessionService } from '../common/services/session.service'\n\n@Component({\n    selector: 'withdraw',\n    templateUrl: 'withdraw.component.html',\n})\nexport class WithdrawComponent implements OnInit, OnDestroy {\n    public transaction: Partial<Transaction>\n    private subscriptions = new Subscription()\n\n    constructor(private route: ActivatedRoute, public session: SessionService) {}\n\n    public async ngOnInit(): Promise<void> {\n        if (this.route.snapshot.queryParamMap.has('method')) {\n            this.resetTransaction(this.route.snapshot.queryParamMap.get('method') as TransactionMethod)\n        }\n        this.route.queryParamMap.subscribe(params => {\n            this.resetTransaction((params.get('method') || 'swift') as TransactionMethod)\n        })\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    private resetTransaction(method: TransactionMethod): void {\n        this.transaction = {\n            type: 'withdrawal',\n            method,\n            counterWallet: {\n                user: null,\n            } as Wallet,\n            beneficiary: {\n                method: method as any,\n            } as IBeneficiary,\n        }\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { faQuestionCircle } from '@fortawesome/pro-light-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport { pick } from 'lodash'\nimport { combineLatest, forkJoin, Observable, of, Subject, Subscription, throwError } from 'rxjs'\nimport { mergeMap, map, switchMap, tap, catchError } from 'rxjs/operators'\nimport { ICurrency, IFee, IUser, Transaction, TransactionMethod, Wallet } from 'src/app/common/api-interfaces'\nimport { BeneficiaryDetailsFormComponent } from 'src/app/common/beneficiary-form/beneficiary-details-form/beneficiary-details-form.component'\nimport { Beneficiary } from 'src/app/common/models/accounting/beneficiary.model'\nimport { Currency } from 'src/app/common/models/accounting/currency.model'\nimport { openNoAccessModal } from 'src/app/common/no-access-modal/no-access-modal.component'\nimport { BeneficiaryBookComponent } from 'src/app/common/payment/beneficiary-book/beneficiary-book.component'\nimport { PaymentConfirmationComponent } from 'src/app/common/payment/payment-confirmation/payment-confirmation.component'\nimport { FeeService } from 'src/app/common/services/accounting/fee.service'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { TransactionViewComponent } from 'src/app/common/transaction/transaction-view/transaction-view.component'\nimport { CurrenciesQuery } from 'src/app/store/currencies/currencies.query'\nimport { WalletsQuery } from 'src/app/store/wallets/wallets.query'\nimport { WalletsService } from 'src/app/store/wallets/wallets.service'\nimport { environment } from 'src/environments/environment'\n\n@Component({\n    selector: 'withdraw-form',\n    templateUrl: 'withdraw-form.component.html',\n})\nexport class WithdrawFormComponent implements OnInit, OnDestroy, OnChanges {\n    @Input()\n    public transaction: Partial<Transaction>\n    public files: File[] = []\n    public minAmount: string | number | undefined\n    public isUploadCollapsed = true\n    public saveAsTemplate = true\n    public inclusiveFee = true\n\n    public faQuestionCircle = faQuestionCircle\n    public appName = environment.appName\n\n    public purposeItems = [\n        'Employment Income',\n        'Business Expenses',\n        'Tax Payment',\n        'License/Subscription Fee',\n        'Bill/Utilities Payment',\n        'Insurance Payment',\n        'Commission/Bonus Payment',\n        'Family Maintenance (Education, Medical, Travel)',\n        'Investment/Securities',\n        'Transport',\n        'Property Payment',\n    ]\n\n    @ViewChild('withdrawForm')\n    public withdrawForm: NgForm\n\n    @ViewChild('beneficiaryDetailsForm')\n    public beneficiaryDetailsForm: BeneficiaryDetailsFormComponent\n\n    private fee: IFee | null = null\n\n    private subscriptions = new Subscription()\n    private fetchEvent = new Subject<void>()\n\n    private beneficiary: Beneficiary | undefined\n    constructor(\n        public session: SessionService,\n        private ngbModal: NgbModal,\n        private http: HttpClient,\n        private feeService: FeeService,\n        private walletsService: WalletsService,\n        private walletsQuery: WalletsQuery,\n        private router: Router,\n        private currenciesQuery: CurrenciesQuery,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            combineLatest([this.fetchEvent, this.session.userStream])\n                .pipe(\n                    tap(([_, user]) => {\n                        this.transaction.baseWallet = {\n                            user: pick(user, ['id', 'accountNumber', 'name']),\n                        } as Wallet\n                    }),\n                    switchMap(([_, user]) =>\n                        this.feeService.fetch({\n                            type: 'withdrawal',\n                            method: this.transaction.method as TransactionMethod,\n                            user: { id: user.id } as IUser,\n                            currency: { code: this.transaction.currency?.code } as ICurrency,\n                        })\n                    )\n                )\n                .subscribe(fee => {\n                    this.fee = fee\n                    Object.assign(this.transaction, this.feeService.determineFee(this.transaction, fee as any))\n                    if (fee && fee.minValue) {\n                        this.minAmount = Currency.convert(fee.minValue, fee.currency, this.transaction.currency!)\n                    }\n                })\n        )\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.transaction) {\n            this.reset()\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (this.beneficiaryDetailsForm) {\n            this.beneficiaryDetailsForm.submit()\n            if (!(this.beneficiaryDetailsForm.isValid() || this.beneficiaryDetailsForm.disabled)) {\n                return\n            }\n        }\n        if (this.withdrawForm && this.withdrawForm.invalid) {\n            return\n        }\n        if (this.session.user.accessErrors.length > 0) {\n            openNoAccessModal(this.ngbModal, this.session.user.accessErrors[0])\n            return\n        }\n\n        const modal = this.ngbModal.open(PaymentConfirmationComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        const component = modal.componentInstance as PaymentConfirmationComponent\n        component.transaction = this.transaction as Transaction\n        component.onConfirm.subscribe(() => {\n            this.createTransaction()\n                .pipe(\n                    catchError(err => {\n                        component.isSubmitted = false\n                        component.reset()\n                        return throwError(err)\n                    })\n                )\n                .subscribe(transaction => {\n                    modal.close()\n                    const transactionView = this.ngbModal.open(TransactionViewComponent, {\n                        windowClass: 'modal-primary',\n                        backdrop: 'static',\n                    })\n                    const transactionViewModal = transactionView.componentInstance as TransactionViewComponent\n                    transactionViewModal.transaction = transaction\n                    this.reset()\n                    this.walletsService.fetch()\n                    this.fetchEvent.next()\n                })\n        })\n    }\n\n    public createTransaction(): Observable<Transaction> {\n        if (this.saveAsTemplate && this.transaction.beneficiary && !this.transaction.beneficiary.id) {\n            const wallet = this.transaction.baseWallet\n            if (wallet) {\n                this.transaction.beneficiary.user = wallet.user\n            }\n        }\n        const body = {\n            ...this.transaction,\n        }\n        if (!this.inclusiveFee) {\n            body.amount = undefined\n            body.settledAmount = this.transaction.amount\n        }\n        return this.http.post<Transaction>('/transactions', body).pipe(\n            mergeMap(transaction =>\n                this.files.length > 0\n                    ? forkJoin(\n                          this.files.map(file =>\n                              this.http.post<File>(`/transactions/${transaction.id}/files`, file, {\n                                  headers: new HttpHeaders({\n                                      'X-File-Name': encodeURIComponent(file.name),\n                                      'Content-Type': file.type,\n                                  }),\n                              })\n                          )\n                      ).pipe(map(() => transaction))\n                    : of(transaction)\n            )\n        )\n    }\n\n    public openBeneficiaryBook(): void {\n        const modal = this.ngbModal.open(BeneficiaryBookComponent, {\n            windowClass: 'modal-primary',\n            size: 'lg',\n        })\n        ;(modal.componentInstance as BeneficiaryBookComponent).onSelect.subscribe(async (beneficiary: Beneficiary) => {\n            if (beneficiary.method === this.transaction.method) {\n                this.transaction.beneficiary = beneficiary\n                this.saveAsTemplate = false\n            } else {\n                this.beneficiary = beneficiary\n                this.router.navigate(['/withdraw'], {\n                    queryParams: { method: beneficiary.method !== 'swift' ? beneficiary.method : null },\n                })\n            }\n            modal.close()\n        })\n    }\n\n    public useMaxAmount(): void {\n        if (this.transaction.currency) {\n            this.walletsQuery.balances$.subscribe(balances => {\n                const found = balances.find(balance => balance.currency.code === this.transaction.currency!.code)\n                if (found) {\n                    this.transaction.amount = found.availableBalance\n\n                    if (!this.inclusiveFee && this.fee) {\n                        const maxFee = new BigNumber(\n                            Currency.convert(this.fee.max!, this.fee.currency, this.transaction.currency!)\n                        )\n                        const relativeFeeAmount = new BigNumber(this.transaction.amount).times(\n                            this.transaction.relativeFee ?? 0\n                        )\n                        let fee = new BigNumber(this.transaction.fixedFee || 0).plus(relativeFeeAmount)\n                        if (fee.isGreaterThan(maxFee)) {\n                            fee = maxFee\n                        }\n                        this.transaction.amount = new BigNumber(this.transaction.amount)\n                            .minus(fee)\n                            .toFixed(this.transaction.currency!.decimalPlaces, 1)\n                    }\n\n                    if (new BigNumber(this.transaction.amount).isLessThan(0)) {\n                        this.transaction.amount = '0'\n                    }\n\n                    this.transaction.amount = parseFloat(this.transaction.amount).toString()\n                }\n            })\n        }\n    }\n\n    public toggleInclusiveFee(): void {\n        this.inclusiveFee = !this.inclusiveFee\n        this.transaction.settledAmount = !this.inclusiveFee ? this.transaction.amount : undefined\n    }\n\n    public onCurrencyChange(): void {\n        this.fetchEvent.next()\n    }\n\n    public onAmountChange(): void {\n        Object.assign(this.transaction, this.feeService.determineFee(this.transaction, this.fee as any))\n    }\n\n    public reset(): void {\n        this.saveAsTemplate = true\n        this.inclusiveFee = true\n        this.minAmount = undefined\n        this.files = []\n        if (this.withdrawForm) {\n            this.withdrawForm.resetForm({\n                saveAsTemplate: true,\n                inclusiveFee: true,\n                amount: undefined,\n                purpose: undefined,\n                comment: undefined,\n                'currency-select': this.transaction.currency,\n            })\n        }\n        if (this.beneficiaryDetailsForm) {\n            this.beneficiaryDetailsForm.reset()\n        }\n        if (!this.beneficiary) {\n            this.transaction.beneficiary = pick(this.transaction.beneficiary, ['currency', 'method']) as any\n        } else {\n            this.transaction.beneficiary = this.beneficiary\n            if (this.beneficiary.method === 'local') {\n                this.transaction.currency = this.currenciesQuery.getEntity(this.beneficiary.currency.code)\n            }\n            this.beneficiary = undefined\n            this.saveAsTemplate = false\n        }\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { PaymentFormModule } from '../common/payment/payment.module'\nimport { TransactionModule } from '../common/transaction/transaction.module'\nimport { WithdrawFormComponent } from './withdraw-form/withdraw-form.component'\nimport { WithdrawRoutingModule } from './withdraw-routing.module'\nimport { WithdrawComponent } from './withdraw.component'\n\n@NgModule({\n    declarations: [WithdrawComponent, WithdrawFormComponent],\n    imports: [CommonModule, WithdrawRoutingModule, PaymentFormModule, TransactionModule],\n})\nexport class WithdrawModule {}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"btn-view-templates\\\">\\n        <a href (click)=\\\"$event.preventDefault(); openBeneficiaryBook()\\\" class=\\\"font-lg\\\">{{ 'withdraw-form.view-templates' | translate }} ›</a>\\n    </div>\\n    <form\\n        class=\\\"form-validation\\\"\\n        #withdrawForm=\\\"ngForm\\\"\\n        (ngSubmit)=\\\"submit()\\\"\\n        [ngClass]=\\\"{ 'ng-submitted': withdrawForm.submitted }\\\"\\n        autocomplete=\\\"false\\\"\\n        novalidate\\n    >\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"currency\\\">{{ 'common.currency' | translate }}</label>\\n            <currency-select\\n                [(currency)]=\\\"transaction.currency\\\"\\n                [user]=\\\"user\\\"\\n                [isLarge]=\\\"true\\\"\\n                [currencyTypes]=\\\"transaction?.method === 'crypto' ? ['crypto'] : ['fiat']\\\"\\n                [required]=\\\"true\\\"\\n                [useFullName]=\\\"true\\\"\\n                (currencyChange)=\\\"onCurrencyChange()\\\"\\n                #currencySelect\\n                [hideZeroBalance]=\\\"appName !== 'sgpmx'\\\"\\n            >\\n            </currency-select>\\n        </div>\\n        <div *ngIf=\\\"currencySelect.currencyInput.invalid && (withdrawForm.submitted || currencySelect.currencyInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currencySelect.currencyInput?.errors?.required\\\">\\n                {{ 'common.this-is-required' | translate }}\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"d-flex justify-content-between\\\">\\n                <div class=\\\"d-flex\\\">\\n                    <label class=\\\"font-md\\\"> {{ 'common.amount' | translate }} </label>\\n                </div>\\n                <a href (click)=\\\"useMaxAmount(); $event.preventDefault()\\\">{{ 'common.use-max' | translate }}</a>\\n            </div>\\n            <div class=\\\"input-group\\\">\\n                <input\\n                    type=\\\"number\\\"\\n                    class=\\\"form-control form-control-lg\\\"\\n                    id=\\\"amount\\\"\\n                    name=\\\"amount\\\"\\n                    placeholder=\\\"0.00\\\"\\n                    [(ngModel)]=\\\"transaction.amount\\\"\\n                    [min]=\\\"minAmount\\\"\\n                    (ngModelChange)=\\\"onAmountChange()\\\"\\n                    #amount=\\\"ngModel\\\"\\n                    required\\n                />\\n                <div class=\\\"input-group-append\\\">\\n                    <span class=\\\"input-group-text font-lg\\\">{{ transaction.currency?.code }}</span>\\n                </div>\\n            </div>\\n            <div *ngIf=\\\"amount.invalid && (withdrawForm.submitted || amount.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.min\\\">\\n                    {{ 'common.minimum-amount-is' | translate }}\\n                    {{ minAmount + '' || '0' | amount: transaction.currency?.decimalPlaces }}\\n                    {{ transaction.currency?.code }}.\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\" *ngIf=\\\"appName !== 'sgpmx'\\\">\\n            <label class=\\\"custom-control custom-checkbox\\\">\\n                <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\" name=\\\"inclusiveFee\\\" (click)=\\\"toggleInclusiveFee()\\\" [ngModel]=\\\"inclusiveFee\\\" />\\n                <span class=\\\"custom-control-label font-md\\\">\\n                    {{ 'common.include-service-fee' | translate }}\\n                    <fa-icon\\n                        class=\\\"text-primary\\\"\\n                        [icon]=\\\"faQuestionCircle\\\"\\n                        [popoverTitle]=\\\"inclusiveFeeTitle\\\"\\n                        [ngbPopover]=\\\"inclusiveFeeContent\\\"\\n                        triggers=\\\"hover\\\"\\n                        container=\\\"body\\\"\\n                    >\\n                    </fa-icon>\\n                </span>\\n            </label>\\n        </div>\\n        <beneficiary-details-form\\n            [beneficiary]=\\\"transaction.beneficiary\\\"\\n            [currency]=\\\"transaction.currency\\\"\\n            [isLarge]=\\\"true\\\"\\n            [disabled]=\\\"!!transaction.beneficiary?.id\\\"\\n            #beneficiaryDetailsForm\\n        >\\n        </beneficiary-details-form>\\n        <div class=\\\"form-group mb-4\\\">\\n            <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n                <label class=\\\"custom-control custom-checkbox\\\">\\n                    <input\\n                        type=\\\"checkbox\\\"\\n                        class=\\\"custom-control-input\\\"\\n                        name=\\\"saveAsTemplate\\\"\\n                        [(ngModel)]=\\\"saveAsTemplate\\\"\\n                        [disabled]=\\\"!!transaction.beneficiary?.id\\\"\\n                    />\\n                    <span class=\\\"custom-control-label font-md\\\" [ngClass]=\\\"saveAsTemplate ? 'text-body' : 'text-muted'\\\">{{\\n                        'withdraw-form.save-as-template' | translate\\n                    }}</span>\\n                </label>\\n                <a href (click)=\\\"$event.preventDefault(); reset()\\\" *ngIf=\\\"transaction.beneficiary?.id\\\">{{ 'common.clear' | translate }}</a>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\" *ngIf=\\\"appName !== 'sgpmx'\\\">\\n            <label class=\\\"font-md\\\" for=\\\"purpose\\\">{{ 'common.purpose' | translate }}</label>\\n            <ng-select\\n                class=\\\"ng-select-lg\\\"\\n                name=\\\"purpose\\\"\\n                [(ngModel)]=\\\"transaction.purpose\\\"\\n                [items]=\\\"purposeItems\\\"\\n                [clearable]=\\\"false\\\"\\n                [required]=\\\"true\\\"\\n                [addTag]=\\\"true\\\"\\n                addTagText=\\\"Use\\\"\\n                dropdownPosition=\\\"bottom\\\"\\n                #purposeInput=\\\"ngModel\\\"\\n            >\\n                <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                    {{ item }}\\n                </ng-template>\\n                <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                    {{ item }}\\n                </ng-template>\\n            </ng-select>\\n            <div *ngIf=\\\"purposeInput.invalid && (withdrawForm.submitted || purposeInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"purposeInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"comment\\\"\\n                >{{ 'common.comment' | translate }} <small class=\\\"text-muted\\\">({{ 'common.optional' | translate }})</small></label\\n            >\\n            <textarea\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"comment\\\"\\n                name=\\\"comment\\\"\\n                [(ngModel)]=\\\"transaction.comment\\\"\\n                rows=\\\"3\\\"\\n                emptyToNull\\n            ></textarea>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <a href class=\\\"d-block mb-2\\\" (click)=\\\"isUploadCollapsed = !isUploadCollapsed; $event.preventDefault()\\\">\\n                {{ isUploadCollapsed ? '+ ' + ('common.attach' | translate) : '- ' + ('common.remove' | translate) }}\\n                {{ 'common.file' | translate | lowercase }}\\n            </a>\\n            <dropzone [files]=\\\"files\\\" [ngbCollapse]=\\\"isUploadCollapsed\\\"></dropzone>\\n        </div>\\n        <access-errors [errors]=\\\"['VerificationRequiredError']\\\"></access-errors>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-lg btn-block btn-primary mb-2\\\" [disabled]=\\\"user.accessErrors.includes('VerificationRequiredError')\\\">\\n            {{ 'common.submit' | translate }}\\n        </button>\\n        <div class=\\\"small text-muted\\\">\\n            {{ 'common.by-clicking-the-submit-button' | translate }} <br />\\n            <a [routerLink]=\\\"['/terms']\\\" class=\\\"text-muted\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\"\\n                >{{ 'common.terms' | translate }} &amp; {{ 'common.conditions' | translate }}</a\\n            >\\n            {{ 'common.and' | translate }}\\n            <a [routerLink]=\\\"['/privacy']\\\" class=\\\"text-muted\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">{{ 'common.data-privacy-notice' | translate }}</a\\n            >.\\n        </div>\\n    </form>\\n</ng-container>\\n<ng-template #inclusiveFeeTitle> {{ 'common.include-service-fee' | translate }} </ng-template>\\n<ng-template #inclusiveFeeContent>\\n    <p>\\n        {{ 'common.if' | translate }} <b>{{ 'common.checked' | translate }}</b\\n        >, {{ 'common.checked-desc' | translate }}\\n    </p>\\n    <p>\\n        {{ 'common.if' | translate }} <b>{{ 'common.unchecked' | translate }}</b\\n        >, {{ 'common.unchecked-desc' | translate }}\\n    </p>\\n</ng-template>\\n\";","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport BigNumber from 'bignumber.js'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { FeeType, ICurrency, IFee, IUser, RPCResult, Transaction, TransactionMethod } from '../../api-interfaces'\nimport { Currency } from '../../models/accounting/currency.model'\nimport { Fee } from '../../models/accounting/fee.model'\nimport { calculateFee } from '../../transactions.mixins'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FeeService {\n    constructor(private http: HttpClient) {}\n\n    public fetch(fee: {\n        type: FeeType\n        method: TransactionMethod\n        currency: ICurrency\n        amount?: string\n        user?: IUser | null\n    }): Observable<Fee | null> {\n        return this.http\n            .post<RPCResult<IFee | null>>(\n                '/fees',\n                {\n                    id: Math.round(Math.random() * 10000),\n                    jsonrpc: '2.0',\n                    method: 'findByPrimaryAttributes',\n                    params: {\n                        type: fee.type,\n                        method: fee.method,\n                        amount: fee.amount ? fee.amount : '1',\n                        currency: fee.currency,\n                        user: fee.user,\n                    },\n                },\n                {\n                    headers: new HttpHeaders({\n                        'Content-Type': 'application/json-rpc',\n                    }),\n                }\n            )\n            .pipe(map(response => (response.result ? new Fee(response.result) : null)))\n    }\n\n    public determineFee(currentTransaction: Partial<Transaction>, fee: Partial<Fee> | null): Partial<Transaction> {\n        const transaction = currentTransaction\n        const fixedFee =\n            fee && fee.fixed && transaction.currency\n                ? Currency.convert(fee.fixed, fee.currency!, transaction.currency)\n                : '0'\n        const relativeFee = fee && fee.relative ? fee.relative : '0'\n\n        transaction.fixedFee = fixedFee || undefined\n        transaction.relativeFee = relativeFee || undefined\n\n        if (fee && fee.min) {\n            const minFee = Currency.convert(fee.min, fee.currency!, transaction.currency!)\n            if (new BigNumber(calculateFee(transaction as Transaction)).isLessThan(minFee)) {\n                transaction.fixedFee = minFee\n                transaction.relativeFee = '0'\n            }\n        }\n        if (fee && fee.max) {\n            const maxFee = Currency.convert(fee.max, fee.currency!, transaction.currency!)\n            if (new BigNumber(calculateFee(transaction as Transaction)).isGreaterThan(maxFee)) {\n                transaction.fixedFee = maxFee\n                transaction.relativeFee = '0'\n            }\n        }\n        return transaction\n    }\n}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"container pt-page e2e-withdraw\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col\\\">\\n                <div class=\\\"payment-methods\\\">\\n                    <a\\n                        *ngIf=\\\"user.hasPermission('payment-swift')\\\"\\n                        class=\\\"payment-methods-item\\\"\\n                        [routerLink]=\\\"['/withdraw']\\\"\\n                        [queryParams]=\\\"{ method: null }\\\"\\n                        routerLinkActive=\\\"active\\\"\\n                        [routerLinkActiveOptions]=\\\"{ exact: true }\\\"\\n                    >\\n                        <figure>\\n                            <img class=\\\"img-fluid\\\" draggable=\\\"false\\\" src=\\\"/img/payment-methods/swift.svg\\\" />\\n                        </figure>\\n                        <span>{{ 'common.intl-wire-transfer' | translate }}</span>\\n                    </a>\\n                    <a\\n                        *ngIf=\\\"user.hasPermission('payment-local')\\\"\\n                        class=\\\"payment-methods-item\\\"\\n                        [routerLink]=\\\"['/withdraw']\\\"\\n                        [queryParams]=\\\"{ method: 'local' }\\\"\\n                        routerLinkActive=\\\"active\\\"\\n                    >\\n                        <figure>\\n                            <img class=\\\"img-fluid\\\" draggable=\\\"false\\\" src=\\\"/img/payment-methods/local.svg\\\" />\\n                        </figure>\\n                        <span>{{ 'withdraw.local-wire-transfer' | translate }}</span>\\n                    </a>\\n                    <a\\n                        *ngIf=\\\"user.hasPermission('payment-crypto')\\\"\\n                        class=\\\"payment-methods-item\\\"\\n                        [routerLink]=\\\"['/withdraw']\\\"\\n                        [queryParams]=\\\"{ method: 'crypto' }\\\"\\n                        routerLinkActive=\\\"active\\\"\\n                    >\\n                        <figure>\\n                            <img class=\\\"img-fluid\\\" draggable=\\\"false\\\" src=\\\"/img/payment-methods/crypto.svg\\\" />\\n                        </figure>\\n                        <span>{{ 'common.crypto-currencies' | translate }}</span>\\n                    </a>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row mb-3\\\">\\n            <div class=\\\"col-lg-12\\\">\\n                <section class=\\\"card mb-3\\\">\\n                    <div class=\\\"card-header\\\">\\n                        <h5 class=\\\"mb-0\\\">{{ 'common.withdraw' | translate }}</h5>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <withdraw-form [(transaction)]=\\\"transaction\\\"></withdraw-form>\\n                    </div>\\n                </section>\\n                <p class=\\\"text-center text-muted\\\">\\n                    <a [routerLink]=\\\"['/deposit']\\\">{{ 'common.go-to-deposit' | translate }} &#x203A;</a>\\n                </p>\\n            </div>\\n            <div class=\\\"col-lg-12 d-none d-lg-block\\\">\\n                <div class=\\\"transation-slip-container max-width-sm\\\">\\n                    <transaction-slip [transaction]=\\\"transaction\\\"></transaction-slip>\\n                    <p class=\\\"text-center text-muted pb-4\\\">\\n                        {{ 'common.learn-more-about-our-fees' | translate }} <a [routerLink]=\\\"['/fees']\\\">{{ 'common.here' | translate }}</a>\\n                    </p>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n\";"],"sourceRoot":"webpack:///"}