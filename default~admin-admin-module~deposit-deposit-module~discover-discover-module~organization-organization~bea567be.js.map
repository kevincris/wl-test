{"version":3,"sources":["./src/app/common/payment/payment-confirmation/payment-confirmation.component.html","./src/app/common/payment/payment-confirmation/payment-confirmation.component.ts"],"names":[],"mappings":"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","file":"default~admin-admin-module~deposit-deposit-module~discover-discover-module~organization-organization~bea567be.js","sourcesContent":["export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">{{ 'common.confirm' | translate }} {{ transaction.type }}</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"modal.dismiss()\\\">&times;</button>\\n</div>\\n<div class=\\\"modal-body e2e-confirm-payment\\\">\\n    <ng-container *ngIf=\\\"!isSubmitted; else loader\\\">\\n        <div class=\\\"mb-2 text-center\\\">\\n            <span class=\\\"label label-success mb-1\\\">{{ buildActionLabel(transaction) }}</span>\\n            <h2 class=\\\"text-primary mb-0\\\">\\n                {{ calculateDeductableAmount(transaction) || '0.0' | amount: transaction.currency?.decimalPlaces }} {{ transaction.currency?.code }}\\n            </h2>\\n        </div>\\n        <transaction-flow [transaction]=\\\"transaction\\\"></transaction-flow>\\n        <table class=\\\"table table-borderless\\\">\\n            <tbody>\\n                <ng-container *ngIf=\\\"!isSgpmxMetalTransfer(); else metalTransferFees\\\">\\n                    <tr>\\n                        <th class=\\\"py-2 text-right font-weight-bold text-muted\\\">{{ 'common.service-fee' | translate }}</th>\\n                        <td class=\\\"py-2 text-right text-muted\\\">\\n                            <div>{{ calculateFee(transaction) | amount: transaction.currency?.decimalPlaces }} {{ transaction.currency?.code }}</div>\\n                            <small\\n                                >({{ transaction.fixedFee | amount }} {{ transaction.currency?.code }} +\\n                                {{ toPercent(transaction.relativeFee) | number }}%)</small\\n                            >\\n                        </td>\\n                    </tr>\\n                </ng-container>\\n                <ng-template #metalTransferFees>\\n                    <tr>\\n                        <th class=\\\"py-2 text-right font-weight-bold text-muted\\\">{{ 'common.service-fee' | translate }}</th>\\n                        <td class=\\\"py-2 text-right text-muted\\\">{{ calculateFeeInUsd() | async | amount }} USD</td>\\n                    </tr>\\n                </ng-template>\\n                <tr>\\n                    <th class=\\\"py-2 text-right font-weight-bold\\\">\\n                        <ng-container *ngIf=\\\"!transaction.card; else topupReceiver\\\">\\n                            {{ 'common.recipient' | translate }} {{ (transaction.id ? 'common.got' : 'common.gets') | translate }}\\n                        </ng-container>\\n                        <ng-template #topupReceiver> {{ 'common.card-loaded-with' | translate }} </ng-template>\\n                    </th>\\n                    <td class=\\\"py-2 text-right text-primary\\\">\\n                        {{ calculateCreditableAmount(transaction) | amount: transaction.currency?.decimalPlaces }} {{ transaction.currency?.code }}\\n                    </td>\\n                </tr>\\n            </tbody>\\n        </table>\\n        <form class=\\\"form-validation\\\" #passwordForm=\\\"ngForm\\\" (ngSubmit)=\\\"submit()\\\" novalidate>\\n            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"alert\\\">\\n                {{ alert }}\\n            </div>\\n            <div class=\\\"form-group\\\" *ngIf=\\\"!showTwoFactorForm\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">\\n                            <fa-icon [icon]=\\\"faLockAlt\\\"></fa-icon>\\n                        </span>\\n                    </span>\\n                    <input\\n                        type=\\\"password\\\"\\n                        class=\\\"form-control\\\"\\n                        name=\\\"password\\\"\\n                        [placeholder]=\\\"'common.enter-your-password' | translate\\\"\\n                        [(ngModel)]=\\\"password\\\"\\n                        [focus]=\\\"true\\\"\\n                        required\\n                    />\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\" *ngIf=\\\"showTwoFactorForm\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">\\n                            <fa-icon [icon]=\\\"faMobile\\\"></fa-icon>\\n                        </span>\\n                    </span>\\n                    <input\\n                        type=\\\"text\\\"\\n                        class=\\\"form-control\\\"\\n                        name=\\\"twoFactorCode\\\"\\n                        [placeholder]=\\\"'common.enter-2fa-code' | translate\\\"\\n                        number\\n                        [(ngModel)]=\\\"twoFactorCode\\\"\\n                        [focus]=\\\"true\\\"\\n                        required\\n                    />\\n                </div>\\n            </div>\\n            <button type=\\\"submit\\\" class=\\\"btn btn-lg btn-block btn-primary\\\" [disabled]=\\\"!passwordForm.valid || isLoading\\\">\\n                {{ 'common.confirm' | translate }}\\n            </button>\\n        </form>\\n    </ng-container>\\n    <ng-template #loader>\\n        <div class=\\\"circle-loader\\\" [ngClass]=\\\"{ 'load-complete': isCompleted }\\\">\\n            <div class=\\\"checkmark draw\\\"></div>\\n        </div>\\n        <h4 class=\\\"text-center text-primary\\\">\\n            <ng-container *ngIf=\\\"!isCompleted\\\">\\n                <ng-container [ngSwitch]=\\\"transaction.type\\\">\\n                    <ng-container *ngSwitchCase=\\\"'deposit'\\\">{{ 'common.creating-deposit-request' | translate }}</ng-container>\\n                    <ng-container *ngSwitchDefault>\\n                        <ng-container [ngSwitch]=\\\"transaction.method\\\">\\n                            <ng-container *ngSwitchCase=\\\"'card'\\\">{{ 'common.topping-up-card' | translate }}</ng-container>\\n                            <ng-container *ngSwitchDefault>{{ 'common.sending-payment' | translate }}</ng-container>\\n                        </ng-container>\\n                    </ng-container>\\n                </ng-container>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isCompleted\\\">\\n                <ng-container [ngSwitch]=\\\"transaction.type\\\">\\n                    <ng-container *ngSwitchCase=\\\"'deposit'\\\">{{ 'common.your-deposit-request-was-accepted' | translate }}</ng-container>\\n                    <ng-container *ngSwitchCase=\\\"'transfer'\\\">{{ 'common.your-payment-was-successful' | translate }}</ng-container>\\n                    <ng-container *ngSwitchDefault>{{ 'common.your-payment-has-been-accepted' | translate }}</ng-container>\\n                </ng-container>\\n            </ng-container>\\n        </h4>\\n        <button\\n            type=\\\"button\\\"\\n            class=\\\"btn btn-lg btn-block btn-primary-air\\\"\\n            (click)=\\\"onViewTransactions.emit()\\\"\\n            [disabled]=\\\"isSubmitted && !isCompleted\\\"\\n        >\\n            {{ (showInvoice ? 'common.view-proforma-invoice' : 'common.view-transaction') | translate }}\\n        </button>\\n    </ng-template>\\n</div>\\n\";","import { Component, EventEmitter, Input, Output } from '@angular/core'\nimport { faLockAlt, faMobile } from '@fortawesome/pro-light-svg-icons'\nimport { faEllipsisV } from '@fortawesome/pro-regular-svg-icons'\nimport { faShieldAlt } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport { Observable, throwError } from 'rxjs'\nimport { catchError } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { Transaction } from '../../api-interfaces'\nimport { ConfirmPasswordModalComponent } from '../../security-check/confirm-password.modal'\nimport { SessionService, TokenScope } from '../../services/session.service'\nimport { SgpmxService } from '../../services/sgpmx.service'\nimport { TokenService } from '../../services/token.service'\nimport { calculateCreditableAmount, calculateDeductableAmount, calculateFee } from '../../transactions.mixins'\n\n@Component({\n    selector: 'payment-confirmation',\n    templateUrl: 'payment-confirmation.component.html',\n})\nexport class PaymentConfirmationComponent extends ConfirmPasswordModalComponent {\n    public scope = 'banking' as TokenScope\n    @Input()\n    public transaction: Transaction\n    @Output()\n    public readonly onConfirm = new EventEmitter<void | string>()\n    @Output()\n    public readonly onViewTransactions = new EventEmitter<void>()\n\n    public isSubmitted = false\n    public isCompleted = false\n    public showInvoice = false\n\n    public calculateFee = calculateFee\n    public calculateCreditableAmount = calculateCreditableAmount\n    public calculateDeductableAmount = calculateDeductableAmount\n    public faMobile = faMobile\n    public faLockAlt = faLockAlt\n    public faEllipsisV = faEllipsisV\n    public faShieldAlt = faShieldAlt\n    public appName = environment.appName\n\n    constructor(\n        modal: NgbActiveModal,\n        tokenService: TokenService,\n        session: SessionService,\n        private sgpmxService: SgpmxService,\n        public translate: TranslateService\n    ) {\n        super(modal, tokenService, session)\n    }\n\n    public buildActionLabel(transaction: Transaction): string {\n        if (transaction.type === 'deposit') {\n            return 'Requesting'\n        }\n        if (transaction.type === 'investment') {\n            return 'Investing'\n        }\n        return this.translate.instant('common.sending')\n    }\n\n    public toPercent(value: string | null): string {\n        return new BigNumber(value || 0).times(100).toString()\n    }\n\n    public submit(): void {\n        this.isSubmitted = true\n        this.grantTokenScope()\n            .pipe(\n                catchError(error => {\n                    this.isSubmitted = false\n                    return throwError(error)\n                })\n            )\n            .subscribe(() => {\n                this.onConfirm.emit()\n            })\n    }\n\n    public isSgpmxMetalTransfer(): boolean {\n        return (\n            this.appName === 'sgpmx' &&\n            this.transaction.type === 'transfer' &&\n            ['AU', 'AG'].includes(this.transaction.currency.code)\n        )\n    }\n\n    public calculateFeeInUsd(): Observable<string> {\n        return this.sgpmxService.calculateFeeInUsd(this.transaction)\n    }\n}\n"],"sourceRoot":"webpack:///"}