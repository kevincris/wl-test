{"version":3,"sources":["./src/app/transfer/sgpmx-transfer-form.component/sgpmx-transfer-form.component.html","./src/app/transfer/transfer.component.ts","./src/app/common/models/accounting/fee.model.ts","./src/app/transfer/transfer.component.html","./src/app/transfer/sgpmx-transfer-form.component/sgpmx-transfer-form.component.ts","./src/app/transfer/transfer-form.component.ts/transfer-form.component.ts","./src/app/transfer/transfer-routing.module.ts","./src/app/transfer/transfer-form.component.ts/transfer-form.component.html","./src/app/store/fees/fees.service.ts","./src/app/common/services/accounting/fee.service.ts","./src/app/transfer/transfer.module.ts"],"names":[],"mappings":"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","file":"default~organization-organization-module~transfer-transfer-module.js","sourcesContent":["export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"btn-view-templates\\\">\\n        <a href (click)=\\\"$event.preventDefault(); openContactBook()\\\" class=\\\"font-lg\\\">{{ 'common.view-contacts' | translate }} ›</a>\\n    </div>\\n    <form\\n        class=\\\"form-validation\\\"\\n        #transferForm=\\\"ngForm\\\"\\n        [ngClass]=\\\"{ 'ng-submitted': transferForm.submitted }\\\"\\n        (ngSubmit)=\\\"submit()\\\"\\n        autocomplete=\\\"false\\\"\\n        novalidate\\n    >\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"d-flex justify-content-between\\\">\\n                <label class=\\\"font-md\\\" for=\\\"recipient\\\"\\n                    >{{ 'common.account-number' | translate }} / {{ 'common.email' | translate }}\\n                    <a\\n                        href\\n                        (click)=\\\"$event.preventDefault()\\\"\\n                        [ngbPopover]=\\\"recipientContent\\\"\\n                        [popoverTitle]=\\\"recipientTitle\\\"\\n                        triggers=\\\"mouseenter:mouseleave\\\"\\n                        ><fa-icon [icon]=\\\"faQuestionCircle\\\"></fa-icon></a\\n                ></label>\\n            </div>\\n            <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"recipient\\\"\\n                name=\\\"recipient\\\"\\n                [(ngModel)]=\\\"recipient\\\"\\n                (ngModelChange)=\\\"onRecipientChange()\\\"\\n                #recipientInput=\\\"ngModel\\\"\\n                recipientValidator\\n                required\\n                emptyToNull\\n            />\\n            <div *ngIf=\\\"recipientInput.invalid && (transferForm.submitted || recipientInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"recipientInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"recipientInput?.errors?.invalidRecipient\\\">Invalid recipient.</div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-24\\\">\\n                <div class=\\\"d-flex justify-content-between\\\">\\n                    <label class=\\\"font-md\\\" for=\\\"currency\\\">Precious Metal Type</label>\\n                </div>\\n                <currency-select\\n                    [(currency)]=\\\"transaction.currency\\\"\\n                    [user]=\\\"user\\\"\\n                    [isLarge]=\\\"true\\\"\\n                    [currencyTypes]=\\\"['metal']\\\"\\n                    (currencyChange)=\\\"onCurrencyChange()\\\"\\n                    [required]=\\\"true\\\"\\n                    [transferable]=\\\"true\\\"\\n                    #currencySelect\\n                >\\n                </currency-select>\\n                <div\\n                    *ngIf=\\\"currencySelect.currencyInput.invalid && (transferForm.submitted || currencySelect.currencyInput.dirty)\\\"\\n                    class=\\\"error-messages\\\"\\n                >\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currencySelect.currencyInput?.errors?.required\\\">This is required.</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-24\\\">\\n                <div class=\\\"d-flex justify-content-between\\\">\\n                    <div class=\\\"d-flex\\\">\\n                        <label class=\\\"font-md\\\">\\n                            {{ isDefineByValue ? 'Value' : 'Troy Ounce' }}\\n                        </label>\\n                    </div>\\n                    <a href (click)=\\\"useMaxAmount(); $event.preventDefault()\\\">{{ 'common.use-max' | translate }}</a>\\n                </div>\\n                <ng-container *ngIf=\\\"!isDefineByValue; else defineByValueInput\\\">\\n                    <div class=\\\"input-group\\\">\\n                        <input\\n                            type=\\\"number\\\"\\n                            class=\\\"form-control form-control-lg\\\"\\n                            id=\\\"amount\\\"\\n                            name=\\\"amount\\\"\\n                            placeholder=\\\"0.00\\\"\\n                            [(ngModel)]=\\\"transaction.amount\\\"\\n                            [min]=\\\"getMinimum()\\\"\\n                            [max]=\\\"getMaximum()\\\"\\n                            #amount=\\\"ngModel\\\"\\n                            required\\n                        />\\n                        <div class=\\\"input-group-append\\\">\\n                            <button\\n                                class=\\\"btn btn-default btn-lg\\\"\\n                                type=\\\"button\\\"\\n                                (click)=\\\"isDefineByValue = true; calculateValueInUsd(); $event.preventDefault()\\\"\\n                                [ngbTooltip]=\\\"'common.define-amount-in-usd' | translate\\\"\\n                            >\\n                                {{ transaction.currency?.code }}\\n                            </button>\\n                        </div>\\n                    </div>\\n                    <div *ngIf=\\\"amount.invalid && (transferForm.submitted || amount.dirty)\\\" class=\\\"error-messages\\\">\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.min\\\">\\n                            Minimum amount is\\n                            {{ getMinimum() + '' || '0' | amount: transaction.currency?.decimalPlaces }}\\n                            {{ transaction.currency?.code }}.\\n                        </div>\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.max\\\">\\n                            Maximum amount is\\n                            {{ getMaximum() + '' || '0' | amount: transaction.currency?.decimalPlaces }}\\n                            {{ transaction.currency?.code }}.\\n                        </div>\\n                    </div>\\n                </ng-container>\\n                <ng-template #defineByValueInput>\\n                    <div class=\\\"input-group\\\">\\n                        <input\\n                            type=\\\"number\\\"\\n                            class=\\\"form-control form-control-lg\\\"\\n                            id=\\\"valueInUsd\\\"\\n                            name=\\\"valueInUsd\\\"\\n                            placeholder=\\\"0.00\\\"\\n                            [(ngModel)]=\\\"valueInUsd\\\"\\n                            (ngModelChange)=\\\"calculateAmount()\\\"\\n                            [min]=\\\"getMinimum()\\\"\\n                            [max]=\\\"getMaximum()\\\"\\n                            #valueInUsdInput=\\\"ngModel\\\"\\n                            required\\n                        />\\n                        <div class=\\\"input-group-append\\\">\\n                            <button\\n                                class=\\\"btn btn-default btn-lg\\\"\\n                                type=\\\"button\\\"\\n                                (click)=\\\"isDefineByValue = false; calculateValueInUsd(); $event.preventDefault()\\\"\\n                                [ngbTooltip]=\\\"'common.define-amount-in-troy-ounce' | translate\\\"\\n                            >\\n                                USD\\n                            </button>\\n                        </div>\\n                    </div>\\n                    <div *ngIf=\\\"valueInUsdInput.invalid && (transferForm.submitted || valueInUsdInput.dirty)\\\" class=\\\"error-messages\\\">\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"valueInUsdInput?.errors?.required\\\">This is required.</div>\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"valueInUsdInput?.errors?.min\\\">\\n                            Minimum amount is\\n                            {{ getMinimum() || '0' | amount: 2 }}\\n                            USD.\\n                        </div>\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"valueInUsdInput?.errors?.max\\\">\\n                            Maximum amount is\\n                            {{ getMaximum() || '0' | amount: 2 }}\\n                            USD\\n                        </div>\\n                    </div>\\n                </ng-template>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"reference\\\">{{ 'common.reference' | translate }} <small class=\\\"text-muted\\\">(optional)</small></label>\\n            <input type=\\\"text\\\" class=\\\"form-control form-control-lg\\\" id=\\\"reference\\\" name=\\\"reference\\\" [(ngModel)]=\\\"transaction.reference\\\" emptyToNull />\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"comment\\\">{{ 'common.comment' | translate }} <small class=\\\"text-muted\\\">(optional)</small></label>\\n            <textarea\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"comment\\\"\\n                name=\\\"comment\\\"\\n                [(ngModel)]=\\\"transaction.comment\\\"\\n                rows=\\\"3\\\"\\n                emptyToNull\\n            ></textarea>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <a href class=\\\"d-block mb-2\\\" (click)=\\\"isUploadCollapsed = !isUploadCollapsed; $event.preventDefault()\\\">\\n                {{ isUploadCollapsed ? '+ Attach' : '- Remove' }} file\\n            </a>\\n            <dropzone [files]=\\\"files\\\" [ngbCollapse]=\\\"isUploadCollapsed\\\"></dropzone>\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-lg btn-block btn-primary mb-2\\\">{{ 'common.submit' | translate }}</button>\\n    </form>\\n    <ng-template #recipientTitle> How does it work? </ng-template>\\n    <ng-template #recipientContent>\\n        <p>You can send Gold/Silver to other {{ displayName }} account holders using their account number or email address.</p>\\n        <p>\\n            Ask your beneficiary for their account number or email address. Account number can be found on the dashboard under\\n            <b>Account information</b>.\\n        </p>\\n    </ng-template>\\n</ng-container>\\n\";","import { Component, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { Observable, of, Subscription } from 'rxjs'\nimport { environment } from 'src/environments/environment'\nimport { FeeType, IFee, Transaction, TransactionMethod } from '../common/api-interfaces'\nimport { SessionService } from '../common/services/session.service'\nimport { FeesQuery } from '../store/fees/fees.query'\nimport { FeesService } from '../store/fees/fees.service'\n\n@Component({\n    selector: 'transfer',\n    templateUrl: 'transfer.component.html',\n})\nexport class TransferComponent implements OnInit, OnDestroy {\n    public appName = environment.appName\n    public transaction: Transaction\n    public fixedRecipient = false\n    private subscriptions = new Subscription()\n\n    constructor(\n        private route: ActivatedRoute,\n        public session: SessionService,\n        private feesQuery: FeesQuery,\n        private feesService: FeesService\n    ) {}\n\n    public ngOnInit(): void {\n        if (this.route.snapshot.queryParamMap.has('method')) {\n            this.resetTransaction(this.route.snapshot.queryParamMap.get('method') as TransactionMethod)\n        }\n        this.route.queryParamMap.subscribe(params => {\n            this.resetTransaction((params.get('method') as TransactionMethod) || 'send')\n        })\n        if (environment.appName === 'sgpmx') {\n            this.feesService.fetch()\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public getFee(type: FeeType): Observable<IFee | null> {\n        if (!this.transaction.currency) {\n            return of(null)\n        }\n        return this.feesQuery.findByPrimaryAttributes({\n            type,\n            method: 'internal',\n            currencyCode: this.transaction.currency.code,\n        })\n    }\n\n    private resetTransaction(method: TransactionMethod | 'request' | 'send'): void {\n        switch (method) {\n            default:\n                this.transaction = {\n                    type: 'transfer',\n                    method: 'internal',\n                } as Transaction\n                break\n        }\n    }\n}\n","import { FeeType, IFee, TransactionMethod } from '../../api-interfaces'\nimport { User } from '../core/user.model'\nimport { Beneficiary } from './beneficiary.model'\nimport { Currency } from './currency.model'\n\nexport const feeTypeMap: { [K in FeeType]: string } = {\n    'account-fee': 'Account Fee',\n    'card-order': 'Card Order Fee',\n    'fx-spread': 'Exchange Rate Spread',\n    deposit: 'Deposit',\n    withdrawal: 'Withdrawal',\n    transfer: 'Transfer',\n    conversion: 'Conversion',\n    investment: 'Investment',\n    trade: 'Trade',\n    redeem: 'Redeem',\n    service: 'Buy & Sell',\n    gst: 'GST',\n    payment: 'Payment',\n}\n\nexport const feeMethodMap: { [K in TransactionMethod]: string } = {\n    internal: 'Internal',\n    card: 'Topup Card',\n    crypto: 'Crypto',\n    local: 'LOCAL',\n    swift: 'SWIFT',\n}\n\nexport class Fee implements IFee {\n    public id: string\n    public type: FeeType\n    public method: TransactionMethod\n    public fixed: string | null\n    public relative: string | null\n    public max: string | null\n    public min: string | null\n    public minValue: string | null\n    public currency: Currency\n    public user: User | null\n    public beneficiary: Beneficiary | null\n    public createdAt: string\n    public updatedAt: string\n\n    public constructor(data?: Partial<IFee>) {\n        if (data) {\n            Object.assign(this, data)\n            if (data.currency) {\n                this.currency = new Currency(data.currency)\n            }\n            if (data.user) {\n                this.user = new User(data.user)\n            }\n            if (data.beneficiary) {\n                this.beneficiary = new Beneficiary(data.beneficiary)\n            }\n        }\n    }\n\n    public isGlobal(): boolean {\n        return this.user === null\n    }\n\n    public isFallback(currency: Currency): boolean {\n        return this.currency.code !== currency.code\n    }\n\n    public isAssociationFee(user: User | null): boolean {\n        return !!this.user && !!user && this.user.id !== user.id\n    }\n\n    public hasFixedFee(): boolean {\n        return !['fx-spread', 'service', 'gst'].includes(this.type)\n    }\n\n    public hasRelativeFee(): boolean {\n        return !['account-fee'].includes(this.type)\n    }\n\n    public hasMaxOrMin(): boolean {\n        return !['account-fee', 'fx-spread'].includes(this.type)\n    }\n\n    public hasMinValue(): boolean {\n        return ['transfer', 'deposit', 'withdrawal'].includes(this.type)\n    }\n}\n\nexport function getFeeType(transactionType: string): FeeType {\n    const feeMap: Record<string, FeeType> = {\n        deposit: 'deposit',\n        withdrawal: 'withdrawal',\n        transfer: 'transfer',\n        conversion: 'conversion',\n        investment: 'investment',\n        trade: 'trade',\n        redeem: 'redeem',\n        payment: 'payment',\n        // Use transfer fee for invoice\n        invoice: 'transfer',\n        'invoice-p2p': 'transfer',\n        'card-order': 'card-order',\n        'account-fee': 'account-fee',\n    }\n    return feeMap[transactionType]\n}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"container pt-page pt-4 e2e-transfer\\\">\\n        <div class=\\\"row mb-3\\\">\\n            <div class=\\\"col-lg-12\\\">\\n                <section class=\\\"card mb-3\\\">\\n                    <div class=\\\"card-header\\\">\\n                        <h5 class=\\\"mb-0\\\">{{ 'common.transfer' | translate }}</h5>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <ng-container *ngIf=\\\"appName !== 'sgpmx'; else sgpmxTransfer\\\">\\n                            <transfer-form [(transaction)]=\\\"transaction\\\"></transfer-form>\\n                        </ng-container>\\n                        <ng-template #sgpmxTransfer>\\n                            <sgpmx-transfer-form [(transaction)]=\\\"transaction\\\"></sgpmx-transfer-form>\\n                        </ng-template>\\n                    </div>\\n                </section>\\n                <div class=\\\"callout callout-danger\\\" *ngIf=\\\"appName === 'sgpmx'\\\">\\n                    <h6>{{ 'common.notice' | translate }}</h6>\\n                    <p>\\n                        <b>Each transfer</b> is subject to a fee of\\n                        <ng-container *ngIf=\\\"getFee('transfer') | async; else noFee; let fee\\\">\\n                            <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                        </ng-container>\\n                        of transferred value of precious metals. The fees will be deducted from your available account balance. (fees are subject to\\n                        <ng-container *ngIf=\\\"getFee('gst') | async; else noFee; let fee\\\">\\n                            <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                        </ng-container>\\n                        GST)\\n                    </p>\\n                    <ng-template #noFee>\\n                        <span class=\\\"text-success\\\">FREE</span>\\n                    </ng-template>\\n                    <ng-template #withFee let-fee=\\\"fee\\\">\\n                        <span>\\n                            <span *ngIf=\\\"fee.relative && fee.fixed\\\"> {{ fee.fixed | amount }} USD + {{ fee.relative | percent: '1.2' }}</span>\\n                            <span *ngIf=\\\"fee.relative && !fee.fixed\\\">{{ fee.relative | percent: '1.2' }}</span>\\n                            <span *ngIf=\\\"!fee.relative && fee.fixed\\\"> {{ fee.fixed | amount }} USD</span>\\n                        </span>\\n                    </ng-template>\\n                </div>\\n            </div>\\n            <div class=\\\"col-lg-12 d-none d-lg-block\\\">\\n                <div class=\\\"transation-slip-container max-width-sm\\\">\\n                    <transaction-slip [transaction]=\\\"transaction\\\"></transaction-slip>\\n                    <p class=\\\"text-center text-muted pb-4\\\">\\n                        {{ 'common.learn-more-about-our-fees' | translate }} <a [routerLink]=\\\"['/fees']\\\">{{ 'common.here' | translate }}</a>\\n                    </p>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n\";","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { faQuestionCircle } from '@fortawesome/pro-light-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport { cloneDeep } from 'lodash'\nimport { combineLatest, forkJoin, Observable, of, Subject, Subscription, timer } from 'rxjs'\nimport { flatMap, map, switchMap, take } from 'rxjs/operators'\nimport { CurrenciesService } from 'src/app/store/currencies/currencies.service'\nimport { environment } from 'src/environments/environment'\nimport { IContact, ICurrency, Paginated } from '../../common/api-interfaces'\nimport { ContactBookComponent, openContactBook } from '../../common/contact-book/contact-book.component'\nimport { Currency } from '../../common/models/accounting/currency.model'\nimport { Transaction } from '../../common/models/accounting/transaction.model'\nimport { Wallet } from '../../common/models/accounting/wallet.model'\nimport { PaymentConfirmationComponent } from '../../common/payment/payment-confirmation/payment-confirmation.component'\nimport { ConfirmationService } from '../../common/services/confirmation.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { TransactionViewComponent } from '../../common/transaction/transaction-view/transaction-view.component'\nimport { CurrenciesQuery } from '../../store/currencies/currencies.query'\nimport { WalletsService } from '../../store/wallets/wallets.service'\n\n@Component({\n    selector: 'sgpmx-transfer-form',\n    templateUrl: 'sgpmx-transfer-form.component.html',\n})\nexport class SgpmxTransferFormComponent implements OnInit, OnDestroy {\n    @Input()\n    public transaction: Partial<Transaction>\n    public appName = environment.appName\n    public displayName = environment.displayName\n\n    public recipient: string\n    public isUploadCollapsed = true\n    public fetchEvent = new Subject<void>()\n    public original: Partial<Transaction>\n    public files: File[] = []\n    public faQuestionCircle = faQuestionCircle\n\n    public maxUsableAmount: string | null\n\n    @ViewChild('transferForm')\n    public transferForm: NgForm\n    @Output()\n    public readonly transactionChange = new EventEmitter<Partial<Transaction>>()\n    @Output()\n    public readonly transactionComplete = new EventEmitter<void>()\n\n    public isDefineByValue = true\n    public valueInUsd: string | null = null\n\n    private wallets: Wallet[]\n    private subscriptions = new Subscription()\n\n    constructor(\n        public session: SessionService,\n        private currenciesQuery: CurrenciesQuery,\n        private http: HttpClient,\n        private ngbModal: NgbModal,\n        private confirmation: ConfirmationService,\n        private walletsService: WalletsService,\n        private currenciesService: CurrenciesService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.original = cloneDeep(this.transaction)\n        this.subscriptions.add(\n            timer(1, 16 * 1000)\n                .pipe(\n                    switchMap(() => this.http.post<void>('/sgpmx/refresh-exchange-rates', {})),\n                    flatMap(() => this.currenciesService.fetchAsObservable())\n                )\n                .subscribe(() => {\n                    this.transaction.currency = this.currenciesQuery.getEntity(this.transaction.currency?.code!)\n                    this.calculateAmount()\n                })\n        )\n        this.subscriptions.add(\n            combineLatest(this.fetchEvent, this.session.userStream)\n                .pipe(\n                    switchMap(([_, user]) =>\n                        forkJoin([\n                            of(user),\n                            this.http.get<Wallet[]>(`/users/${user.id}/wallets`),\n                            this.http\n                                .get<Paginated<ICurrency>>('/currencies', {\n                                    params: {\n                                        'filter.transferable': JSON.stringify(true),\n                                    },\n                                })\n                                .pipe(map(response => response.data)),\n                        ])\n                    )\n                )\n                .subscribe(([user, wallets, currencies]) => {\n                    if (!this.transaction.currency) {\n                        this.transaction.currency = currencies[0]\n                    }\n                    this.transaction.baseWallet = {\n                        user: {\n                            id: user.id,\n                            accountNumber: user.accountNumber,\n                            name: user.name,\n                        },\n                    } as Wallet\n                    this.wallets = wallets.filter(wallet => new BigNumber(wallet.balance).isGreaterThan(0))\n                    this.transaction = Object.assign(this.transaction, {\n                        fixedFee: '0',\n                        relativeFee: '0',\n                    })\n                })\n        )\n        this.fetchEvent.next()\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (this.transferForm && this.transferForm.invalid) {\n            return\n        }\n        const modal = this.ngbModal.open(PaymentConfirmationComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        const component = modal.componentInstance as PaymentConfirmationComponent\n        component.transaction = this.transaction as Transaction\n        component.onConfirm.subscribe(() => {\n            this.createTransaction().subscribe(\n                transaction => {\n                    component.isCompleted = true\n                    modal.close()\n                    const transactionView = this.ngbModal.open(TransactionViewComponent, {\n                        windowClass: 'modal-primary',\n                        backdrop: 'static',\n                    })\n                    const transactionViewModal = transactionView.componentInstance as TransactionViewComponent\n                    transactionViewModal.transaction = transaction\n                    this.reset()\n                    this.walletsService.fetch()\n                    this.fetchEvent.next()\n                    this.transactionComplete.emit()\n                },\n                error => {\n                    if (error.name === 'RecipientNotFoundError') {\n                        modal.close()\n                        this.confirmation\n                            .show({\n                                title: 'Recipient not found',\n                                type: 'danger',\n                                text: `The recipient has not been found. Please check if the account number or email address entered is correct.`,\n                                confirmText: 'Got it',\n                                showCancel: false,\n                            })\n                            .subscribe()\n                    }\n                    component.isSubmitted = false\n                    component.reset()\n                }\n            )\n        })\n    }\n\n    public openContactBook(): void {\n        if (!this.transaction.baseWallet?.user) {\n            return\n        }\n        const modal = openContactBook(this.ngbModal, this.transaction.baseWallet.user)\n        this.subscriptions.add(\n            (modal.componentInstance as ContactBookComponent).onSelect.subscribe((contact: IContact) => {\n                this.recipient = contact.counterUser?.accountNumber\n                this.onRecipientChange(contact)\n                modal.close()\n            })\n        )\n    }\n\n    public onRecipientChange(contact?: IContact): void {\n        this.transaction.counterWallet = {\n            user: contact\n                ? contact.counterUser\n                : { accountNumber: !this.recipient ? '' : this.recipient.trim().replace(/\\s/g, '') },\n        } as Wallet\n    }\n\n    public useMaxAmount(): void {\n        if (this.transaction.currency) {\n            const target = this.wallets.find(wallet => wallet.currency.code === this.transaction.currency!.code)\n            if (target) {\n                const maxUsable = this.maxUsableAmount\n                const balance = maxUsable\n                    ? BigNumber.min(target.availableBalance, maxUsable).toString()\n                    : target.availableBalance\n                this.transaction.amount = new BigNumber(balance).toFixed(this.transaction.currency!.decimalPlaces)\n            }\n        }\n        if (this.isDefineByValue) {\n            this.calculateValueInUsd()\n        }\n    }\n\n    public calculateValueInUsd(): void {\n        this.currenciesQuery\n            .selectEntity('USD')\n            .pipe(take(1))\n            .subscribe(usd => {\n                if (!usd) {\n                    return\n                }\n                if (!this.transaction.amount) {\n                    this.valueInUsd = null\n                    return\n                }\n                this.valueInUsd = new BigNumber(\n                    Currency.convert(this.transaction.amount, this.transaction.currency!, usd)\n                ).toFixed(2)\n            })\n    }\n\n    public calculateAmount(): void {\n        this.currenciesQuery\n            .selectEntity('USD')\n            .pipe(take(1))\n            .subscribe(usd => {\n                if (!usd) {\n                    return\n                }\n                if (!this.valueInUsd) {\n                    this.transaction.amount = undefined\n                    return\n                }\n                this.transaction.amount = new BigNumber(\n                    Currency.convert(this.valueInUsd, usd, this.transaction.currency!)\n                ).toFixed(7)\n            })\n    }\n\n    public onCurrencyChange(): void {\n        this.fetchEvent.next()\n        this.calculateAmount()\n        this.calculateValueInUsd()\n    }\n\n    public getMaximum(): string | null {\n        if (this.isDefineByValue || !this.transaction.currency) {\n            return '100000'\n        }\n        return new BigNumber(100000)\n            .times(this.transaction.currency.exchangeRate)\n            .toFixed(this.transaction.currency.decimalPlaces)\n    }\n\n    public getMinimum(): string {\n        if (this.isDefineByValue || !this.transaction.currency) {\n            return '1'\n        }\n        return new BigNumber(1)\n            .times(this.transaction.currency.exchangeRate)\n            .toFixed(this.transaction.currency.decimalPlaces)\n    }\n\n    private createTransaction(): Observable<Transaction> {\n        return this.http.post<Transaction>('/transactions', this.transaction).pipe(\n            flatMap(transaction =>\n                this.files.length > 0\n                    ? forkJoin(\n                          this.files.map(file =>\n                              this.http.post<File>(`/transactions/${transaction.id}/files`, file, {\n                                  headers: new HttpHeaders({\n                                      'X-File-Name': encodeURIComponent(file.name),\n                                      'Content-Type': file.type,\n                                  }),\n                              })\n                          )\n                      ).pipe(map(() => transaction))\n                    : of(transaction)\n            )\n        )\n    }\n\n    private reset(): void {\n        this.transaction = Object.assign(this.original, { currency: this.transaction.currency })\n        this.transactionChange.emit(this.transaction)\n        this.files = []\n        this.transferForm.resetForm({\n            'currency-select': this.transaction.currency,\n        })\n        this.isDefineByValue = true\n        this.fetchEvent.next()\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { AfterContentChecked, Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { ActivatedRoute } from '@angular/router'\nimport { faQuestionCircle } from '@fortawesome/pro-light-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport { combineLatest, forkJoin, Observable, of, Subject, Subscription } from 'rxjs'\nimport { flatMap, map, switchMap, take, tap } from 'rxjs/operators'\nimport { CurrenciesQuery } from 'src/app/store/currencies/currencies.query'\nimport { WalletsQuery } from 'src/app/store/wallets/wallets.query'\nimport { environment } from 'src/environments/environment'\nimport { IContact, ICurrency, IFee, IUser } from '../../common/api-interfaces'\nimport { ContactBookComponent, openContactBook } from '../../common/contact-book/contact-book.component'\nimport { Currency } from '../../common/models/accounting/currency.model'\nimport { Transaction } from '../../common/models/accounting/transaction.model'\nimport { Wallet } from '../../common/models/accounting/wallet.model'\nimport { PaymentConfirmationComponent } from '../../common/payment/payment-confirmation/payment-confirmation.component'\nimport { FeeService } from '../../common/services/accounting/fee.service'\nimport { ConfirmationService } from '../../common/services/confirmation.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { TransactionViewComponent } from '../../common/transaction/transaction-view/transaction-view.component'\nimport { WalletsService } from '../../store/wallets/wallets.service'\n\n@Component({\n    selector: 'transfer-form',\n    templateUrl: 'transfer-form.component.html',\n})\nexport class TransferFormComponent implements OnInit, AfterContentChecked, OnDestroy {\n    @Input()\n    public transaction: Partial<Transaction>\n    @ViewChild('transferForm')\n    public transferForm: NgForm\n\n    public minAmount: string | number | undefined\n    @Input()\n    public recipient: string\n    @Input()\n    public lockRecipient = false\n    @Input()\n    public showContactBtn = true\n    public files: File[] = []\n    public purposes = [\n        `${this.translate.instant('common.employment-income')}`,\n        `${this.translate.instant('common.social-security')}`,\n        `${this.translate.instant('common.trust-fund-income')}`,\n        `${this.translate.instant('common.pre-funding-remittance-account')}`,\n        `${this.translate.instant('transfer-form.savings')}`,\n        `${this.translate.instant('transfer-form.capital-injection')}`,\n        `${this.translate.instant('transfer-form.cash-disbursements')}`,\n        `${this.translate.instant('common.purchase-sales-of-goods')}`,\n        `${this.translate.instant('transfer-form.invoice-supplier-payment')}`,\n        `${this.translate.instant('common.tax-payment')}`,\n        `${this.translate.instant('common.license-subscription-fee')}`,\n        `${this.translate.instant('common.payment-of-interest')}`,\n        `${this.translate.instant('common.bill-utilities-payment')}`,\n        `${this.translate.instant('common.insurance-payment')}`,\n        `${this.translate.instant('common.refund-rebate')}`,\n        `${this.translate.instant('common.commission-bonus-payment')}`,\n        `${this.translate.instant('common.family-maintenance-education-medical-travel')}`,\n        `${this.translate.instant('common.pre-funding-foreign-exchange-account')}`,\n        `${this.translate.instant('transfer-form.loan-payment')}`,\n        `${this.translate.instant('common.investment-securities')}`,\n        `${this.translate.instant('common.transport')}`,\n        `${this.translate.instant('common.property-payment')}`,\n    ]\n\n    public displayName = environment.displayName\n    public inclusiveFee = true\n    public isUploadCollapsed = true\n    public faQuestionCircle = faQuestionCircle\n\n    private fee: IFee | null = null\n\n    private subscriptions = new Subscription()\n    private fetchEvent = new Subject<void>()\n\n    constructor(\n        public session: SessionService,\n        private feeService: FeeService,\n        private http: HttpClient,\n        private ngbModal: NgbModal,\n        private confirmation: ConfirmationService,\n        private walletsService: WalletsService,\n        private route: ActivatedRoute,\n        private walletsQuery: WalletsQuery,\n        private currenciesQuery: CurrenciesQuery,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            combineLatest(this.fetchEvent, this.session.userStream)\n                .pipe(\n                    tap(([_, user]) => {\n                        this.transaction.baseWallet = {\n                            user: {\n                                id: user.id,\n                                accountNumber: user.accountNumber,\n                                name: user.name,\n                            },\n                        } as Wallet\n                    }),\n                    switchMap(([_, user]) =>\n                        this.currenciesQuery.selectEntity(user.preferredCurrency.code).pipe(\n                            take(1),\n                            flatMap(preferredCurrency => {\n                                if (!this.transaction.currency) {\n                                    this.transaction.currency = preferredCurrency\n                                }\n                                return this.feeService.fetch({\n                                    type: 'transfer',\n                                    method: 'internal',\n                                    user: { id: user.id } as IUser,\n                                    currency: { code: this.transaction.currency?.code } as ICurrency,\n                                })\n                            })\n                        )\n                    )\n                )\n                .subscribe(fee => {\n                    this.fee = fee\n                    Object.assign(this.transaction, this.feeService.determineFee(this.transaction, fee as any))\n                    if (fee && fee.minValue) {\n                        this.minAmount = Currency.convert(fee.minValue, fee.currency, this.transaction.currency!)\n                    }\n                })\n        )\n        this.fetchEvent.next()\n        if (this.route.snapshot.queryParamMap.has('recipient')) {\n            this.recipient = this.route.snapshot.queryParamMap.get('recipient')!\n            this.onRecipientChange()\n        }\n    }\n\n    public ngAfterContentChecked(): void {\n        if (this.recipient) {\n            this.onRecipientChange()\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (this.transferForm && this.transferForm.invalid) {\n            return\n        }\n        const modal = this.ngbModal.open(PaymentConfirmationComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        const component = modal.componentInstance as PaymentConfirmationComponent\n        component.transaction = this.transaction as Transaction\n        component.onConfirm.subscribe(() => {\n            this.createTransaction().subscribe(\n                transaction => {\n                    component.isCompleted = true\n                    modal.close()\n                    const transactionView = this.ngbModal.open(TransactionViewComponent, {\n                        windowClass: 'modal-primary',\n                        backdrop: 'static',\n                    })\n                    const transactionViewModal = transactionView.componentInstance as TransactionViewComponent\n                    transactionViewModal.transaction = transaction\n                    this.reset()\n                    this.walletsService.fetch()\n                    this.fetchEvent.next()\n                },\n                error => {\n                    if (error.name === 'RecipientNotFoundError') {\n                        modal.close()\n                        this.confirmation\n                            .show({\n                                title: this.translate.instant('common.recipient-not-found'),\n                                type: 'danger',\n                                text: this.translate.instant('common.recipient-not-found-desc'),\n                                confirmText: this.translate.instant('common.understood'),\n                                showCancel: false,\n                            })\n                            .subscribe()\n                    }\n                    component.isSubmitted = false\n                    component.reset()\n                }\n            )\n        })\n    }\n\n    public openContactBook(): void {\n        if (!this.transaction.baseWallet?.user) {\n            return\n        }\n        const modal = openContactBook(this.ngbModal, this.transaction.baseWallet.user)\n        this.subscriptions.add(\n            (modal.componentInstance as ContactBookComponent).onSelect.subscribe((contact: IContact) => {\n                this.recipient = contact.counterUser?.accountNumber\n                this.onRecipientChange(contact)\n                modal.close()\n            })\n        )\n    }\n\n    public onRecipientChange(contact?: IContact): void {\n        this.transaction.counterWallet = {\n            user: contact\n                ? contact.counterUser\n                : { accountNumber: !this.recipient ? '' : this.recipient.trim().replace(/\\s/g, '') },\n        } as Wallet\n    }\n\n    public useMaxAmount(): void {\n        if (this.transaction.currency) {\n            this.walletsQuery.balances$.subscribe(balances => {\n                const found = balances.find(balance => balance.currency.code === this.transaction.currency!.code)\n                if (found) {\n                    this.transaction.amount = found.availableBalance\n\n                    if (!this.inclusiveFee && this.fee) {\n                        const maxFee = new BigNumber(\n                            Currency.convert(this.fee.max!, this.fee.currency, this.transaction.currency!)\n                        )\n                        const relativeFeeAmount = new BigNumber(this.transaction.amount).times(\n                            this.transaction.relativeFee ?? 0\n                        )\n                        let fee = new BigNumber(this.transaction.fixedFee || 0).plus(relativeFeeAmount)\n                        if (fee.isGreaterThan(maxFee)) {\n                            fee = maxFee\n                        }\n                        this.transaction.amount = new BigNumber(this.transaction.amount)\n                            .minus(fee)\n                            .toFixed(this.transaction.currency!.decimalPlaces, 1)\n                    }\n\n                    if (new BigNumber(this.transaction.amount).isLessThan(0)) {\n                        this.transaction.amount = '0'\n                    }\n\n                    this.transaction.amount = parseFloat(this.transaction.amount).toString()\n                }\n            })\n        }\n    }\n\n    public createTransaction(): Observable<Transaction> {\n        const body = {\n            ...this.transaction,\n        }\n        if (!this.inclusiveFee) {\n            body.amount = undefined\n            body.settledAmount = this.transaction.amount\n        }\n        return this.http.post<Transaction>('/transactions', body).pipe(\n            flatMap(transaction =>\n                this.files.length > 0\n                    ? forkJoin(\n                          this.files.map(file =>\n                              this.http.post<File>(`/transactions/${transaction.id}/files`, file, {\n                                  headers: new HttpHeaders({\n                                      'X-File-Name': encodeURIComponent(file.name),\n                                      'Content-Type': file.type,\n                                  }),\n                              })\n                          )\n                      ).pipe(map(() => transaction))\n                    : of(transaction)\n            )\n        )\n    }\n\n    public toggleInclusiveFee(): void {\n        this.inclusiveFee = !this.inclusiveFee\n        this.transaction.settledAmount = !this.inclusiveFee ? this.transaction.amount : undefined\n    }\n\n    public onCurrencyChange(): void {\n        this.fetchEvent.next()\n    }\n\n    public onAmountChange(): void {\n        Object.assign(this.transaction, this.feeService.determineFee(this.transaction, this.fee as any))\n    }\n\n    public reset(): void {\n        this.files = []\n        this.inclusiveFee = true\n        this.transferForm.resetForm({\n            inclusiveFee: true,\n            amount: undefined,\n            purpose: undefined,\n            comment: undefined,\n            'currency-select': this.transaction.currency,\n        })\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { TransferComponent } from './transfer.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: TransferComponent,\n        canActivate: [LoggedInAuthGuard],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class TransferRoutingModule {}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"btn-view-templates\\\" *ngIf=\\\"showContactBtn\\\">\\n        <a href (click)=\\\"$event.preventDefault(); openContactBook()\\\" class=\\\"font-lg\\\">{{ 'common.view-contacts' | translate }} ›</a>\\n    </div>\\n    <form\\n        class=\\\"form-validation\\\"\\n        #transferForm=\\\"ngForm\\\"\\n        [ngClass]=\\\"{ 'ng-submitted': transferForm.submitted }\\\"\\n        (ngSubmit)=\\\"submit()\\\"\\n        autocomplete=\\\"false\\\"\\n        novalidate\\n    >\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"d-flex justify-content-between\\\">\\n                <label class=\\\"font-md\\\" for=\\\"recipient\\\"\\n                    >{{ 'common.account-number' | translate | titlecase }} / {{ 'common.email' | translate }}\\n                    <a\\n                        href\\n                        (click)=\\\"$event.preventDefault()\\\"\\n                        [ngbPopover]=\\\"recipientContent\\\"\\n                        [popoverTitle]=\\\"recipientTitle\\\"\\n                        triggers=\\\"mouseenter:mouseleave\\\"\\n                        ><fa-icon [icon]=\\\"faQuestionCircle\\\"></fa-icon></a\\n                ></label>\\n            </div>\\n            <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"recipient\\\"\\n                name=\\\"recipient\\\"\\n                [(ngModel)]=\\\"recipient\\\"\\n                (ngModelChange)=\\\"onRecipientChange()\\\"\\n                #recipientInput=\\\"ngModel\\\"\\n                recipientValidator\\n                required\\n                emptyToNull\\n                [disabled]=\\\"lockRecipient\\\"\\n            />\\n            <div *ngIf=\\\"recipientInput.invalid && (transferForm.submitted || recipientInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"recipientInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"recipientInput?.errors?.invalidRecipient\\\">{{ 'common.invalid-recipient' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"d-flex justify-content-between\\\">\\n                <label class=\\\"font-md\\\" for=\\\"currency\\\">{{ 'common.currency' | translate }}</label>\\n            </div>\\n            <currency-select\\n                [(currency)]=\\\"transaction.currency\\\"\\n                [user]=\\\"user\\\"\\n                [isLarge]=\\\"true\\\"\\n                [currencyTypes]=\\\"['crypto', 'fiat', 'product']\\\"\\n                (currencyChange)=\\\"onCurrencyChange()\\\"\\n                [required]=\\\"true\\\"\\n                [transferable]=\\\"true\\\"\\n                [useFullName]=\\\"true\\\"\\n                [hideZeroBalance]=\\\"true\\\"\\n                #currencySelect\\n            >\\n            </currency-select>\\n            <div\\n                *ngIf=\\\"currencySelect.currencyInput.invalid && (transferForm.submitted || currencySelect.currencyInput.dirty)\\\"\\n                class=\\\"error-messages\\\"\\n            >\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currencySelect.currencyInput?.errors?.required\\\">\\n                    {{ 'common.this-is-required' | translate }}\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"d-flex justify-content-between\\\">\\n                <div class=\\\"d-flex\\\">\\n                    <label class=\\\"font-md\\\">{{ 'common.amount' | translate }}</label>\\n                </div>\\n                <a href (click)=\\\"useMaxAmount(); $event.preventDefault()\\\">{{ 'common.use-max' | translate }}</a>\\n            </div>\\n            <div class=\\\"input-group\\\">\\n                <input\\n                    type=\\\"number\\\"\\n                    class=\\\"form-control form-control-lg\\\"\\n                    id=\\\"amount\\\"\\n                    name=\\\"amount\\\"\\n                    placeholder=\\\"0.00\\\"\\n                    [(ngModel)]=\\\"transaction.amount\\\"\\n                    (ngModelChange)=\\\"onAmountChange()\\\"\\n                    [min]=\\\"minAmount\\\"\\n                    #amount=\\\"ngModel\\\"\\n                    required\\n                />\\n                <div class=\\\"input-group-append\\\">\\n                    <span class=\\\"input-group-text font-lg\\\">{{ transaction.currency?.code }}</span>\\n                </div>\\n            </div>\\n            <div *ngIf=\\\"amount.invalid && (transferForm.submitted || amount.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.min\\\">\\n                    {{ 'common.minimum-amount-is' | translate }}\\n                    {{ minAmount + '' || '0' | amount: transaction.currency?.decimalPlaces }}\\n                    {{ transaction.currency?.code }}.\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"custom-control custom-checkbox\\\">\\n                <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\" name=\\\"inclusiveFee\\\" (click)=\\\"toggleInclusiveFee()\\\" [ngModel]=\\\"inclusiveFee\\\" />\\n                <span class=\\\"custom-control-label font-md\\\">\\n                    {{ 'common.include-service-fee' | translate }}\\n                    <fa-icon\\n                        class=\\\"text-primary\\\"\\n                        [icon]=\\\"faQuestionCircle\\\"\\n                        [popoverTitle]=\\\"inclusiveFeeTitle\\\"\\n                        [ngbPopover]=\\\"inclusiveFeeContent\\\"\\n                        triggers=\\\"hover\\\"\\n                        container=\\\"body\\\"\\n                    >\\n                    </fa-icon>\\n                </span>\\n            </label>\\n        </div>\\n        <div class=\\\"pt-2 mb-1\\\"></div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"purpose\\\">{{ 'common.purpose' | translate }}</label>\\n            <ng-select\\n                class=\\\"ng-select-lg\\\"\\n                name=\\\"purpose\\\"\\n                [(ngModel)]=\\\"transaction.purpose\\\"\\n                [items]=\\\"purposes\\\"\\n                [clearable]=\\\"false\\\"\\n                [required]=\\\"true\\\"\\n                [addTag]=\\\"true\\\"\\n                addTagText=\\\"Use\\\"\\n                dropdownPosition=\\\"bottom\\\"\\n                #purposeInput=\\\"ngModel\\\"\\n            >\\n                <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                    {{ item }}\\n                </ng-template>\\n                <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                    {{ item }}\\n                </ng-template>\\n            </ng-select>\\n            <div *ngIf=\\\"purposeInput.invalid && (transferForm.submitted || purposeInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"purposeInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"reference\\\"\\n                >{{ 'common.reference' | translate }} <small class=\\\"text-muted\\\">({{ 'common.optional' | translate }})</small></label\\n            >\\n            <input type=\\\"text\\\" class=\\\"form-control form-control-lg\\\" id=\\\"reference\\\" name=\\\"reference\\\" [(ngModel)]=\\\"transaction.reference\\\" emptyToNull />\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"comment\\\"\\n                >{{ 'common.comment' | translate }} <small class=\\\"text-muted\\\">({{ 'common.optional' | translate }})</small></label\\n            >\\n            <textarea\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"comment\\\"\\n                name=\\\"comment\\\"\\n                [(ngModel)]=\\\"transaction.comment\\\"\\n                rows=\\\"3\\\"\\n                emptyToNull\\n            ></textarea>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <a href class=\\\"d-block mb-2\\\" (click)=\\\"isUploadCollapsed = !isUploadCollapsed; $event.preventDefault()\\\"\\n                >{{ isUploadCollapsed ? '+ ' + ('common.attach' | translate) : '- ' + ('common.remove' | translate) }}\\n                {{ 'common.file' | translate }}</a\\n            >\\n            <dropzone [files]=\\\"files\\\" [ngbCollapse]=\\\"isUploadCollapsed\\\"></dropzone>\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-lg btn-block btn-primary mb-2\\\">{{ 'common.submit' | translate }}</button>\\n        <div *ngIf=\\\"transaction.currency && transaction.currency.type === 'crypto'\\\" class=\\\"small text-muted mb-2\\\">\\n            <b>Disclaimer:</b> All services related to wallet, custody and currency exchange provided on this website are exclusively provided by\\n            Aerapass' third party suppliers. Aerapass allows to its customers access on an 'as-is' basis.\\n        </div>\\n        <small class=\\\"text-muted\\\" *ngIf=\\\"transaction && transaction.method !== 'card'\\\">\\n            <div>{{ 'common.by-clicking-the-submit-button' | translate }}</div>\\n            <a [routerLink]=\\\"['/terms']\\\" class=\\\"text-muted\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\"\\n                >{{ 'common.terms' | translate }} &amp; {{ 'common.conditions' | translate }}</a\\n            >\\n            {{ 'common.and' | translate }}\\n            <a [routerLink]=\\\"['/privacy']\\\" class=\\\"text-muted\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">{{ 'common.data-privacy-notice' | translate }}</a\\n            >.</small\\n        >\\n    </form>\\n    <ng-template #recipientTitle> {{ 'common.terms' | translate }} </ng-template>\\n    <ng-template #recipientContent>\\n        <p>{{ 'common.you-can-send-fund-to-other' | translate: { value: displayName } }}</p>\\n        <p [innerHtml]=\\\"'common.ask-your-beneficiary' | translate\\\"></p>\\n    </ng-template>\\n    <ng-template #inclusiveFeeTitle> {{ 'common.include-service-fee' | translate }} </ng-template>\\n    <ng-template #inclusiveFeeContent>\\n        <p>\\n            {{ 'common.if' | translate }} <b>{{ 'common.checked' | translate }}</b\\n            >, {{ 'common.checked-desc' | translate }}\\n        </p>\\n        <p>\\n            {{ 'common.if' | translate }} <b>{{ 'common.unchecked' | translate }}</b\\n            >, {{ 'common.unchecked-desc' | translate }}\\n        </p>\\n    </ng-template>\\n</ng-container>\\n\";","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { forkJoin, Observable } from 'rxjs'\nimport { map, tap } from 'rxjs/operators'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { IFee } from '../../common/api-interfaces'\nimport { FeesStore } from './fees.store'\n\n@Injectable({ providedIn: 'root' })\nexport class FeesService {\n    constructor(protected store: FeesStore, private http: HttpClient, private session: SessionService) {}\n\n    public fetchAsObservable(): Observable<IFee[]> {\n        return forkJoin([\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'AU',\n                },\n            }),\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'AG',\n                },\n            }),\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'USD',\n                },\n            }),\n        ]).pipe(\n            map(([goldFees, silverFees, usdFees]) => [...goldFees, ...silverFees, ...usdFees]),\n            tap(fees => {\n                this.store.set(fees)\n            })\n        )\n    }\n\n    public fetch(): void {\n        this.fetchAsObservable().subscribe(() => undefined)\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport BigNumber from 'bignumber.js'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { FeeType, ICurrency, IFee, IUser, RPCResult, Transaction, TransactionMethod } from '../../api-interfaces'\nimport { Currency } from '../../models/accounting/currency.model'\nimport { Fee } from '../../models/accounting/fee.model'\nimport { calculateFee } from '../../transactions.mixins'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FeeService {\n    constructor(private http: HttpClient) {}\n\n    public fetch(fee: {\n        type: FeeType\n        method: TransactionMethod\n        currency: ICurrency\n        amount?: string\n        user?: IUser | null\n    }): Observable<Fee | null> {\n        return this.http\n            .post<RPCResult<IFee | null>>(\n                '/fees',\n                {\n                    id: Math.round(Math.random() * 10000),\n                    jsonrpc: '2.0',\n                    method: 'findByPrimaryAttributes',\n                    params: {\n                        type: fee.type,\n                        method: fee.method,\n                        amount: fee.amount ? fee.amount : '1',\n                        currency: fee.currency,\n                        user: fee.user,\n                    },\n                },\n                {\n                    headers: new HttpHeaders({\n                        'Content-Type': 'application/json-rpc',\n                    }),\n                }\n            )\n            .pipe(map(response => (response.result ? new Fee(response.result) : null)))\n    }\n\n    public determineFee(currentTransaction: Partial<Transaction>, fee: Partial<Fee> | null): Partial<Transaction> {\n        const transaction = currentTransaction\n        const fixedFee =\n            fee && fee.fixed && transaction.currency\n                ? Currency.convert(fee.fixed, fee.currency!, transaction.currency)\n                : '0'\n        const relativeFee = fee && fee.relative ? fee.relative : '0'\n\n        transaction.fixedFee = fixedFee || undefined\n        transaction.relativeFee = relativeFee || undefined\n\n        if (fee && fee.min) {\n            const minFee = Currency.convert(fee.min, fee.currency!, transaction.currency!)\n            if (new BigNumber(calculateFee(transaction as Transaction)).isLessThan(minFee)) {\n                transaction.fixedFee = minFee\n                transaction.relativeFee = '0'\n            }\n        }\n        if (fee && fee.max) {\n            const maxFee = Currency.convert(fee.max, fee.currency!, transaction.currency!)\n            if (new BigNumber(calculateFee(transaction as Transaction)).isGreaterThan(maxFee)) {\n                transaction.fixedFee = maxFee\n                transaction.relativeFee = '0'\n            }\n        }\n        return transaction\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { PaymentFormModule } from '../common/payment/payment.module'\nimport { TransactionModule } from '../common/transaction/transaction.module'\nimport { SgpmxTransferFormComponent } from './sgpmx-transfer-form.component/sgpmx-transfer-form.component'\nimport { TransferFormComponent } from './transfer-form.component.ts/transfer-form.component'\nimport { TransferRoutingModule } from './transfer-routing.module'\nimport { TransferComponent } from './transfer.component'\n\n@NgModule({\n    declarations: [TransferComponent, TransferFormComponent, SgpmxTransferFormComponent],\n    imports: [CommonModule, TransferRoutingModule, PaymentFormModule, TransactionModule],\n    exports: [TransferFormComponent],\n})\nexport class TransferModule {}\n"],"sourceRoot":"webpack:///"}