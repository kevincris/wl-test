{"version":3,"sources":["./src/app/admin/users/user-form-modal/user-form-modal.component.html","./src/app/admin/users/user-form-modal/user-form-modal.component.ts"],"names":[],"mappings":"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","file":"default~admin-admin-module~organization-organization-module.js","sourcesContent":["export default \"<form\\n    #form=\\\"ngForm\\\"\\n    class=\\\"form-validation e2e-user-form-modal\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': form.submitted }\\\"\\n    (ngSubmit)=\\\"submit()\\\"\\n    autocomplete=\\\"false\\\"\\n    novalidate\\n>\\n    <div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">{{ 'common.create-user' | translate }}</h5>\\n        <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <div class=\\\"custom-control custom-radio\\\">\\n                    <input\\n                        type=\\\"radio\\\"\\n                        id=\\\"typePersonal\\\"\\n                        name=\\\"type\\\"\\n                        value=\\\"personal\\\"\\n                        class=\\\"custom-control-input\\\"\\n                        [(ngModel)]=\\\"type\\\"\\n                        (change)=\\\"onTypeChange()\\\"\\n                    />\\n                    <label class=\\\"custom-control-label font-md\\\" for=\\\"typePersonal\\\">{{ 'common.personal-account' | translate }}</label>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <div class=\\\"custom-control custom-radio\\\">\\n                    <input\\n                        type=\\\"radio\\\"\\n                        id=\\\"typeCorporate\\\"\\n                        name=\\\"type\\\"\\n                        value=\\\"business\\\"\\n                        class=\\\"custom-control-input\\\"\\n                        [(ngModel)]=\\\"type\\\"\\n                        (change)=\\\"onTypeChange()\\\"\\n                    />\\n                    <label class=\\\"custom-control-label font-md\\\" for=\\\"typeCorporate\\\">{{ 'common.corporate-account' | translate }}</label>\\n                </div>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"type === 'business'\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"form-group col\\\">\\n                    <label class=\\\"form-control-label\\\" for=\\\"name\\\">{{ 'common.entity-name' | translate }}</label>\\n                    <input\\n                        type=\\\"text\\\"\\n                        class=\\\"form-control\\\"\\n                        id=\\\"name\\\"\\n                        name=\\\"name\\\"\\n                        [(ngModel)]=\\\"business.name\\\"\\n                        #name=\\\"ngModel\\\"\\n                        autocomplete=\\\"given-name\\\"\\n                        required\\n                        emptyToNull\\n                    />\\n                    <div *ngIf=\\\"name.invalid && (form.submitted || name.dirty)\\\" class=\\\"error-messages\\\">\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"name?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    </div>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"name\\\">{{ 'common.first-name' | translate | sentenceCase }}</label>\\n                <input\\n                    type=\\\"text\\\"\\n                    class=\\\"form-control\\\"\\n                    id=\\\"firstName\\\"\\n                    name=\\\"firstName\\\"\\n                    [(ngModel)]=\\\"details.firstName\\\"\\n                    #firstName=\\\"ngModel\\\"\\n                    autocomplete=\\\"given-name\\\"\\n                    required\\n                    emptyToNull\\n                />\\n                <div *ngIf=\\\"firstName.invalid && (form.submitted || firstName.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"firstName?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"name\\\">{{ 'common.last-name' | translate | sentenceCase }}</label>\\n                <input\\n                    type=\\\"text\\\"\\n                    class=\\\"form-control\\\"\\n                    id=\\\"lastName\\\"\\n                    name=\\\"lastName\\\"\\n                    [(ngModel)]=\\\"details.lastName\\\"\\n                    #lastName=\\\"ngModel\\\"\\n                    autocomplete=\\\"family-name\\\"\\n                    required\\n                    emptyToNull\\n                />\\n                <div *ngIf=\\\"lastName.invalid && (form.submitted || lastName.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"lastName?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"birthday\\\">{{ 'common.birthday' | translate }}</label>\\n                <input\\n                    class=\\\"form-control\\\"\\n                    type=\\\"text\\\"\\n                    id=\\\"birthday\\\"\\n                    name=\\\"birthday\\\"\\n                    [(ngModel)]=\\\"details.birthday\\\"\\n                    mask=\\\"00/00/0000\\\"\\n                    #birthdayField=\\\"ngModel\\\"\\n                    autocomplete=\\\"bday\\\"\\n                    required\\n                    birthdayValidator\\n                />\\n                <small class=\\\"form-text text-muted\\\">{{ 'common.format' | translate }}: dd/mm/yyyy</small>\\n                <div *ngIf=\\\"birthdayField.invalid && birthdayField.dirty\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"birthdayField?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"birthdayField?.errors?.invalidDate\\\">{{ 'common.invalid-date' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"birthdayField?.errors?.dateLongAgo\\\">{{ 'common.date-should-be-1900' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"birthdayField?.errors?.dateInFuture\\\">{{ 'common.you-should-18' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"nationality\\\">{{ 'common.nationality' | translate }}</label>\\n                <ng-select\\n                    id=\\\"nationality\\\"\\n                    name=\\\"nationality\\\"\\n                    [(ngModel)]=\\\"details.nationality\\\"\\n                    bindLabel=\\\"name\\\"\\n                    bindValue=\\\"alpha2\\\"\\n                    [items]=\\\"countriesSortedByName\\\"\\n                    [clearable]=\\\"false\\\"\\n                    #nationality=\\\"ngModel\\\"\\n                    autocomplete=\\\"false\\\"\\n                    aria-autocomplete=\\\"false\\\"\\n                    required\\n                ></ng-select>\\n                <div *ngIf=\\\"nationality.invalid && nationality.dirty\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"nationality?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"font-md\\\" for=\\\"email\\\">{{ 'common.email' | translate }}</label>\\n                <input\\n                    type=\\\"email\\\"\\n                    id=\\\"email\\\"\\n                    name=\\\"email\\\"\\n                    class=\\\"form-control\\\"\\n                    [(ngModel)]=\\\"item.email\\\"\\n                    autocomplete=\\\"email\\\"\\n                    #email=\\\"ngModel\\\"\\n                    required\\n                    email\\n                />\\n                <div *ngIf=\\\"email.invalid && (form.submitted || email.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"email?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"email?.errors?.email\\\">{{ 'common.not-a-valid-email-address' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"font-md\\\" for=\\\"password\\\">{{ 'common.password' | translate }}</label>\\n                <input\\n                    type=\\\"password\\\"\\n                    id=\\\"password\\\"\\n                    name=\\\"password\\\"\\n                    class=\\\"form-control\\\"\\n                    [(ngModel)]=\\\"item.password\\\"\\n                    minlength=\\\"8\\\"\\n                    autocomplete=\\\"new-password\\\"\\n                    #password=\\\"ngModel\\\"\\n                    required\\n                />\\n                <small class=\\\"form-text text-muted\\\">{{ 'common.min-length-8-char' | translate }}</small>\\n                <div *ngIf=\\\"password.invalid && (form.submitted || password.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"password?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"password?.errors?.minlength\\\">{{ 'common.password-too-short' | translate }}</div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-w-sm\\\" [ngClass]=\\\"{ loading: isSaving }\\\" [disabled]=\\\"isSaving\\\">\\n            {{ 'common.create' | translate }}\\n        </button>\\n    </div>\\n</form>\\n\";","import { HttpClient } from '@angular/common/http'\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { pick } from 'lodash'\nimport { finalize } from 'rxjs/operators'\nimport { BusinessDetails, IUser, UserDetails, UserType } from '../../../common/api-interfaces'\nimport { convertToISODate, deepOmitEmptyProperties } from '../../../common/common.mixin'\nimport { countries, countriesSortedByName } from '../../../common/countries'\nimport { ToastrService } from '../../../common/services/toastr.service'\n\n@Component({\n    selector: 'user-form-modal',\n    templateUrl: 'user-form-modal.component.html',\n})\nexport class UserFormModalComponent {\n    @Input()\n    public item: Partial<IUser> & { password?: string }\n    public type: UserType = 'personal'\n    public details: Partial<UserDetails> = {\n        firstName: '',\n        lastName: '',\n        birthday: '',\n        nationality: '',\n    }\n\n    public business: Partial<BusinessDetails> = {\n        name: '',\n    }\n\n    @Output()\n    public readonly onSave = new EventEmitter<void>()\n    @Output()\n    public readonly onDelete = new EventEmitter<void>()\n    @ViewChild('form')\n    public form: NgForm\n\n    public isSaving = false\n    public countries = countries\n    public countriesSortedByName = countriesSortedByName\n\n    constructor(\n        private http: HttpClient,\n        public activeModal: NgbActiveModal,\n        private toastr: ToastrService,\n        private router: Router,\n        public translate: TranslateService\n    ) {}\n\n    public submit(): void {\n        if (!this.form.valid) {\n            this.toastr.error(this.translate.instant('common.form-invalid'))\n            return\n        }\n        this.isSaving = true\n        const body = pick(this.item, ['email', 'password'])\n        this.http\n            .post<IUser>(`/users`, {\n                ...body,\n                type: this.type,\n                details: deepOmitEmptyProperties({\n                    ...this.details,\n                    birthday: this.details.birthday ? convertToISODate(this.details.birthday) : undefined,\n                    business: {\n                        name: this.business.name,\n                    },\n                }),\n            })\n            .pipe(\n                finalize(() => {\n                    this.isSaving = false\n                })\n            )\n            .subscribe(user => {\n                this.activeModal.close()\n                return this.router.navigate(['/admin/accounts/users', user.id])\n            })\n    }\n\n    public onTypeChange(): void {\n        this.details = {\n            firstName: '',\n            lastName: '',\n            birthday: '',\n            nationality: '',\n        }\n        this.business = {\n            name: '',\n        }\n    }\n}\n"],"sourceRoot":"webpack:///"}