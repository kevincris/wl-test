{"version":3,"sources":["./src/app/login/restore-password/restore-password.auth-guard.ts","./src/app/login/restore-password/restore-password.component.ts","./src/app/login/login-alerts.service.ts","./src/app/login/login.auth-guard.ts","./src/app/login/forgot-password/forgot-password.component.ts","./src/app/common/services/login-redirect.service.ts","./src/app/common/services/activation.service.ts","./src/app/login/forgot-password/forgot-password.component.html","./src/app/login/login.module.ts","./src/app/login/login-routing.module.ts","./src/app/login/login.component.html","./src/app/login/login-form/login-form.component.html","./src/app/login/restore-password/restore-password.component.html","./src/app/login/login-form/login-form.component.ts","./src/app/login/login.component.ts"],"names":[],"mappings":"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","file":"login-login-module.js","sourcesContent":["import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, UrlTree } from '@angular/router'\n\n@Injectable()\nexport class RestorePasswordAuthGuard implements CanActivate {\n    constructor(private router: Router) {}\n    public canActivate(route: ActivatedRouteSnapshot): boolean | UrlTree {\n        return route.queryParamMap.has('token') ? true : this.router.parseUrl('/login')\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { Component, OnInit, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { faLockAlt, faSyncAlt } from '@fortawesome/pro-light-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport isBefore from 'date-fns/isBefore'\nimport parseISO from 'date-fns/parseISO'\nimport { finalize } from 'rxjs/operators'\nimport { Activation } from '../../common/api-interfaces'\nimport { AlertService } from '../../common/services/alert.service'\nimport { UserService } from '../../common/services/core/user.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { LoginAlertsService } from '../login-alerts.service'\n\n@Component({\n    selector: 'restore-password',\n    templateUrl: 'restore-password.component.html',\n})\nexport class RestorePasswordComponent implements OnInit {\n    @ViewChild('passwordForm')\n    public passwordForm: NgForm\n    public password: string\n    public repeatedPassword: string\n    public isLoading = false\n    public requiredPasswordStrength = 60\n    public passwordStrength = 0\n    public faSyncAlt = faSyncAlt\n    public faLockAlt = faLockAlt\n    public activation: Activation\n    private token: string\n\n    constructor(\n        private http: HttpClient,\n        private userService: UserService,\n        private toastr: ToastrService,\n        private loginAlerts: LoginAlertsService,\n        private alerts: AlertService,\n        private route: ActivatedRoute,\n        private router: Router,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.route.queryParamMap.subscribe(async params => {\n            // this state can only be activated if the token is set, so we can assume it's set\n            this.token = params.get('token')!\n            this.http.get<Activation>(`/activations/${this.token}`).subscribe(\n                activation => {\n                    this.activation = activation\n                    if (this.activation.activated || isBefore(parseISO(this.activation.expiryDate), new Date())) {\n                        this.loginAlerts.disposables.add(\n                            this.alerts.add({\n                                message: this.translate.instant('common.invalid-password-reset-token'),\n                                severity: 'danger',\n                            })\n                        )\n                        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                        this.router.navigate(['/login'])\n                    }\n                },\n                error => {\n                    if (error.status === 404) {\n                        this.loginAlerts.disposables.add(\n                            this.alerts.add({\n                                message: this.translate.instant('common.password-reset-token-not-found'),\n                                severity: 'danger',\n                            })\n                        )\n                        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                        this.router.navigate(['/login'])\n                    }\n                }\n            )\n        })\n    }\n\n    public submit(): void {\n        if (this.passwordForm.invalid) {\n            return\n        }\n        this.isLoading = true\n        this.userService\n            .changePassword(this.activation.user.id, this.password, { 'X-Activation-Token': this.token })\n            .pipe(\n                finalize(() => {\n                    this.isLoading = false\n                })\n            )\n            .subscribe(\n                () => {\n                    this.toastr.success(\n                        this.translate.instant('restore-password.you-can-now-login-using-your-new-password'),\n                        this.translate.instant('common.password-reset')\n                    )\n                    this.loginAlerts.disposables.add(\n                        this.alerts.add({\n                            message: `${this.translate.instant('common.password-reset')}. ${this.translate.instant(\n                                'restore-password.you-can-now-login-using-your-new-password'\n                            )}`,\n                            severity: 'success',\n                        })\n                    )\n                    return this.router.navigate(['/login'])\n                },\n                () => {\n                    this.loginAlerts.disposables.add(\n                        this.alerts.add({\n                            message: this.translate.instant('common.could-not-reset-password'),\n                            severity: 'danger',\n                        })\n                    )\n                }\n            )\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { Disposable } from '../common/disposable'\n\n@Injectable()\nexport class LoginAlertsService {\n    public disposables = new Set<Disposable>()\n}\n","import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, UrlTree } from '@angular/router'\nimport { ActivationService } from '../common/services/activation.service'\nimport { LoginRedirectService } from '../common/services/login-redirect.service'\nimport { SessionService } from '../common/services/session.service'\n\n@Injectable()\nexport class LoginAuthGuard implements CanActivate {\n    constructor(\n        private session: SessionService,\n        private activationService: ActivationService,\n        private redirectService: LoginRedirectService,\n        private router: Router\n    ) {}\n    public canActivate(route: ActivatedRouteSnapshot): boolean | UrlTree | Promise<UrlTree> {\n        if (route.queryParamMap.has('userId') && route.queryParamMap.has('activationToken')) {\n            this.activationService.activate(\n                route.queryParamMap.get('userId'),\n                route.queryParamMap.get('activationToken')!,\n                route.queryParamMap.get('email')!\n            )\n            if (this.session.isAuthenticated()) {\n                return this.router.parseUrl('/dashboard')\n            } else {\n                // // clear state params\n                return this.router.parseUrl('/login')\n            }\n        } else if (this.session.isAuthenticated()) {\n            return (\n                this.redirectService\n                    .redirect(route, true)\n                    .toPromise()\n                    // errors are handled before, don't pass the error to router but proceed with app flow\n                    .catch(() => true)\n                    .then(() => this.router.parseUrl('/dashboard'))\n            )\n        }\n        return true\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { faEnvelope } from '@fortawesome/pro-light-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport { finalize } from 'rxjs/operators'\nimport { RPCResult } from '../../common/api-interfaces'\nimport { AlertService } from '../../common/services/alert.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { LoginAlertsService } from '../login-alerts.service'\n\n@Component({\n    selector: 'forgot-password',\n    templateUrl: 'forgot-password.component.html',\n})\nexport class ForgotPasswordComponent {\n    @ViewChild('forgotPasswordForm')\n    public forgotPasswordForm: NgForm\n    public email: string\n    public isLoading = false\n    public faEnvelope = faEnvelope\n\n    constructor(\n        private http: HttpClient,\n        private toastr: ToastrService,\n        private alerts: AlertService,\n        private loginAlerts: LoginAlertsService,\n        private router: Router,\n        public translate: TranslateService\n    ) {}\n\n    public submit(): void {\n        if (this.forgotPasswordForm.invalid) {\n            return\n        }\n        this.isLoading = true\n        this.http\n            .post<RPCResult<void>>(\n                '/users',\n                {\n                    id: Math.floor(Math.random() * 10000),\n                    jsonrpc: '2.0',\n                    method: 'resetPassword',\n                    params: { email: this.email },\n                },\n                { headers: new HttpHeaders({ 'Content-Type': 'application/json-rpc' }) }\n            )\n            .pipe(\n                finalize(() => {\n                    this.isLoading = false\n                })\n            )\n            .subscribe(() => {\n                this.toastr.success(this.translate.instant('common.instructions-sent'))\n                this.loginAlerts.disposables.add(\n                    this.alerts.add({\n                        severity: 'success',\n                        message: this.translate.instant('common.check-your-mailbox'),\n                    })\n                )\n                return this.router.navigate(['/login'])\n            })\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, Router } from '@angular/router'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { from, Observable, of } from 'rxjs'\nimport { flatMap, map, tap } from 'rxjs/operators'\nimport { WelcomeComponent } from '../welcome/welcome.component'\nimport { SessionService } from './session.service'\n\nexport enum RedirectStrategy {\n    DASHBOARD = 'dashboard',\n    PREVIOUS_STATE = 'previous-state',\n    VERIFICATION = 'verification',\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LoginRedirectService {\n    constructor(\n        protected router: Router,\n        protected session: SessionService,\n        private ngbModal: NgbModal,\n        protected http: HttpClient\n    ) {}\n\n    public redirect(route: ActivatedRouteSnapshot, ignoreWelcome = false): Observable<void> {\n        return of(true).pipe(\n            map(() =>\n                !this.session.user.approvedAt\n                    ? RedirectStrategy.DASHBOARD\n                    : route &&\n                      route.queryParamMap.has('redirect') &&\n                      !['/', '/login'].includes(route.queryParamMap.get('redirect')!)\n                    ? RedirectStrategy.PREVIOUS_STATE\n                    : RedirectStrategy.DASHBOARD\n            ),\n            flatMap(strategy => {\n                switch (strategy) {\n                    case RedirectStrategy.PREVIOUS_STATE:\n                        const targetState = route.queryParamMap.get('redirect')!\n                        return from(this.router.navigate([targetState]))\n                    default:\n                        return from(this.router.navigate(['/dashboard'])).pipe(\n                            tap(() => {\n                                if (\n                                    !ignoreWelcome &&\n                                    (!this.session.user.approvedAt || this.session.user.status === 'pending')\n                                ) {\n                                    this.ngbModal.open(WelcomeComponent, {\n                                        windowClass: 'modal-primary',\n                                    })\n                                }\n                            })\n                        )\n                }\n            }),\n            map(() => undefined)\n        )\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { NavigationStart, Router } from '@angular/router'\nimport { of } from 'rxjs'\nimport { catchError, filter, flatMap, map, take, tap } from 'rxjs/operators'\nimport { Disposable } from '../disposable'\nimport { AlertService } from './alert.service'\nimport { LogoutService } from './logout.service'\nimport { SessionService } from './session.service'\nimport { TokenService } from './token.service'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ActivationService {\n    constructor(\n        private http: HttpClient,\n        private alertService: AlertService,\n        private router: Router,\n        private session: SessionService,\n        private logoutService: LogoutService,\n        private tokenService: TokenService\n    ) {}\n\n    public activate(userId: string | null, activationToken: string, email?: string): void {\n        const disposables = new Set<Disposable>()\n        // check if the activation is for a different user, in that case, we are logging the user out first\n        ;(this.session.isAuthenticated() && userId && this.session.user.id !== userId\n            ? this.logoutService.logout()\n            : of(undefined)\n        )\n            .pipe(\n                flatMap(() =>\n                    this.http\n                        .post(\n                            email ? `/users/${userId}/change-email` : `/users/${userId}/change-status`,\n                            email ? { email } : { status: 'active' },\n                            {\n                                headers: new HttpHeaders({\n                                    'X-Activation-Token': activationToken,\n                                    'Content-Type': 'application/json',\n                                }),\n                            }\n                        )\n                        .pipe(\n                            flatMap(() =>\n                                userId && this.session.hasValidRefreshToken()\n                                    ? this.tokenService.refresh({ email }).pipe(map(() => undefined))\n                                    : of(undefined)\n                            ),\n                            tap(() => {\n                                disposables.add(\n                                    this.alertService.add({\n                                        severity: 'success',\n                                        message: email\n                                            ? 'You have successfully changed your email address.'\n                                            : 'Your email is confirmed, please <b>login to continue</b> the account opening process.',\n                                    })\n                                )\n                            }),\n                            catchError(error => {\n                                disposables.add(\n                                    this.alertService.add({\n                                        severity: 'danger',\n                                        message: error.message,\n                                    })\n                                )\n                                return of(undefined)\n                            })\n                        )\n                )\n            )\n            .subscribe(() => {\n                // clear alerts\n                this.router.events\n                    .pipe(\n                        filter(event => event instanceof NavigationStart),\n                        take(1)\n                    )\n                    .subscribe(() => {\n                        for (const disposable of disposables) {\n                            disposable.dispose()\n                        }\n                    })\n            })\n    }\n}\n","export default \"<div class=\\\"card shadow b-a-0 e2e-forgot-password\\\">\\n    <div class=\\\"card-body\\\">\\n        <h3 class=\\\"text-primary mb-1\\\">{{ 'common.forgot-password' | translate }}</h3>\\n        <p class=\\\"text-custom\\\">{{ 'common.enter-your-email-to-reset' | translate }}</p>\\n        <form #forgotPasswordForm=\\\"ngForm\\\" class=\\\"form-validation\\\" (ngSubmit)=\\\"submit()\\\" novalidate>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">\\n                            <fa-icon [icon]=\\\"faEnvelope\\\"></fa-icon>\\n                        </span>\\n                    </span>\\n                    <input\\n                        type=\\\"email\\\"\\n                        class=\\\"form-control\\\"\\n                        [placeholder]=\\\"'common.email' | translate\\\"\\n                        [(ngModel)]=\\\"email\\\"\\n                        autocomplete=\\\"email\\\"\\n                        #emailInput=\\\"ngModel\\\"\\n                        id=\\\"email\\\"\\n                        name=\\\"email\\\"\\n                        [email]=\\\"true\\\"\\n                        required\\n                    />\\n                </div>\\n                <div *ngIf=\\\"emailInput.invalid && (forgotPasswordForm.submitted || emailInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"emailInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"emailInput?.errors?.email\\\">{{ 'common.not-a-valid-email-address' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-lg btn-block\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n                    {{ 'common.reset-password' | translate }}\\n                </button>\\n            </div>\\n            <div class=\\\"form-group text-center mb-0\\\">\\n                <a class=\\\"px-0\\\" [routerLink]=\\\"['/login']\\\">{{ 'common.back-to-login' | translate }}</a>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n\";","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component'\nimport { LoginAlertsService } from './login-alerts.service'\nimport { LoginFormComponent } from './login-form/login-form.component'\nimport { LoginRoutingModule } from './login-routing.module'\nimport { LoginComponent } from './login.component'\nimport { RestorePasswordComponent } from './restore-password/restore-password.component'\n\n@NgModule({\n    declarations: [LoginFormComponent, LoginComponent, ForgotPasswordComponent, RestorePasswordComponent],\n    imports: [CommonModule, LoginRoutingModule],\n    providers: [LoginAlertsService],\n})\nexport class LoginModule {}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component'\nimport { LoginFormComponent } from './login-form/login-form.component'\nimport { LoginAuthGuard } from './login.auth-guard'\nimport { LoginComponent } from './login.component'\nimport { RestorePasswordAuthGuard } from './restore-password/restore-password.auth-guard'\nimport { RestorePasswordComponent } from './restore-password/restore-password.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: LoginComponent,\n        canActivate: [LoginAuthGuard],\n        children: [\n            {\n                path: '',\n                component: LoginFormComponent,\n            },\n            {\n                path: 'forgot-password',\n                component: ForgotPasswordComponent,\n            },\n            {\n                path: 'restore-password',\n                component: RestorePasswordComponent,\n                canActivate: [RestorePasswordAuthGuard],\n            },\n        ],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [LoginAuthGuard, RestorePasswordAuthGuard],\n})\nexport class LoginRoutingModule {}\n","export default \"<div class=\\\"login-page fullscreen-bg-body\\\">\\n    <div class=\\\"login-box\\\">\\n        <a [routerLink]=\\\"['/']\\\">\\n            <img class=\\\"login-logo\\\" [src]=\\\"getLogo()\\\" />\\n        </a>\\n        <router-outlet></router-outlet>\\n    </div>\\n    <p class=\\\"text-center\\\">\\n        <a class=\\\"text-white e2e-registration-link\\\" [routerLink]=\\\"['/register']\\\">{{ 'login.don-t-have-an-account-register-now' | translate }}</a>\\n    </p>\\n</div>\\n\";","export default \"<div class=\\\"card shadow b-a-0 e2e-login-form\\\">\\n    <div class=\\\"card-body\\\">\\n        <img src=\\\"/img/icons/lock.svg\\\" draggable=\\\"false\\\" class=\\\"float-right\\\" />\\n        <h2 class=\\\"text-primary mb-1\\\">{{ 'common.welcome' | translate }}</h2>\\n        <p class=\\\"text-custom\\\">{{ 'common.log-in-using-your-id' | translate: { value: displayName } }}</p>\\n        <alert-outlet></alert-outlet>\\n        <form #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"submit()\\\" novalidate *ngIf=\\\"!showTwoFactorForm\\\">\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\"><fa-icon [icon]=\\\"faUser\\\" [fixedWidth]=\\\"true\\\"></fa-icon></span>\\n                    </span>\\n                    <input\\n                        type=\\\"text\\\"\\n                        class=\\\"form-control\\\"\\n                        name=\\\"email\\\"\\n                        [placeholder]=\\\"'common.email' | translate\\\"\\n                        autocomplete=\\\"username\\\"\\n                        [(ngModel)]=\\\"credentials.email\\\"\\n                        required\\n                    />\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\"><fa-icon [icon]=\\\"faLockAlt\\\" [fixedWidth]=\\\"true\\\"></fa-icon></span>\\n                    </span>\\n                    <input\\n                        type=\\\"password\\\"\\n                        class=\\\"form-control\\\"\\n                        name=\\\"password\\\"\\n                        [placeholder]=\\\"'common.password' | translate\\\"\\n                        autocomplete=\\\"current-password\\\"\\n                        [(ngModel)]=\\\"credentials.password\\\"\\n                        required\\n                    />\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <button\\n                    type=\\\"submit\\\"\\n                    class=\\\"btn btn-primary btn-lg btn-block e2e-login-btn\\\"\\n                    [ngClass]=\\\"{ loading: isLoading }\\\"\\n                    [disabled]=\\\"isLoading\\\"\\n                >\\n                    {{ 'common.log-in' | translate }}\\n                </button>\\n            </div>\\n            <div class=\\\"form-group text-center mb-0\\\">\\n                <a class=\\\"e2e-forgot-password-link\\\" [routerLink]=\\\"['/login/forgot-password']\\\">{{ 'common.forgot-password' | translate }}?</a>\\n            </div>\\n        </form>\\n        <form name=\\\"formTwoFactor\\\" class=\\\"form-validation\\\" (ngSubmit)=\\\"submit()\\\" autocomplete=\\\"false\\\" novalidate *ngIf=\\\"showTwoFactorForm\\\">\\n            <div class=\\\"alert alert-login alert-info\\\">\\n                <b>{{ 'common.two-factor-is-enabled' | translate }}</b> {{ 'common.please-enter-the-current-code' | translate }}\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">\\n                            <fa-icon [icon]=\\\"faMobile\\\"></fa-icon>\\n                        </span>\\n                    </span>\\n                    <input\\n                        type=\\\"text\\\"\\n                        minlength=\\\"6\\\"\\n                        maxlength=\\\"6\\\"\\n                        class=\\\"form-control\\\"\\n                        name=\\\"twoFactorCode\\\"\\n                        [placeholder]=\\\"'common.verification-code' | translate\\\"\\n                        [(ngModel)]=\\\"twoFactorCode\\\"\\n                        [focus]=\\\"true\\\"\\n                        required\\n                    />\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-lg btn-block\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n                    {{ 'common.verify' | translate }}\\n                </button>\\n            </div>\\n            <div class=\\\"form-group text-center mb-0\\\">\\n                <a href (click)=\\\"revert(); $event.preventDefault()\\\">{{ 'common.back-to-login' | translate }}</a>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n\";","export default \"<div class=\\\"card shadow b-a-0\\\">\\n    <div class=\\\"card-body\\\">\\n        <h2 class=\\\"text-primary mb-1\\\">{{ 'common.restore-password' | translate }}</h2>\\n        <p class=\\\"mb-3 text-gray\\\">{{ 'common.choose-new-password' | translate }}</p>\\n        <form\\n            #passwordForm=\\\"ngForm\\\"\\n            class=\\\"form-validation\\\"\\n            (ngSubmit)=\\\"submit()\\\"\\n            [ngClass]=\\\"{ 'ng-submitted': passwordForm.submitted }\\\"\\n            autocomplete=\\\"false\\\"\\n            novalidate\\n        >\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">\\n                            <fa-icon [icon]=\\\"faLockAlt\\\"></fa-icon>\\n                        </span>\\n                    </span>\\n                    <input\\n                        type=\\\"password\\\"\\n                        class=\\\"form-control\\\"\\n                        [placeholder]=\\\"'common.enter-new-password' | translate\\\"\\n                        [(ngModel)]=\\\"password\\\"\\n                        name=\\\"password\\\"\\n                        autocomplete=\\\"new-password\\\"\\n                        #passwordInput=\\\"ngModel\\\"\\n                        [passwordStrength]=\\\"requiredPasswordStrength\\\"\\n                        (onEntropyChange)=\\\"passwordStrength = $event\\\"\\n                        required\\n                    />\\n                </div>\\n                <div class=\\\"mt-2\\\">\\n                    <password-strength-bar [requiredStrength]=\\\"requiredPasswordStrength\\\" [strength]=\\\"passwordStrength\\\"></password-strength-bar>\\n                </div>\\n                <div *ngIf=\\\"passwordInput.invalid && (passwordForm.submitted || passwordInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"passwordInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"passwordInput?.errors?.weakPassword\\\">\\n                        {{ 'common.password-is-too-weak' | translate }}\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"input-group input-group-lg\\\">\\n                    <span class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">\\n                            <fa-icon [icon]=\\\"faSyncAlt\\\"></fa-icon>\\n                        </span>\\n                    </span>\\n                    <input\\n                        type=\\\"password\\\"\\n                        class=\\\"form-control\\\"\\n                        [placeholder]=\\\"'common.repeat-your-password' | translate\\\"\\n                        [(ngModel)]=\\\"repeatedPassword\\\"\\n                        name=\\\"repeatedPassword\\\"\\n                        autocomplete=\\\"off\\\"\\n                        #repeatedPasswordInput=\\\"ngModel\\\"\\n                        [matchPassword]=\\\"password\\\"\\n                        required\\n                    />\\n                </div>\\n                <div *ngIf=\\\"repeatedPasswordInput.invalid && (passwordForm.submitted || repeatedPasswordInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPasswordInput?.errors?.required\\\">\\n                        {{ 'common.this-is-required' | translate }}\\n                    </div>\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPasswordInput?.errors?.matchPassword\\\">\\n                        {{ 'common.password-do-not-match' | translate }}\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-lg btn-block\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n                    {{ 'common.change-password' | translate }}\\n                </button>\\n            </div>\\n            <div class=\\\"form-group text-center mb-0\\\">\\n                <a class=\\\"px-0\\\" [routerLink]=\\\"['/login']\\\">{{ 'common.back-to-login' | translate }}</a>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n\";","import { Component, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { ActivatedRoute } from '@angular/router'\nimport { faLockAlt, faMobile, faUser } from '@fortawesome/pro-light-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport * as Sentry from '@sentry/browser'\nimport { throwError } from 'rxjs'\nimport { catchError, flatMap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { AlertService } from '../../common/services/alert.service'\nimport { LoginRedirectService } from '../../common/services/login-redirect.service'\nimport { LoginService } from '../../common/services/login.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { LoginAlertsService } from '../login-alerts.service'\n\nexport interface Credentials {\n    email?: string\n    password?: string\n    refreshToken?: string\n}\n\n@Component({\n    selector: 'login-form',\n    templateUrl: 'login-form.component.html',\n})\nexport class LoginFormComponent {\n    public credentials: Credentials = {}\n    public twoFactorCode?: string\n    @ViewChild('loginForm')\n    public loginForm: NgForm\n    public isLoading = false\n    public showTwoFactorForm: boolean\n    public faLockAlt = faLockAlt\n    public faUser = faUser\n    public faMobile = faMobile\n    public displayName = environment.displayName\n\n    constructor(\n        private toastr: ToastrService,\n        public alertService: AlertService,\n        private loginService: LoginService,\n        private loginAlerts: LoginAlertsService,\n        private redirectService: LoginRedirectService,\n        private route: ActivatedRoute,\n        public translate: TranslateService\n    ) {}\n\n    public submit(): void {\n        this.isLoading = true\n        this.loginService\n            .login({ twoFactorCode: this.twoFactorCode, ...this.credentials, email: this.credentials.email?.trim() })\n            .pipe(\n                flatMap(() => this.redirectService.redirect(this.route.snapshot, true)),\n                catchError(error => {\n                    for (const disposable of this.loginAlerts.disposables) {\n                        disposable.dispose()\n                    }\n                    // Two Factor auth is enabled\n                    if (error.status === 401 && error.name === 'Require2FACodeError') {\n                        // ask for 2f code and repeat submit\n                        this.showTwoFactorForm = true\n                    } else {\n                        if (!this.showTwoFactorForm) {\n                            this.credentials.password = ''\n                        }\n                        this.loginAlerts.disposables.add(this.alertService.add(error))\n                    }\n                    this.isLoading = false\n                    return throwError(error)\n                })\n            )\n            .subscribe(() => {\n                this.toastr.success(\n                    `${this.translate.instant('login-form.your-login-has-been-approved')}`,\n                    `${this.translate.instant('login-form.server-authentication')}`\n                )\n                if (window.SENTRY_DSN) {\n                    Sentry.addBreadcrumb({\n                        category: 'auth',\n                        message: 'Authenticated user ' + this.credentials.email,\n                        level: Sentry.Severity.Info,\n                    })\n                }\n            })\n    }\n\n    /* Resets the form to initial state */\n    public revert(): void {\n        if (this.isLoading) {\n            return\n        }\n        this.credentials = {}\n        this.showTwoFactorForm = false\n    }\n}\n","import { Component, OnDestroy } from '@angular/core'\nimport { environment } from 'src/environments/environment'\nimport { LoginAlertsService } from './login-alerts.service'\n\n@Component({\n    selector: 'login',\n    templateUrl: 'login.component.html',\n})\nexport class LoginComponent implements OnDestroy {\n    public appName = environment.appName\n\n    constructor(private loginAlerts: LoginAlertsService) {}\n\n    public ngOnDestroy(): void {\n        for (const disposable of this.loginAlerts.disposables) {\n            disposable.dispose()\n            this.loginAlerts.disposables.delete(disposable)\n        }\n    }\n\n    public getLogo(): string {\n        switch (environment.appName) {\n            case 'birex':\n                return '/img/brand/logo-white-vertical.svg'\n            default:\n                return '/img/brand/logo-white-horizontal.svg'\n        }\n    }\n}\n"],"sourceRoot":"webpack:///"}