{"version":3,"sources":["./src/app/common/trades/trade-quote-modal.component.html","./src/app/common/trades/trade-feed.component.ts","./src/app/common/trades/trades.module.ts","./src/app/common/trades/trade-quote-modal.component.ts","./src/app/common/trades/trade-form.component.ts","./src/app/common/trades/trade-feed.component.html","./src/app/common/trades/trade-form.component.html"],"names":[],"mappings":"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","file":"default~admin-admin-module~user-trades-user-trades-module.js","sourcesContent":["export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">Review and Execute</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    <table class=\\\"table table-striped table-borderless mb-0\\\">\\n        <tbody>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Precious Metal Type</th>\\n                <td>{{ $any(symbolsMap)[trade.symbol] }}</td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Transaction Type</th>\\n                <td class=\\\"text-capitalize\\\">{{ trade.side }}</td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">{{ 'common.spot-price' | translate }}</th>\\n                <td>{{ trade.price | amount: 2 }} {{ counterCurrency }}</td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Value/<br />Troy Ounce</th>\\n                <td>{{ total | amount: 2 }} {{ counterCurrency }}<br />{{ trade.quantity | amount: 7 }} {{ baseCurrency }}</td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Transaction Fee</th>\\n                <td>\\n                    <span>{{ trade.fee | amount: 2 }} {{ counterCurrency }} </span>\\n                </td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">GST</th>\\n                <td>\\n                    <span>{{ trade.gst | amount: 2 }} {{ counterCurrency }} </span>\\n                </td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">{{ 'common.grand-total' | translate }}</th>\\n                <td class=\\\"font-weight-bold\\\" [ngClass]=\\\"trade.side === 'BUY' ? 'text-primary' : 'text-danger'\\\">\\n                    {{ trade.total | amount: 2 }} {{ counterCurrency }}\\n                </td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Spot Price Refresh Timer</th>\\n                <td><countdown #cd [config]=\\\"{ leftTime: expiry, format: 'ss' }\\\" (event)=\\\"onCountdownEvent($event)\\\"></countdown> seconds</td>\\n            </tr>\\n        </tbody>\\n    </table>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n    <button type=\\\"button\\\" class=\\\"btn\\\" [ngClass]=\\\"trade.side === 'BUY' ? 'btn-primary' : 'btn-danger'\\\" (click)=\\\"onExecute.emit()\\\">\\n        <span class=\\\"text-capitalize\\\">{{ trade.side }}</span> {{ trade.quantity | amount: 7 }} {{ baseCurrency }}\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"activeModal.dismiss()\\\">Cancel</button>\\n</div>\\n\";","import { HttpClient } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit } from '@angular/core'\nimport { Subscription, timer } from 'rxjs'\nimport { switchMap } from 'rxjs/operators'\nimport { FeedResponse } from '../api-interfaces'\n\n@Component({\n    selector: 'trade-feed',\n    templateUrl: 'trade-feed.component.html',\n})\nexport class TradeFeedComponent implements OnInit, OnDestroy {\n    public feed: Record<string, FeedResponse> = {}\n    private subscriptions = new Subscription()\n\n    constructor(private http: HttpClient) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            timer(1, 10 * 1000)\n                .pipe(switchMap(() => this.http.get<Record<string, FeedResponse>>('/trades/feed')))\n                .subscribe(feed => {\n                    this.feed = feed\n                })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { IonicModule } from '@ionic/angular'\nimport { CountdownModule } from 'ngx-countdown'\nimport { CommonModule } from '../common.module'\nimport { TradeFeedComponent } from './trade-feed.component'\nimport { TradeFormComponent } from './trade-form.component'\nimport { TradeQuoteModalComponent } from './trade-quote-modal.component'\n\n@NgModule({\n    declarations: [TradeFormComponent, TradeQuoteModalComponent, TradeFeedComponent],\n    exports: [TradeFormComponent, TradeFeedComponent],\n    imports: [CommonModule, IonicModule, CountdownModule],\n})\nexport class TradesModule {}\n","import { AfterViewInit, Component, EventEmitter, OnChanges, OnInit, ViewChild } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport BigNumber from 'bignumber.js'\nimport differenceInSeconds from 'date-fns/differenceInSeconds'\nimport { CountdownComponent } from 'ngx-countdown'\nimport { RequestQuoteResponse } from './trade-form.component'\n\n@Component({\n    selector: 'trade-quote-modal',\n    templateUrl: 'trade-quote-modal.component.html',\n})\nexport class TradeQuoteModalComponent implements OnInit, OnChanges, AfterViewInit {\n    public trade: RequestQuoteResponse\n    public expiry: number\n    public onExecute = new EventEmitter<void>()\n    public onCountdown = new EventEmitter<void>()\n    public symbolsMap = {\n        'AU/USD': 'Gold Troy Ounce',\n        'AG/USD': 'Silver Troy Ounce',\n    }\n\n    @ViewChild('cd', { static: false })\n    public countdown: CountdownComponent\n\n    constructor(public activeModal: NgbActiveModal) {}\n\n    public ngOnInit(): void {\n        this.expiry = differenceInSeconds(new Date(this.trade.expiryDate), new Date())\n    }\n\n    public ngOnChanges(): void {\n        this.expiry = differenceInSeconds(new Date(this.trade.expiryDate), new Date())\n        if (this.countdown) {\n            this.countdown.restart()\n        }\n    }\n\n    public ngAfterViewInit(): void {\n        this.countdown.begin()\n    }\n\n    public get baseCurrency(): string {\n        const parts = this.trade.symbol!.split('/')\n        return parts[0]\n    }\n\n    public get counterCurrency(): string {\n        const parts = this.trade.symbol!.split('/')\n        return parts[1]\n    }\n\n    public get total(): string {\n        return new BigNumber(this.trade.price).times(this.trade.quantity).toFixed(2)\n    }\n\n    public onCountdownEvent(event: any): void {\n        if (event.action === 'done') {\n            this.onCountdown.emit()\n        }\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http'\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { faCircle } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Observable } from 'rxjs'\nimport { debounceTime, distinctUntilChanged, finalize, map, switchMap } from 'rxjs/operators'\nimport { WalletsService } from 'src/app/store/wallets/wallets.service'\nimport { IUser, Trade, TradeSide, TradeSymbol } from '../api-interfaces'\nimport { SecurityCheckService } from '../security-check/security-check.service'\nimport { SessionService } from '../services/session.service'\nimport { ToastrService } from '../services/toastr.service'\nimport { TradeQuoteModalComponent } from './trade-quote-modal.component'\n\nexport interface RequestQuoteResponse {\n    side: TradeSide\n    symbol: TradeSymbol\n    price: string\n    quantity: string\n    expiryDate: number\n    fee: string\n    gst: string\n    total: string\n    hmac: string\n}\n\n@Component({\n    selector: 'trade-form',\n    templateUrl: 'trade-form.component.html',\n})\nexport class TradeFormComponent {\n    public faCircle = faCircle\n    public symbols: TradeSymbol[] = ['AU/USD', 'AG/USD']\n    public symbolsMap = {\n        'AU/USD': 'Gold Troy Ounce',\n        'AG/USD': 'Silver Troy Ounce',\n    }\n    public trade: Partial<Trade> = {\n        side: 'BUY',\n        symbol: this.symbols[0],\n    }\n    public user: IUser\n    @ViewChild('tradeForm')\n    public form: NgForm\n    @Output()\n    public onTrade = new EventEmitter<void>()\n\n    public isLoading = false\n    public isTradingInAmount = true\n    @Input()\n    public isUserSelectAllowed = false\n\n    public userAutocomplete = new EventEmitter<string>()\n    public usersStream = this.userAutocomplete.pipe(\n        distinctUntilChanged(),\n        debounceTime(200),\n        switchMap(search =>\n            this.http.get<IUser[]>('/users', {\n                params: new HttpParams().set('limit', '25').set('search', search),\n            })\n        ),\n        map(results => results.map(user => ({ user })))\n    )\n\n    constructor(\n        private ngbModal: NgbModal,\n        private http: HttpClient,\n        private session: SessionService,\n        private toastr: ToastrService,\n        private walletsService: WalletsService,\n        private securityCheckService: SecurityCheckService,\n        public translate: TranslateService\n    ) {}\n\n    public requestQuote(): Observable<RequestQuoteResponse> {\n        const body: Pick<Trade, 'side' | 'symbol'> & { userId: string; amount?: string; quantity?: string } = {\n            side: this.trade.side!,\n            symbol: this.trade.symbol!,\n            userId: this.user?.id ?? this.session.user.id,\n        }\n        if (this.isTradingInAmount) {\n            body.amount = this.trade.quantity\n        } else {\n            body.quantity = this.trade.quantity\n        }\n        return this.http.post<RequestQuoteResponse>('/trades/request-for-quote', body)\n    }\n\n    public submitRequestQuote(): void {\n        if (this.form.invalid) {\n            return\n        }\n        this.securityCheckService.getScopePermission('banking').subscribe(() => {\n            this.isLoading = true\n            this.requestQuote()\n                .pipe(\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(trade => {\n                    this.openQuoteModal(trade)\n                })\n        })\n    }\n\n    public executeTrade(trade: RequestQuoteResponse): void {\n        this.isLoading = true\n        this.http\n            .post<Trade>('/trades', {\n                ...trade,\n                userId: this.user?.id ?? this.session.user.id,\n            })\n            .pipe(\n                finalize(() => {\n                    this.isLoading = false\n                })\n            )\n            .subscribe(() => {\n                this.toastr.success(this.translate.instant('trade-form.trade-executed'))\n                this.onTrade.emit()\n                this.walletsService.fetch()\n                this.form.resetForm({ symbol: this.trade.symbol, side: this.trade.side, quantity: null })\n            })\n    }\n\n    public openQuoteModal(trade: RequestQuoteResponse): void {\n        const modal = this.ngbModal.open(TradeQuoteModalComponent, {\n            windowClass: trade.side === 'BUY' ? 'modal-primary' : 'modal-danger',\n            backdrop: 'static',\n        })\n        const component = modal.componentInstance as TradeQuoteModalComponent\n        component.trade = trade\n        component.onExecute.subscribe(() => {\n            this.executeTrade(component.trade)\n            modal.close()\n        })\n        component.onCountdown.subscribe(() => {\n            this.requestQuote().subscribe(t => {\n                component.trade = t\n                component.countdown.restart()\n            })\n        })\n    }\n\n    public get baseCurrency(): string {\n        const parts = this.trade.symbol!.split('/')\n        return parts[0]\n    }\n}\n","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12\\\">\\n        <div class=\\\"prices prices-gold p-3\\\">\\n            <h5>Gold Troy Ounce</h5>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col\\\">\\n                    <p class=\\\"mb-1\\\">SELL</p>\\n                    <h3 *ngIf=\\\"feed.gold; else spinner\\\">{{ feed.gold.sell + '' | amount: 2 }} USD</h3>\\n                </div>\\n                <div class=\\\"col\\\">\\n                    <p class=\\\"mb-1\\\">BUY</p>\\n                    <h3 *ngIf=\\\"feed.gold; else spinner\\\">{{ feed.gold.buy + '' | amount: 2 }} USD</h3>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"col-lg-12\\\">\\n        <div class=\\\"prices prices-silver p-3\\\">\\n            <h5>Silver Troy Ounce</h5>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col\\\">\\n                    <p class=\\\"mb-1\\\">SELL</p>\\n                    <h3 *ngIf=\\\"feed.silver; else spinner\\\">{{ feed.silver.sell + '' | amount: 2 }} USD</h3>\\n                </div>\\n                <div class=\\\"col\\\">\\n                    <p class=\\\"mb-1\\\">BUY</p>\\n                    <h3 *ngIf=\\\"feed.silver; else spinner\\\">{{ feed.silver.buy + '' | amount: 2 }} USD</h3>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<ng-template #spinner>\\n    <ion-spinner name=\\\"dots\\\"></ion-spinner>\\n</ng-template>\\n\";","export default \"<form\\n    class=\\\"form-validation\\\"\\n    (ngSubmit)=\\\"submitRequestQuote()\\\"\\n    #tradeForm=\\\"ngForm\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': tradeForm.submitted }\\\"\\n    autocomplete=\\\"false\\\"\\n    novalidate\\n>\\n    <div *ngIf=\\\"isUserSelectAllowed\\\" class=\\\"form-group\\\">\\n        <label class=\\\"font-md\\\">{{ 'common.user' | translate }}</label>\\n        <ng-select\\n            name=\\\"user\\\"\\n            [placeholder]=\\\"'common.select-user' | translate\\\"\\n            [(ngModel)]=\\\"user\\\"\\n            bindValue=\\\"user\\\"\\n            #userInput=\\\"ngModel\\\"\\n            [items]=\\\"usersStream | async\\\"\\n            [typeahead]=\\\"userAutocomplete\\\"\\n            [clearable]=\\\"false\\\"\\n            required\\n        >\\n            <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                <div class=\\\"d-flex align-items-center justify-content-center\\\">\\n                    <user-display *ngIf=\\\"item\\\" [user]=\\\"item.user\\\"></user-display>\\n                    <small *ngIf=\\\"item.user\\\" class=\\\"text-gray ml-1\\\">{{ item.user.email }}</small>\\n                </div>\\n            </ng-template>\\n            <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                <div class=\\\"d-flex align-items-center justify-content-center\\\">\\n                    <user-avatar *ngIf=\\\"item\\\" [user]=\\\"item.user\\\" size=\\\"sm\\\" elementClass=\\\"mr-2\\\"></user-avatar>\\n                    <div class=\\\"w-100\\\">\\n                        <ng-container *ngIf=\\\"item.user\\\">\\n                            <div>{{ item.user.name }}</div>\\n                            <small class=\\\"text-gray\\\">{{ item.user.email }}</small>\\n                        </ng-container>\\n                    </div>\\n                </div>\\n            </ng-template>\\n        </ng-select>\\n        <div *ngIf=\\\"userInput.invalid && (tradeForm.submitted || userInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"userInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label class=\\\"font-md\\\">{{ 'common.transaction-type' | translate }}</label>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col\\\">\\n                <div class=\\\"custom-control custom-radio btn btn-outline-secondary btn-lg bg-transparent\\\" (click)=\\\"trade.side = 'SELL'\\\">\\n                    <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" id=\\\"side-sell\\\" name=\\\"side\\\" value=\\\"SELL\\\" [(ngModel)]=\\\"trade.side\\\" />\\n                    <label class=\\\"custom-control-label text-secondary font-weight-normal\\\" for=\\\"side-sell\\\">{{\\n                        'common.sell' | translate | uppercase\\n                    }}</label>\\n                </div>\\n            </div>\\n            <div class=\\\"col\\\">\\n                <div class=\\\"custom-control custom-radio btn btn-outline-primary btn-lg bg-transparent\\\" (click)=\\\"trade.side = 'BUY'\\\">\\n                    <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" id=\\\"side-buy\\\" name=\\\"side\\\" value=\\\"BUY\\\" [(ngModel)]=\\\"trade.side\\\" />\\n                    <label class=\\\"custom-control-label text-primary font-weight-normal\\\" for=\\\"side-buy\\\">{{\\n                        'common.buy' | translate | uppercase\\n                    }}</label>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label class=\\\"font-md\\\" for=\\\"symbol\\\">{{ 'common.precious-metal-type' | translate }}</label>\\n        <ng-select\\n            class=\\\"ng-select-lg\\\"\\n            name=\\\"symbol\\\"\\n            [placeholder]=\\\"'common.select-symbol' | translate\\\"\\n            [items]=\\\"symbols\\\"\\n            [searchable]=\\\"false\\\"\\n            [clearable]=\\\"false\\\"\\n            [(ngModel)]=\\\"trade.symbol\\\"\\n            #symbol=\\\"ngModel\\\"\\n            required\\n        >\\n            <ng-template ng-label-tmp let-item=\\\"item\\\"> {{ $any(symbolsMap)[item] }} </ng-template>\\n            <ng-template ng-option-tmp let-item=\\\"item\\\"> {{ $any(symbolsMap)[item] }} </ng-template>\\n        </ng-select>\\n        <div *ngIf=\\\"symbol.invalid && (tradeForm.submitted || symbol.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"symbol?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <div class=\\\"d-flex justify-content-between\\\">\\n            <label class=\\\"font-md\\\" for=\\\"quantity\\\">\\n                {{ (isTradingInAmount ? 'common.value' : 'common.troy-ounce') | translate }}\\n            </label>\\n            <a href (click)=\\\"isTradingInAmount = !isTradingInAmount; $event.preventDefault()\\\">{{\\n                isTradingInAmount ? ('common.switch-to' | translate) + baseCurrency : ('common.switch-to' | translate) + 'USD'\\n            }}</a>\\n        </div>\\n        <div class=\\\"input-group\\\">\\n            <input\\n                type=\\\"number\\\"\\n                numeric\\n                [decimals]=\\\"isTradingInAmount ? 2 : 7\\\"\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"quantity\\\"\\n                name=\\\"quantity\\\"\\n                [(ngModel)]=\\\"trade.quantity\\\"\\n                #amountInput=\\\"ngModel\\\"\\n                [placeholder]=\\\"isTradingInAmount ? '0.00' : '0.0000000'\\\"\\n                [min]=\\\"isTradingInAmount ? '1' : '0.0000001'\\\"\\n                [max]=\\\"'100000'\\\"\\n                emptyToNull\\n                required\\n            />\\n            <div class=\\\"input-group-append\\\">\\n                <span class=\\\"input-group-text font-lg\\\">{{ isTradingInAmount ? 'USD' : baseCurrency }}</span>\\n            </div>\\n        </div>\\n        <div *ngIf=\\\"amountInput.invalid && (tradeForm.submitted || amountInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amountInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amountInput?.errors?.min\\\">Minimum is 1 USD or equivalent.</div>\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amountInput?.errors?.max\\\">Maximum is 100,000 USD or equivalent.</div>\\n        </div>\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-lg btn-block\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n        {{ 'common.proceed' | translate }}\\n    </button>\\n</form>\\n\";"],"sourceRoot":"webpack:///"}