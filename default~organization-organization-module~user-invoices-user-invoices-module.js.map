{"version":3,"sources":["./src/app/services/user-invoices/user-invoice-form/user-invoice-form.component.ts","./src/app/services/user-invoices/user-invoices.component.html","./src/app/services/user-invoices/user-invoice-form/user-invoice-form.component.html","./src/app/services/user-invoices/user-invoices-routing.module.ts","./src/app/services/user-invoices/user-invoices.module.ts","./src/app/services/user-invoices/user-invoices.component.ts"],"names":[],"mappings":"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","file":"default~organization-organization-module~user-invoices-user-invoices-module.js","sourcesContent":["import { HttpClient } from '@angular/common/http'\nimport {\n    Component,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { ActivatedRoute } from '@angular/router'\nimport { faChevronLeft, faQuestionCircle, faSave, faTrash } from '@fortawesome/pro-light-svg-icons'\nimport { NgbActiveModal, NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { find } from 'lodash'\nimport { Subscription } from 'rxjs'\nimport { finalize } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { IContact, Paginated } from '../../../common/api-interfaces'\nimport { convertPercentage } from '../../../common/common.mixin'\nimport { ContactBookComponent, openContactBook } from '../../../common/contact-book/contact-book.component'\nimport { countriesSortedByName } from '../../../common/countries'\nimport { percentageCurrencyMaskOptions } from '../../../common/currency-mask.config'\nimport { InvoiceItemFormComponent } from '../../../common/invoices/invoice-item-form/invoice-item-form.component'\nimport { Currency } from '../../../common/models/accounting/currency.model'\nimport { InvoiceItem } from '../../../common/models/accounting/invoice-item.model'\nimport { Invoice } from '../../../common/models/accounting/invoice.model'\nimport { User } from '../../../common/models/core/user.model'\nimport { InvoiceService } from '../../../common/services/accounting/invoice.service'\nimport { SessionService } from '../../../common/services/session.service'\nimport { ToastrService } from '../../../common/services/toastr.service'\n\n@Component({\n    selector: 'user-invoice-form',\n    templateUrl: 'user-invoice-form.component.html',\n})\nexport class UserInvoiceFormComponent implements OnInit, OnDestroy {\n    public faQuestionCircle = faQuestionCircle\n    public displayName = environment.displayName\n    @Output()\n    public readonly onSave = new EventEmitter<void>()\n    public invoice: Invoice\n    public currencies: Currency[] = []\n    public items: InvoiceItem[] = [new InvoiceItem()]\n    @Input()\n    public invoicee: string\n    @Input()\n    public lockRecipient = false\n    public dueDate: string\n    public editorModules = {\n        toolbar: [\n            ['bold', 'italic', 'underline'],\n            [{ list: 'bullet' }],\n            [{ indent: '-1' }, { indent: '+1' }],\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\n            [{ align: [] as string[] }],\n            ['clean'],\n            ['link'],\n        ],\n    }\n    @ViewChild('invoiceForm')\n    public form: NgForm\n    @ViewChildren('itemsForm')\n    public itemsForm: QueryList<InvoiceItemFormComponent>\n\n    public faChevronLeft = faChevronLeft\n    public faTrash = faTrash\n    public faSave = faSave\n    public isLoading = false\n    public isTermsCollapsed = true\n\n    public percentageCurrencyMaskOptions = percentageCurrencyMaskOptions\n    public convertPercentage = convertPercentage\n\n    public valueAddedTax: string\n\n    @Input()\n    public hideModal: boolean\n\n    @Input()\n    public showContacts = true\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private ngbModal: NgbModal,\n        private session: SessionService,\n        private http: HttpClient,\n        private toastr: ToastrService,\n        private invoices: InvoiceService,\n        private route: ActivatedRoute,\n        public activeModal: NgbActiveModal,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.invoice = new Invoice()\n        this.invoice.items = this.items\n        this.invoice.valueAddedTax = '0.00'\n        this.valueAddedTax = this.invoice.valueAddedTax\n        this.subscriptions.add(\n            this.http\n                .get<Paginated<Currency>>('/currencies', {\n                    params: {\n                        limit: 100 + '',\n                        'filter.type': 'or:fiat,crypto,metal',\n                    },\n                })\n                .subscribe(response => {\n                    this.currencies = response.data\n                    const currency = find(this.currencies, { code: this.session.user.preferredCurrency.code })\n                    if (currency) {\n                        this.invoice.currency = currency\n                    } else if (this.currencies.length > 0) {\n                        this.invoice.currency = this.currencies[0]\n                    }\n                })\n        )\n        if (this.route.snapshot.queryParamMap.has('recipient')) {\n            this.invoicee = this.route.snapshot.queryParamMap.get('recipient')!\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        for (const form of this.itemsForm.toArray()) {\n            form.submit()\n        }\n        if (this.form.invalid || this.itemsForm.some(form => !form.isValid())) {\n            return\n        }\n        const body = {\n            subject: this.invoice.subject,\n            currency: {\n                code: this.invoice.currency.code,\n            } as Currency,\n            valueAddedTax: this.invoice.valueAddedTax,\n            dueDate: `${this.dueDate.slice(4)}-${this.dueDate.slice(2, 4)}-${this.dueDate.slice(0, 2)}`,\n            invoicer: this.session.user\n                ? ({\n                      id: this.session.user.id,\n                  } as User)\n                : null,\n            invoicee: {\n                accountNumber: this.invoicee.trim().replace(/\\s/g, ''),\n            } as User,\n            items: this.items.map(item => Object.assign(item, { price: item.price.toString() })),\n            terms: !this.isTermsCollapsed ? this.invoice.terms : null,\n        }\n        this.isLoading = true\n        this.subscriptions.add(\n            this.invoices\n                .create(body)\n                .pipe(\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(invoice => {\n                    this.invoice = invoice\n                    this.toastr.success(this.translate.instant('common.invoice-created'))\n                    this.onSave.next()\n                })\n        )\n    }\n\n    public openContactBook(): void {\n        const modal = openContactBook(this.ngbModal, new User(this.session.user))\n        ;(modal.componentInstance as ContactBookComponent).onSelect.subscribe((contact: IContact) => {\n            this.invoicee = contact.counterUser.accountNumber\n            modal.close()\n        })\n    }\n\n    public addItem(): void {\n        this.items.push(new InvoiceItem())\n    }\n\n    public mapToCountry(code: string): string {\n        if (!code) {\n            return ''\n        }\n        const country = find(countriesSortedByName, { alpha2: code })\n        return country ? country.name : ''\n    }\n}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"container pt-page pb-3\\\">\\n        <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n            <div class=\\\"col-auto\\\">\\n                <h5 class=\\\"mb-0\\\">{{ 'common.invoices' | translate }}</h5>\\n            </div>\\n            <div class=\\\"col-auto d-flex justify-content-end\\\">\\n                <ol class=\\\"breadcrumb px-0\\\">\\n                    <li class=\\\"breadcrumb-item\\\">\\n                        <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                    </li>\\n                    <li class=\\\"breadcrumb-item active\\\">{{ 'common.invoices' | translate }}</li>\\n                </ol>\\n            </div>\\n        </div>\\n        <div class=\\\"row justify-content-between align-items-center\\\">\\n            <div class=\\\"col\\\">\\n                <button\\n                    type=\\\"button\\\"\\n                    class=\\\"btn mr-2\\\"\\n                    (click)=\\\"queryParams = getDefaultQuery(); searchEvent.next()\\\"\\n                    [ngClass]=\\\"isActiveQuery(getDefaultQuery()) ? 'btn-primary' : 'btn-primary-air'\\\"\\n                >\\n                    {{ 'common.all' | translate }}\\n                </button>\\n                <div class=\\\"btn-group mr-2\\\">\\n                    <button\\n                        type=\\\"button\\\"\\n                        class=\\\"btn\\\"\\n                        (click)=\\\"queryParams['status']['or'] = ['pending']; searchEvent.next()\\\"\\n                        [ngClass]=\\\"isActiveQuery({ status: { or: ['pending'] } }) ? 'btn-primary' : 'btn-primary-air'\\\"\\n                    >\\n                        {{ 'common.pending' | translate }}\\n                    </button>\\n                    <button\\n                        type=\\\"button\\\"\\n                        class=\\\"btn\\\"\\n                        (click)=\\\"queryParams['status']['or'] = ['completed']; searchEvent.next()\\\"\\n                        [ngClass]=\\\"isActiveQuery({ status: { or: ['completed'] } }) ? 'btn-primary' : 'btn-primary-air'\\\"\\n                    >\\n                        {{ 'common.completed' | translate }}\\n                    </button>\\n                </div>\\n            </div>\\n            <div class=\\\"col-auto pt-3 pt-md-0\\\">\\n                <button class=\\\"btn btn-primary-air e2e-create-invoice-btn\\\" (click)=\\\"$event.preventDefault(); openCreateInvoice(user)\\\">\\n                    <fa-icon class=\\\"mr-1\\\" [icon]=\\\"faPlus\\\"></fa-icon> {{ 'common.new-invoice' | translate }}\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"container e2e-user-invoices\\\">\\n        <div class=\\\"card\\\">\\n            <div class=\\\"card-header b-b-0\\\">{{ 'common.invoices' | translate }}</div>\\n            <div class=\\\"table-responsive\\\">\\n                <table class=\\\"table table-hover table-card\\\">\\n                    <thead class=\\\"thead-light\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.recipient' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['invoicee', 'name']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['invoicee', 'name'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['invoicee', 'name']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\" class=\\\"text-right\\\">\\n                                {{ 'common.amount' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['amount']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['amount'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['amount']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.status' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.due-date' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['dueDate']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['dueDate'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['dueDate']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'user-invoices.sent-at' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['createdAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['createdAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['createdAt']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\"></th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                            <ng-container *ngIf=\\\"items.length === 0; else rows\\\">\\n                                <tr>\\n                                    <td class=\\\"bg-white\\\" colspan=\\\"12\\\">\\n                                        <div class=\\\"mx-auto p-3 mt-2 mb-4 text-center max-width-sm\\\">\\n                                            <img src=\\\"/img/icons/file.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                                            <h4 class=\\\"mb-1\\\">{{ 'common.send-an-invoice' | translate }}</h4>\\n                                            <p class=\\\"mb-3 text-gray\\\">{{ 'common.need-to-invoice' | translate }}</p>\\n                                            <button type=\\\"button\\\" class=\\\"btn btn-primary-air btn-lg btn-block\\\" (click)=\\\"openCreateInvoice(user)\\\">\\n                                                {{ 'common.create-invoice' | translate }}\\n                                            </button>\\n                                        </div>\\n                                    </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-template #rows>\\n                                <tr *ngFor=\\\"let invoice of items\\\" (click)=\\\"openInvoice(invoice)\\\" class=\\\"clickable bg-white\\\">\\n                                    <th scope=\\\"row\\\">\\n                                        <div class=\\\"d-flex align-items-center\\\">\\n                                            <user-avatar\\n                                                [user]=\\\"isInvoicer(invoice, user) ? invoice.invoicee : invoice.invoicer\\\"\\n                                                size=\\\"sm\\\"\\n                                                elementClass=\\\"mr-3\\\"\\n                                            ></user-avatar>\\n                                            <div>\\n                                                <div>{{ invoice.subject }}</div>\\n                                                <div>\\n                                                    {{ (isInvoicer(invoice, user) ? 'common.to' : 'common.from') | translate }}\\n                                                    <span\\n                                                        class=\\\"text-primary\\\"\\n                                                        [innerHTML]=\\\"\\n                                                            isInvoicer(invoice, user)\\n                                                                ? buildAccountHolder(invoice.invoicee)\\n                                                                : buildAccountHolder(invoice.invoicer)\\n                                                        \\\"\\n                                                    ></span>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                    </th>\\n                                    <td class=\\\"text-right\\\" [ngClass]=\\\"isInvoicer(invoice, user) ? 'text-green' : 'text-danger'\\\">\\n                                        {{ (invoice.net | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}\\n                                    </td>\\n                                    <td>\\n                                        <span\\n                                            class=\\\"text-capitalize label\\\"\\n                                            [ngClass]=\\\"{\\n                                                'label-success': invoice.status === 'completed',\\n                                                'label-info': invoice.status === 'pending',\\n                                                'label-danger': invoice.status === 'cancelled'\\n                                            }\\\"\\n                                            >{{ invoice.status }}</span\\n                                        >\\n                                    </td>\\n                                    <td>{{ invoice.dueDate | date: 'mediumDate' }}</td>\\n                                    <td>{{ invoice.createdAt | date: 'medium' }}</td>\\n                                    <td class=\\\"action\\\">\\n                                        <button\\n                                            type=\\\"button\\\"\\n                                            class=\\\"btn btn-success btn-sm btn-block px-2 e2e-pay-invoice-btn\\\"\\n                                            (click)=\\\"$event.stopPropagation(); openPayModal(invoice.id)\\\"\\n                                            *ngIf=\\\"!isInvoicer(invoice, user) && invoice.status === 'pending'\\\"\\n                                        >\\n                                            {{ 'common.pay-now' | translate }}\\n                                        </button>\\n                                        <button\\n                                            type=\\\"button\\\"\\n                                            class=\\\"btn btn-danger btn-sm btn-block px-2 e2e-cancel-invoice-btn\\\"\\n                                            (click)=\\\"$event.stopPropagation(); cancel(invoice)\\\"\\n                                            *ngIf=\\\"isInvoicer(invoice, user) && invoice.status === 'pending'\\\"\\n                                            [ngClass]=\\\"{ loading: invoicesBeingCancelled.has(invoice.id) }\\\"\\n                                            [disabled]=\\\"invoicesBeingCancelled.has(invoice.id)\\\"\\n                                        >\\n                                            {{ 'common.cancel' | translate }}\\n                                        </button>\\n                                    </td>\\n                                </tr>\\n                                <tr *ngFor=\\\"let empty of fill\\\" class=\\\"fill\\\">\\n                                    <td colspan=\\\"12\\\">\\n                                        <div>&nbsp;</div>\\n                                        <span>&nbsp;</span>\\n                                    </td>\\n                                </tr>\\n                            </ng-template>\\n                        </ng-container>\\n                    </tbody>\\n                </table>\\n            </div>\\n        </div>\\n        <footer class=\\\"table-footer mb-3\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-6 col-md-8\\\">\\n                    <ng-select\\n                        [(ngModel)]=\\\"limit\\\"\\n                        dropdownPosition=\\\"auto\\\"\\n                        (change)=\\\"select(1)\\\"\\n                        [items]=\\\"limitOpts\\\"\\n                        [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                        [clearable]=\\\"false\\\"\\n                        [searchable]=\\\"false\\\"\\n                        required\\n                    >\\n                        <ng-template ng-label-tmp let-item=\\\"item\\\"\\n                            >{{ 'common.show' | translate }} {{ item }} {{ 'common.per-page' | translate }}</ng-template\\n                        >\\n                        <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                    </ng-select>\\n                </div>\\n                <div class=\\\"col-lg-18 col-md-16 d-flex justify-content-center justify-content-md-end mt-3 mt-md-0\\\">\\n                    <ngb-pagination\\n                        [(page)]=\\\"page\\\"\\n                        [collectionSize]=\\\"count\\\"\\n                        (pageChange)=\\\"select()\\\"\\n                        [pageSize]=\\\"limit\\\"\\n                        [maxSize]=\\\"4\\\"\\n                        [rotate]=\\\"false\\\"\\n                        [boundaryLinks]=\\\"true\\\"\\n                    >\\n                    </ngb-pagination>\\n                </div>\\n            </div>\\n        </footer>\\n    </div>\\n</ng-container>\\n\";","export default \"<form\\n    #invoiceForm=\\\"ngForm\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': invoiceForm.submitted }\\\"\\n    class=\\\"form-validation e2e-user-invoice-form\\\"\\n    (ngSubmit)=\\\"submit()\\\"\\n    novalidate\\n>\\n    <div class=\\\"modal-header\\\" *ngIf=\\\"!hideModal\\\">\\n        <h5 class=\\\"modal-title\\\">{{ 'common.send-invoice' | translate | sentenceCase }}</h5>\\n        <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss(); $event.preventDefault()\\\">&times;</button>\\n    </div>\\n    <div [ngClass]=\\\"{ 'modal-body': !hideModal, 'pb-0': !hideModal }\\\">\\n        <div class=\\\"form-group\\\">\\n            <div class=\\\"d-flex justify-content-between\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"invoicee\\\"\\n                    >{{ 'common.recipient' | translate }}\\n                    <a\\n                        href\\n                        (click)=\\\"$event.preventDefault()\\\"\\n                        [ngbPopover]=\\\"recipientContent\\\"\\n                        [popoverTitle]=\\\"recipientTitle\\\"\\n                        triggers=\\\"mouseenter:mouseleave\\\"\\n                        ><fa-icon [icon]=\\\"faQuestionCircle\\\"></fa-icon></a\\n                ></label>\\n                <a href (click)=\\\"$event.preventDefault(); openContactBook()\\\" *ngIf=\\\"showContacts\\\">{{ 'common.show-contacts' | translate }}</a>\\n            </div>\\n            <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"invoicee\\\"\\n                name=\\\"invoicee\\\"\\n                [(ngModel)]=\\\"invoicee\\\"\\n                [disabled]=\\\"lockRecipient\\\"\\n                #invoiceeInput=\\\"ngModel\\\"\\n                emptyToNull\\n                required\\n                recipientValidator\\n            />\\n            <div *ngIf=\\\"invoiceeInput.invalid && (invoiceForm.submitted || invoiceeInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"invoiceeInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"invoiceeInput?.errors?.invalidRecipient\\\">{{ 'common.invalid-recipient' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"form-control-label\\\" for=\\\"currency\\\">{{ 'common.subject' | translate }}</label>\\n            <input class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"invoice.subject\\\" id=\\\"subject\\\" name=\\\"subject\\\" #subject=\\\"ngModel\\\" required />\\n            <div *ngIf=\\\"subject.invalid && (invoiceForm.submitted || subject.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"subject?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"valueAddedTax\\\">VAT / GST</label>\\n            <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"valueAddedTax\\\"\\n                name=\\\"valueAddedTax\\\"\\n                [(ngModel)]=\\\"valueAddedTax\\\"\\n                (ngModelChange)=\\\"valueAddedTax && (invoice.valueAddedTax = convertPercentage(valueAddedTax))\\\"\\n                currencyMask\\n                [options]=\\\"percentageCurrencyMaskOptions\\\"\\n                #valueAddedTaxField=\\\"ngModel\\\"\\n                required\\n            />\\n            <div *ngIf=\\\"valueAddedTaxField.invalid && (invoiceForm.submitted || valueAddedTaxField.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"valueAddedTaxField?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"currency\\\">{{ 'common.currency' | translate }}</label>\\n                <ng-select\\n                    id=\\\"currency\\\"\\n                    name=\\\"currency\\\"\\n                    [(ngModel)]=\\\"invoice.currency\\\"\\n                    bindLabel=\\\"code\\\"\\n                    [items]=\\\"currencies\\\"\\n                    [clearable]=\\\"false\\\"\\n                    #currency=\\\"ngModel\\\"\\n                    autocomplete=\\\"false\\\"\\n                    aria-autocomplete=\\\"false\\\"\\n                    required\\n                ></ng-select>\\n                <div *ngIf=\\\"currency.invalid && (invoiceForm.submitted || currency.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currency?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label class=\\\"form-control-label\\\" for=\\\"dueDate\\\">{{ 'common.due-date' | translate | sentenceCase }}</label>\\n                <input\\n                    class=\\\"form-control\\\"\\n                    type=\\\"text\\\"\\n                    id=\\\"dueDate\\\"\\n                    name=\\\"dueDate\\\"\\n                    mask=\\\"00/00/0000\\\"\\n                    [(ngModel)]=\\\"dueDate\\\"\\n                    #dueDateInput=\\\"ngModel\\\"\\n                    required\\n                />\\n                <small class=\\\"form-text text-muted\\\">{{ 'common.format' | translate }}: dd/mm/yyyy</small>\\n                <div *ngIf=\\\"dueDateInput.invalid && (invoiceForm.submitted || dueDateInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"dueDateInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n        </div>\\n        <label class=\\\"form-control-label\\\">{{ 'common.items' | translate }}</label>\\n        <invoice-item-form *ngFor=\\\"let item of items; index as i\\\" [item]=\\\"item\\\" (onDelete)=\\\"items.splice(i, 1)\\\" #itemsForm></invoice-item-form>\\n        <div class=\\\"form-group d-flex justify-content-end\\\">\\n            <a class=\\\"e2e-add-invoice-item-btn\\\" href (click)=\\\"addItem(); $event.preventDefault()\\\">+ {{ 'common.add-item' | translate }}</a>\\n        </div>\\n        <div class=\\\"card\\\">\\n            <div class=\\\"card-body\\\">\\n                <div class=\\\"d-flex flex-column justify-content-end\\\">\\n                    <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                        <span>{{ 'common.subtotal' | translate }}</span>\\n                        <span>{{ (invoice.total | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span>\\n                    </div>\\n                    <div class=\\\"d-flex justify-content-between mb-1\\\">\\n                        <span>VAT ({{ invoice.valueAddedTax | percent }})</span>\\n                        <span>{{ (invoice.tax | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span>\\n                    </div>\\n                    <div class=\\\"d-flex justify-content-between\\\">\\n                        <span class=\\\"font-weight-bold\\\">Total</span>\\n                        <span class=\\\"font-weight-bold\\\"\\n                            >{{ (invoice.net | amount: invoice.currency?.decimalPlaces) || 0 }} {{ invoice.currency?.code }}</span\\n                        >\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <a href class=\\\"d-block mb-2 e2e-terms-toggle-btn\\\" (click)=\\\"isTermsCollapsed = !isTermsCollapsed; $event.preventDefault()\\\"\\n            >{{ isTermsCollapsed ? '+ ' + ('common.add' | translate) : '- ' + ('common.remove' | translate) }} {{ 'common.terms' | translate }}</a\\n        >\\n        <div class=\\\"mb-2\\\" [ngbCollapse]=\\\"isTermsCollapsed\\\">\\n            <label class=\\\"form-control-label font-md\\\">{{ 'common.terms' | translate }} ({{ 'common.optional' | translate }})</label>\\n            <quill-editor\\n                name=\\\"terms\\\"\\n                [(ngModel)]=\\\"invoice.terms\\\"\\n                [modules]=\\\"editorModules\\\"\\n                [placeholder]=\\\"'common.enter-your-terms' | translate\\\"\\n                [sanitize]=\\\"true\\\"\\n            ></quill-editor>\\n        </div>\\n    </div>\\n    <div [ngClass]=\\\"{ 'modal-footer': !hideModal, 'text-right': hideModal }\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-w-sm\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n            {{ 'common.send' | translate }}\\n        </button>\\n    </div>\\n</form>\\n\\n<ng-template #recipientTitle> {{ 'common.how-does-it-work' | translate }} </ng-template>\\n<ng-template #recipientContent>\\n    <p>{{ 'common.you-can-send-invoices-to-other' | translate: { value: displayName } }}</p>\\n    <p [innerHtml]=\\\"'common.ask-your-invoicee' | translate\\\"></p>\\n</ng-template>\\n\";","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { UserInvoicesComponent } from './user-invoices.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: UserInvoicesComponent,\n    },\n    {\n        path: ':id',\n        component: UserInvoicesComponent,\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class UserInvoicesRoutingModule {}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../../common/common.module'\nimport { InvoicesModule } from '../../common/invoices/invoices.module'\nimport { QuillEditorModule } from '../../common/quill-editor/quill-editor.module'\nimport { UserInvoiceFormComponent } from './user-invoice-form/user-invoice-form.component'\nimport { UserInvoicesRoutingModule } from './user-invoices-routing.module'\nimport { UserInvoicesComponent } from './user-invoices.component'\n\n@NgModule({\n    declarations: [UserInvoicesComponent, UserInvoiceFormComponent],\n    imports: [CommonModule, UserInvoicesRoutingModule, InvoicesModule, QuillEditorModule],\n    exports: [UserInvoiceFormComponent],\n})\nexport class UserInvoicesModule {}\n","import { HttpResponse } from '@angular/common/http'\nimport { Component, OnInit } from '@angular/core'\nimport { faEllipsisV } from '@fortawesome/pro-regular-svg-icons'\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap'\nimport { Observable, of } from 'rxjs'\nimport { finalize, flatMap, tap, withLatestFrom } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { IUser } from '../../common/api-interfaces'\nimport { formatAccountNumber } from '../../common/common.mixin'\nimport { InvoiceModalComponent } from '../../common/invoices/invoice-modal/invoice-modal.component'\nimport { InvoicesComponent } from '../../common/invoices/invoices.component'\nimport { Invoice } from '../../common/models/accounting/invoice.model'\nimport { openNoAccessModal } from '../../common/no-access-modal/no-access-modal.component'\nimport { User } from '../../common/services/session.service'\nimport { UserInvoiceFormComponent } from './user-invoice-form/user-invoice-form.component'\n\n@Component({\n    selector: 'user-invoices',\n    templateUrl: 'user-invoices.component.html',\n})\nexport class UserInvoicesComponent extends InvoicesComponent implements OnInit {\n    public faEllipsisV = faEllipsisV\n    public invoicesBeingCancelled = new Set<string>()\n\n    protected apiQuery = ['status']\n    protected defaultLimit = this.limitOpts[0]\n    protected defaultQuery = { status: {} }\n\n    public ngOnInit(): void {\n        super.ngOnInit()\n        this.route.paramMap.subscribe(params => {\n            if (params.has('id')) {\n                const id = params.get('id')!\n                const modal = this.openPayModal(id)\n                const closeHook = () => this.router.navigate(['/services/invoices'])\n                modal.result.then(closeHook, closeHook)\n            }\n        })\n    }\n\n    public find(): Observable<HttpResponse<any[]>> {\n        return of(undefined).pipe(\n            withLatestFrom(this.session.userStream),\n            tap(([_, user]) => {\n                this.apiUrl = `/users/${user.id}/invoices`\n            }),\n            flatMap(() => super.find())\n        )\n    }\n\n    public cancel(invoice: Invoice): void {\n        this.invoicesBeingCancelled.add(invoice.id)\n        this.subscriptions.add(\n            this.invoices\n                .patch(invoice.id, [\n                    {\n                        op: 'replace',\n                        path: '/status',\n                        value: 'cancelled',\n                    },\n                ])\n                .pipe(\n                    finalize(() => {\n                        this.invoicesBeingCancelled.delete(invoice.id)\n                    })\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.invoice-cancelled'))\n                    this.updateEvent.next()\n                })\n        )\n    }\n\n    public isInvoicer(invoice: Invoice, user: User): boolean {\n        return user.id === invoice.invoicer?.id\n    }\n\n    public openCreateInvoice(user: User): void {\n        if (user.accessErrors.length > 0) {\n            openNoAccessModal(this.ngbModal, user.accessErrors[0])\n            return\n        }\n        const modal = this.ngbModal.open(UserInvoiceFormComponent, {\n            backdrop: 'static',\n            windowClass: 'modal-primary',\n        })\n        const form = modal.componentInstance as UserInvoiceFormComponent\n        form.onSave.subscribe(() => {\n            modal.close()\n            this.updateEvent.next()\n        })\n    }\n\n    public openPayModal(id: string): NgbModalRef {\n        const modal = this.ngbModal.open(InvoiceModalComponent, {\n            backdrop: 'static',\n            windowClass: 'modal-primary',\n            keyboard: false,\n        })\n        const component = modal.componentInstance as InvoiceModalComponent\n        component.invoiceId = id\n        component.onSettle.subscribe(() => {\n            modal.close()\n            this.updateEvent.next()\n        })\n        return modal\n    }\n\n    public buildAccountHolder(user: IUser | null): string {\n        return !user\n            ? environment.displayName\n            : `${user.name} <span class=\"text-muted\">/ ${formatAccountNumber(user.accountNumber)}</span>`\n    }\n}\n"],"sourceRoot":"webpack:///"}