{"version":3,"sources":["./src/app/organization/merchant-customer-list/merchant-customer-list.component.html","./src/app/organization/merchant-customer-list/merchant-customer-list.component.ts","./src/app/organization/merchant-user-profile/merchant-user-profile.component.ts","./src/app/organization/organization.component.ts","./src/app/organization/organization.module.ts","./src/app/organization/organization-routing.module.ts","./src/app/organization/merchant-user-profile/merchant-user-profile.component.html","./src/app/organization/organization.component.html"],"names":[],"mappings":"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","file":"organization-organization-module.js","sourcesContent":["export default \"<section>\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header d-flex justify-content-between align-items-center\\\">\\n            <span>{{ 'common.customers' | translate }}</span>\\n        </div>\\n        <div class=\\\"card-body\\\">\\n            <div class=\\\"row no-gutters align-items-center mb-3\\\">\\n                <div class=\\\"col-lg-7 mb-2 mb-lg-0\\\">\\n                    <div class=\\\"input-group\\\">\\n                        <span class=\\\"input-group-prepend\\\">\\n                            <span class=\\\"input-group-text\\\"><fa-icon [icon]=\\\"faSearch\\\"></fa-icon></span>\\n                        </span>\\n                        <input\\n                            type=\\\"text\\\"\\n                            name=\\\"searchText\\\"\\n                            (ngModelChange)=\\\"searchEvent.next()\\\"\\n                            [placeholder]=\\\"'common.search' | translate\\\"\\n                            class=\\\"form-control\\\"\\n                            [(ngModel)]=\\\"search\\\"\\n                        />\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-17 d-flex justify-content-between align-items-center\\\">\\n                    <div class=\\\"ml-lg-3\\\">\\n                        <span>{{ count | number }} {{ (count === 1 ? 'common.entry-found' : 'common.entries-found') | translate | lowercase }}</span>\\n                        <span class=\\\"ml-3\\\"\\n                            ><a href (click)=\\\"isFilterOptionsCollapsed = !isFilterOptionsCollapsed; $event.preventDefault()\\\"\\n                                >{{ isFilterOptionsCollapsed ? '+' : '-' }} {{ 'common.filter-options' | translate }}</a\\n                            ></span\\n                        >\\n                    </div>\\n                    <div class=\\\"d-flex align-items-center\\\">\\n                        <ng-select\\n                            class=\\\"mr-2\\\"\\n                            [(ngModel)]=\\\"limit\\\"\\n                            dropdownPosition=\\\"auto\\\"\\n                            (change)=\\\"select(1)\\\"\\n                            [items]=\\\"limitOpts\\\"\\n                            [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                            [clearable]=\\\"false\\\"\\n                            [searchable]=\\\"false\\\"\\n                            required\\n                        >\\n                            <ng-template ng-label-tmp let-item=\\\"item\\\">{{ 'common.show-entries' | translate: { value: item } }}</ng-template>\\n                            <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                        </ng-select>\\n                        <ngb-pagination\\n                            [(page)]=\\\"page\\\"\\n                            [collectionSize]=\\\"count\\\"\\n                            (pageChange)=\\\"select()\\\"\\n                            [pageSize]=\\\"limit\\\"\\n                            [maxSize]=\\\"5\\\"\\n                            [ellipses]=\\\"false\\\"\\n                            [rotate]=\\\"true\\\"\\n                            [boundaryLinks]=\\\"true\\\"\\n                        >\\n                        </ngb-pagination>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"card\\\" [ngbCollapse]=\\\"isFilterOptionsCollapsed\\\">\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8\\\">\\n                            <div class=\\\"form-group row\\\">\\n                                <label class=\\\"col-sm-6 col-form-label text-body px-0\\\">{{ 'common.created-at' | translate | titlecase }}</label>\\n                                <div class=\\\"col-sm-18\\\">\\n                                    <div class=\\\"d-flex align-items-center\\\">\\n                                        <div class=\\\"input-group\\\">\\n                                            <input\\n                                                class=\\\"form-control\\\"\\n                                                type=\\\"text\\\"\\n                                                id=\\\"createdAtFrom\\\"\\n                                                name=\\\"createdAtFrom\\\"\\n                                                [placeholder]=\\\"queryParams['createdAt']['gte'] || ('common.from' | translate)\\\"\\n                                                (dateTimeChange)=\\\"\\n                                                    queryParams['createdAt']['gte'] = $event.value && formatDate($event.value, 'yyyy-MM-dd');\\n                                                    searchEvent.next()\\n                                                \\\"\\n                                                [owlDateTime]=\\\"createdAtFrom\\\"\\n                                                [owlDateTimeTrigger]=\\\"createdAtFrom\\\"\\n                                            />\\n                                            <input\\n                                                class=\\\"form-control\\\"\\n                                                type=\\\"text\\\"\\n                                                id=\\\"createdAtTo\\\"\\n                                                name=\\\"createdAtTo\\\"\\n                                                [placeholder]=\\\"queryParams['createdAt']['lte'] || 'To'\\\"\\n                                                (dateTimeChange)=\\\"\\n                                                    queryParams['createdAt']['lte'] = $event.value && formatDate($event.value, 'yyyy-MM-dd');\\n                                                    searchEvent.next()\\n                                                \\\"\\n                                                [owlDateTime]=\\\"createdAtTo\\\"\\n                                                [owlDateTimeTrigger]=\\\"createdAtTo\\\"\\n                                            />\\n                                        </div>\\n                                        <owl-date-time pickerType=\\\"calendar\\\" [firstDayOfWeek]=\\\"1\\\" #createdAtFrom></owl-date-time>\\n                                        <owl-date-time pickerType=\\\"calendar\\\" [firstDayOfWeek]=\\\"1\\\" #createdAtTo></owl-date-time>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"col-xl-8\\\">\\n                            <div class=\\\"form-group row\\\">\\n                                <label class=\\\"col-sm-6 col-form-label text-body px-0\\\">{{ 'common.approved-at' | translate }}</label>\\n                                <div class=\\\"col-sm-18\\\">\\n                                    <div class=\\\"d-flex align-items-center\\\">\\n                                        <div class=\\\"input-group\\\">\\n                                            <input\\n                                                class=\\\"form-control\\\"\\n                                                type=\\\"text\\\"\\n                                                id=\\\"approvedAtFrom\\\"\\n                                                name=\\\"approvedAtFrom\\\"\\n                                                [placeholder]=\\\"queryParams['approvedAt']['gte'] || ('common.from' | translate)\\\"\\n                                                (dateTimeChange)=\\\"\\n                                                    queryParams['approvedAt']['gte'] = $event.value && formatDate($event.value, 'yyyy-MM-dd');\\n                                                    searchEvent.next()\\n                                                \\\"\\n                                                [owlDateTime]=\\\"approvedAtFrom\\\"\\n                                                [owlDateTimeTrigger]=\\\"approvedAtFrom\\\"\\n                                            />\\n                                            <input\\n                                                class=\\\"form-control\\\"\\n                                                type=\\\"text\\\"\\n                                                id=\\\"approvedAtTo\\\"\\n                                                name=\\\"approvedAtTo\\\"\\n                                                [placeholder]=\\\"queryParams['approvedAt']['lte'] || 'To'\\\"\\n                                                (dateTimeChange)=\\\"\\n                                                    queryParams['approvedAt']['lte'] = $event.value && formatDate($event.value, 'yyyy-MM-dd');\\n                                                    searchEvent.next()\\n                                                \\\"\\n                                                [owlDateTime]=\\\"approvedAtTo\\\"\\n                                                [owlDateTimeTrigger]=\\\"approvedAtTo\\\"\\n                                            />\\n                                        </div>\\n                                        <owl-date-time pickerType=\\\"calendar\\\" [firstDayOfWeek]=\\\"1\\\" #approvedAtFrom></owl-date-time>\\n                                        <owl-date-time pickerType=\\\"calendar\\\" [firstDayOfWeek]=\\\"1\\\" #approvedAtTo></owl-date-time>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"col-xl-8\\\">\\n                            <div class=\\\"form-group row\\\">\\n                                <label for=\\\"type\\\" class=\\\"col-sm-6 col-form-label text-body px-0\\\">{{ 'common.type' | translate }}</label>\\n                                <div class=\\\"col-sm-18\\\">\\n                                    <ng-select\\n                                        id=\\\"type\\\"\\n                                        name=\\\"type\\\"\\n                                        [items]=\\\"types\\\"\\n                                        [multiple]=\\\"true\\\"\\n                                        [closeOnSelect]=\\\"false\\\"\\n                                        [searchable]=\\\"false\\\"\\n                                        [placeholder]=\\\"'common.filter-by-type' | translate\\\"\\n                                        [ngModel]=\\\"queryParams['type']['or']\\\"\\n                                        (ngModelChange)=\\\"queryParams['type']['eq'] = $event; searchEvent.next()\\\"\\n                                    >\\n                                        <ng-template ng-option-tmp let-item=\\\"item\\\" let-item$=\\\"item$\\\" let-index=\\\"index\\\">\\n                                            <input class=\\\"mr-2\\\" [id]=\\\"'item-' + index\\\" type=\\\"checkbox\\\" [ngModel]=\\\"item$.selected\\\" />\\n                                            <span class=\\\"text-capitalize\\\">{{ item }}</span>\\n                                        </ng-template>\\n                                    </ng-select>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"table-responsive position-relative\\\">\\n                <table class=\\\"table table-hover table-bordered table-data\\\">\\n                    <thead class=\\\"thead-light\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\">#</th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.name' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['accountNumber']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['accountNumber'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['accountNumber']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.type' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['type']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['type'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['type']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.email' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['email']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['email'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['email']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.status' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ (scope === 'verification' ? 'common.changed' : 'common.created') | translate }} {{ 'common.at' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"\\n                                        getSortingDirection(scope === 'verification' ? ['changeRequests', 'createdAt'] : ['createdAt']) === 'DESC'\\n                                            ? faChevronUp\\n                                            : faChevronDown\\n                                    \\\"\\n                                    (click)=\\\"\\n                                        sort(\\n                                            scope === 'verification' ? ['changeRequests', 'createdAt'] : ['createdAt'],\\n                                            $event.ctrlKey || $event.metaKey\\n                                        )\\n                                    \\\"\\n                                    [ngClass]=\\\"{\\n                                        active: isActiveSorting(scope === 'verification' ? ['changeRequests', 'createdAt'] : ['createdAt'])\\n                                    }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ (scope === 'verification' ? 'common.changed-at' : 'common.approved-at') | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"\\n                                        getSortingDirection(scope === 'verification' ? ['changeRequests', 'approvedAt'] : ['approvedAt']) === 'DESC'\\n                                            ? faChevronUp\\n                                            : faChevronDown\\n                                    \\\"\\n                                    (click)=\\\"\\n                                        sort(\\n                                            scope === 'verification' ? ['changeRequests', 'approvedAt'] : ['approvedAt'],\\n                                            $event.ctrlKey || $event.metaKey\\n                                        )\\n                                    \\\"\\n                                    [ngClass]=\\\"{\\n                                        active: isActiveSorting(scope === 'verification' ? ['changeRequests', 'approvedAt'] : ['approvedAt'])\\n                                    }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">{{ 'common.actions' | translate }}</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                            <tr *ngFor=\\\"let user of items\\\" class=\\\"e2e-user\\\">\\n                                <th scope=\\\"row\\\" [width]=\\\"'1%'\\\">\\n                                    <uuid [value]=\\\"user.id\\\"></uuid>\\n                                </th>\\n                                <td>\\n                                    <user-display\\n                                        [user]=\\\"user\\\"\\n                                        [displayBadges]=\\\"false\\\"\\n                                        [disableLink]=\\\"true\\\"\\n                                        (click)=\\\"openUserProfile(user)\\\"\\n                                    ></user-display>\\n                                </td>\\n                                <td>\\n                                    <span\\n                                        class=\\\"text-capitalize label label-sm\\\"\\n                                        [ngClass]=\\\"{ 'label-primary': user.type === 'business', 'label-success': user.type === 'personal' }\\\"\\n                                        >{{ user.type }}</span\\n                                    >\\n                                </td>\\n                                <td>\\n                                    <copy-wrap [value]=\\\"user.email\\\" *ngIf=\\\"!!user.email; else noMail\\\">\\n                                        <span class=\\\"text-body\\\">{{ user.email }}</span>\\n                                    </copy-wrap>\\n                                    <ng-template #noMail><span class=\\\"text-muted\\\">NONE</span></ng-template>\\n                                </td>\\n                                <td>\\n                                    <span\\n                                        class=\\\"text-capitalize badge badge-lg\\\"\\n                                        [ngClass]=\\\"{\\n                                            'badge-default': user.status === 'inactive',\\n                                            'badge-success': user.status === 'active',\\n                                            'badge-info': user.status === 'pending',\\n                                            'badge-warning': ['suspended', 'closing'].includes(user.status),\\n                                            'badge-danger': ['frozen', 'closed'].includes(user.status)\\n                                        }\\\"\\n                                        >{{ user.status }}</span\\n                                    >\\n                                </td>\\n                                <td>{{ user.createdAt | date: 'medium' }}</td>\\n                                <td>{{ user.approvedAt | date: 'medium' }}</td>\\n                                <td class=\\\"action\\\">\\n                                    <a class=\\\"btn btn-primary-air btn-sm btn-block px-2\\\" (click)=\\\"openUserProfile(user)\\\">{{\\n                                        'common.view' | translate\\n                                    }}</a>\\n                                </td>\\n                            </tr>\\n                            <tr *ngIf=\\\"items.length === 0\\\">\\n                                <td colspan=\\\"8\\\" class=\\\"text-center\\\">{{ 'common.no-entries-found' | translate }}</td>\\n                            </tr>\\n                        </ng-container>\\n                    </tbody>\\n                </table>\\n                <ng-container *ngIf=\\\"isFetching | async\\\">\\n                    <circle-spinner></circle-spinner>\\n                </ng-container>\\n            </div>\\n        </div>\\n    </div>\\n</section>\\n\";","import { HttpClient, HttpResponse } from '@angular/common/http'\nimport { ChangeDetectorRef, Component } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Observable, of } from 'rxjs'\nimport { flatMap, tap, withLatestFrom } from 'rxjs/operators'\nimport { UserFormModalComponent } from 'src/app/admin/users/user-form-modal/user-form-modal.component'\nimport { ConfirmationService } from 'src/app/common/services/confirmation.service'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { IUser, UserType } from '../../common/api-interfaces'\nimport { ListComponent } from '../../common/list.component'\nimport { MerchantUserProfileComponent } from '../merchant-user-profile/merchant-user-profile.component'\n\n@Component({\n    selector: 'merchant-customer-list',\n    templateUrl: 'merchant-customer-list.component.html',\n})\nexport class MerchantCustomerListComponent extends ListComponent<IUser> {\n    public types: UserType[] = ['personal', 'business']\n\n    protected apiUrl = '/users'\n    protected apiQuery = ['approvedAt', 'type', 'createdAt']\n    protected formComponent = UserFormModalComponent\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        confirmation: ConfirmationService,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n    }\n\n    public find(): Observable<HttpResponse<any[]>> {\n        return of(undefined).pipe(\n            withLatestFrom(this.session.userStream),\n            tap(([_, user]) => {\n                this.apiUrl = `/users/${user.id}/associates`\n            }),\n            flatMap(() => super.find())\n        )\n    }\n\n    public openUserProfile(associate: Partial<IUser>): void {\n        const modal = this.ngbModal.open(MerchantUserProfileComponent, {\n            backdrop: 'static',\n            windowClass: 'modal-primary',\n            size: 'lg',\n        })\n\n        const component = modal.componentInstance as MerchantUserProfileComponent\n        component.associate = associate\n    }\n}\n","import { HttpClient, HttpResponse } from '@angular/common/http'\nimport { ChangeDetectorRef, Component, Input } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { NgbActiveModal, NgbCalendar, NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport * as Color from 'color'\nimport { capitalize } from 'lodash'\nimport { Observable } from 'rxjs'\nimport { delay, finalize, flatMap, take, tap } from 'rxjs/operators'\nimport { IUser, TransactionType } from 'src/app/common/api-interfaces'\nimport { ListComponent } from 'src/app/common/list.component'\nimport { Transaction } from 'src/app/common/models/accounting/transaction.model'\nimport { Wallet } from 'src/app/common/models/accounting/wallet.model'\nimport { User } from 'src/app/common/models/core/user.model'\nimport { ConfirmationResult, ConfirmationService } from 'src/app/common/services/confirmation.service'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { ToastrService } from 'src/app/common/services/toastr.service'\nimport { TransactionService } from 'src/app/common/services/transaction.service'\nimport { TransactionViewComponent } from 'src/app/common/transaction/transaction-view/transaction-view.component'\nimport { buildWalletOwnerAccountNumber, calculateDeductableAmount } from 'src/app/common/transactions.mixins'\nimport { environment } from 'src/environments/environment'\n\n@Component({\n    selector: 'merchant-user-profile',\n    templateUrl: 'merchant-user-profile.component.html',\n})\nexport class MerchantUserProfileComponent extends ListComponent<Transaction> {\n    @Input()\n    public associate: Partial<IUser>\n    public user: IUser | null\n    public apiUrl: string\n    public displayName = environment.displayName\n    public appColor = Color(getComputedStyle(document.body).getPropertyValue('--primary').trim()).lighten(0.1)\n    public calculateDeductableAmount = calculateDeductableAmount\n    public transactionsLoading = new Set<string>()\n    public activeTab: 'overview' | 'send-payment' | 'send-invoice' = 'overview'\n    public transaction: Partial<Transaction> = {\n        amount: '',\n        method: 'internal',\n        type: 'transfer',\n    }\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        confirmation: ConfirmationService,\n        public calendar: NgbCalendar,\n        public activeModal: NgbActiveModal,\n        public translate: TranslateService,\n        private transactionService: TransactionService,\n        private toastr: ToastrService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n    }\n\n    public find(): Observable<HttpResponse<any[]>> {\n        return this.session.userStream.pipe(\n            delay(0),\n            take(1),\n            tap(user => {\n                this.user = new User(user)\n                this.apiUrl = `/associations/${this.user.id}/users/${this.associate.id}/transactions`\n                this.transaction.currency = user.preferredCurrency\n            }),\n            flatMap(() => super.find())\n        )\n    }\n\n    public viewTransaction(\n        transaction: Transaction,\n        options: { activeTab?: 'overview' | 'beneficiary' | 'attachments' } = {}\n    ): NgbModalRef {\n        const modal = this.ngbModal.open(TransactionViewComponent, {\n            windowClass: 'modal-primary',\n        })\n        const transactionView = modal.componentInstance as TransactionViewComponent\n        transactionView.transaction = { ...transaction }\n        if (!!options.activeTab) {\n            transactionView.activeTab = options.activeTab\n        }\n\n        transactionView.onCancel.subscribe(() => {\n            modal.dismiss()\n            this.updateEvent.next()\n        })\n\n        transactionView.onUpdate.subscribe(() => {\n            this.updateEvent.next()\n        })\n\n        return modal\n    }\n\n    public formatType(type: TransactionType): string {\n        return type.slice(0, 1).toUpperCase()\n    }\n\n    public buildBeautifiedType(transaction: Transaction): string {\n        switch (transaction.type) {\n            case 'transfer':\n                if (this.isReceiver(transaction)) {\n                    return this.translate.instant('common.transfer-from')\n                }\n                return this.translate.instant('common.transfer-to')\n            case 'deposit':\n                return transaction.method === 'card'\n                    ? this.translate.instant('common.unload-from')\n                    : this.translate.instant('common.deposit-from')\n            case 'withdrawal':\n                if (transaction.method === 'card') {\n                    return this.translate.instant('common.topup-to')\n                }\n                return this.translate.instant('common.withdrawal-to')\n            case 'card-order':\n            case 'account-fee':\n            case 'payment':\n                return this.translate.instant('common.payment-to')\n            case 'conversion':\n                if (this.isReceiver(transaction)) {\n                    return this.translate.instant('common.conversion-from')\n                }\n                return this.translate.instant('common.conversion-to')\n            case 'trade':\n                if (this.isReceiver(transaction)) {\n                    return transaction.currency.code === 'USD'\n                        ? this.translate.instant('common.credit')\n                        : this.translate.instant('common.buy')\n                }\n                return transaction.currency.code === 'USD'\n                    ? this.translate.instant('common.debit')\n                    : this.translate.instant('common.sell')\n            case 'investment':\n                if (this.isReceiver(transaction)) {\n                    return this.translate.instant('common.investment-from')\n                }\n                return this.translate.instant('common.investment-to')\n            default:\n                return capitalize(transaction.type)\n        }\n    }\n\n    public isReceiver(transaction: Transaction): boolean {\n        return (\n            !!transaction.counterWallet &&\n            !!transaction.counterWallet.user &&\n            !!this.user &&\n            transaction.counterWallet.user.id === this.user.id\n        )\n    }\n\n    public determineSubject(transaction: Transaction): string {\n        switch (transaction.type) {\n            case 'card-order':\n                return `${environment.displayName} <span class=\"text-muted\">/ ${this.translate.instant(\n                    'common.card'\n                )}</span>`\n            case 'account-fee':\n                return `${environment.displayName} <span class=\"text-muted\">/ ${this.translate.instant(\n                    'common.account-fee'\n                )}</span>`\n            case 'deposit':\n            case 'withdrawal':\n                return this.beautifyMethod(transaction)\n            case 'payment':\n                return environment.displayName\n            case 'transfer':\n                if (transaction.isPlatformTransfer()) {\n                    return environment.displayName\n                } else if (this.isReceiver(transaction)) {\n                    return this.buildAccountHolder(transaction.baseWallet!)\n                }\n            // eslint-disable-next-line no-fallthrough\n            default:\n                return this.buildAccountHolder(transaction.counterWallet!)\n        }\n    }\n\n    public beautifyMethod(transaction: Transaction): string {\n        switch (transaction.method) {\n            case 'local':\n            case 'swift':\n                if (\n                    transaction.type === 'withdrawal' &&\n                    transaction.beneficiary &&\n                    transaction.beneficiary.accountHolder &&\n                    transaction.beneficiary.accountNumber\n                ) {\n                    return `${transaction.beneficiary.accountHolder} <span class=\"text-muted\">/ ${transaction.beneficiary.accountNumber}</span>`\n                }\n                return `${\n                    this.user?.type === 'business'\n                        ? this.translate.instant('common.corporate')\n                        : this.translate.instant('common.personal')\n                } ${this.translate.instant('common.bank-account')}`\n            case 'card':\n                const maskedPan = transaction.card?.maskedPan\n                return (\n                    'Card' +\n                    (maskedPan\n                        ? ` <span class=\"text-muted\">/ ${maskedPan.slice(0, 4)} ${maskedPan.slice(\n                              4,\n                              8\n                          )} ${maskedPan.slice(8, 12)} ${maskedPan.slice(12)} </span>`\n                        : '')\n                )\n            default:\n                return capitalize(transaction.method)\n        }\n    }\n\n    public markAsPaid(item: Transaction): void {\n        if (item.method === 'crypto') {\n            this.viewTransaction(item)\n            return\n        }\n        this.transactionsLoading.add(item.id)\n        this.transactionService\n            .changeStatus(item.id, 'processing')\n            .pipe(\n                finalize(() => {\n                    this.transactionsLoading.delete(item.id)\n                })\n            )\n            .subscribe(() => {\n                this.toastr.success(this.translate.instant('common.deposit-mark-as-paid'))\n                this.updateEvent.next()\n\n                this.subscriptions.add(\n                    this.confirmation\n                        .show({\n                            type: 'success',\n                            text: this.translate.instant('common.thank-you-for-notifying'),\n                            confirmText: this.translate.instant('common.i-will-upload-a-receipt'),\n                            cancelText: this.translate.instant('common.i-will-do-it-later'),\n                            cancelClass: 'warning',\n                        })\n                        .subscribe(result => {\n                            if (result === ConfirmationResult.CONFIRMED) {\n                                this.viewTransaction(item, { activeTab: 'attachments' })\n                            }\n                        })\n                )\n            })\n    }\n\n    private buildAccountHolder(wallet: Wallet): string {\n        return `${\n            wallet.user ? `${wallet.user!.name}` : this.displayName\n        } <span class=\"text-muted\">/ ${buildWalletOwnerAccountNumber(wallet, environment.appName)}</span>`\n    }\n}\n","import { Component } from '@angular/core'\nimport { faEllipsisV } from '@fortawesome/pro-regular-svg-icons'\nimport { SessionService } from '../common/services/session.service'\n\n@Component({\n    selector: 'organization',\n    templateUrl: 'organization.component.html',\n})\nexport class OrganizationComponent {\n    public faEllipsisV = faEllipsisV\n\n    constructor(public session: SessionService) {}\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { QuillEditorModule } from '../common/quill-editor/quill-editor.module'\nimport { UserInvoicesModule } from '../services/user-invoices/user-invoices.module'\nimport { TransferModule } from '../transfer/transfer.module'\nimport { MerchantCustomerListComponent } from './merchant-customer-list/merchant-customer-list.component'\nimport { MerchantUserProfileComponent } from './merchant-user-profile/merchant-user-profile.component'\nimport { OrganizationRoutingModule } from './organization-routing.module'\nimport { OrganizationComponent } from './organization.component'\n\n@NgModule({\n    declarations: [OrganizationComponent, MerchantUserProfileComponent, MerchantCustomerListComponent],\n    imports: [CommonModule, OrganizationRoutingModule, QuillEditorModule, UserInvoicesModule, TransferModule],\n})\nexport class OrganizationModule {}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { OrganizationComponent } from './organization.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: OrganizationComponent,\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class OrganizationRoutingModule {}\n","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">{{ 'common.customer-profile' | translate }}</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss(); $event.preventDefault()\\\">&times;</button>\\n</div>\\n<ul class=\\\"nav nav-tabs-alt nav-fill\\\">\\n    <li class=\\\"nav-item\\\">\\n        <a href class=\\\"nav-link active\\\" [ngClass]=\\\"{ active: activeTab === 'overview' }\\\" (click)=\\\"activeTab = 'overview'; $event.preventDefault()\\\">\\n            {{ 'common.overview' | translate }}\\n        </a>\\n    </li>\\n    <li class=\\\"nav-item\\\">\\n        <a href class=\\\"nav-link\\\" [ngClass]=\\\"{ active: activeTab === 'send-payment' }\\\" (click)=\\\"activeTab = 'send-payment'; $event.preventDefault()\\\">\\n            {{ 'common.send-payment' | translate }}\\n        </a>\\n    </li>\\n    <li class=\\\"nav-item\\\">\\n        <a href class=\\\"nav-link\\\" [ngClass]=\\\"{ active: activeTab === 'send-invoice' }\\\" (click)=\\\"activeTab = 'send-invoice'; $event.preventDefault()\\\">\\n            {{ 'common.send-invoice' | translate }}\\n        </a>\\n    </li>\\n</ul>\\n<div class=\\\"modal-body\\\">\\n    <ng-container *ngIf=\\\"activeTab === 'overview'\\\">\\n        <div class=\\\"row mb-2\\\">\\n            <div class=\\\"col-lg-8 d-flex align-items-center\\\">\\n                <div class=\\\"media d-flex align-items-center\\\">\\n                    <user-avatar [user]=\\\"associate\\\" size=\\\"xl\\\" elementClass=\\\"mr-3\\\"></user-avatar>\\n                    <div class=\\\"media-body\\\">\\n                        <div class=\\\"text-muted font-sm\\\">{{ 'common.account-name' | translate | titlecase }}</div>\\n                        <p class=\\\"profile-value text-primary\\\">\\n                            {{ associate.name }}\\n                        </p>\\n                        <div class=\\\"text-muted font-sm\\\">{{ 'common.account-number' | translate | titlecase }}</div>\\n                        <p>\\n                            <copy-wrap [value]=\\\"associate.accountNumber\\\">\\n                                <span class=\\\"profile-value text-body\\\">{{ associate.accountNumber | accountNumber }}</span>\\n                            </copy-wrap>\\n                        </p>\\n                        <div class=\\\"text-muted font-sm\\\">{{ 'common.email-address' | translate }}</div>\\n                        <p class=\\\"profile-value\\\">{{ associate.email }}</p>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row mb-2\\\">\\n            <div class=\\\"col\\\">\\n                <h5>{{ 'common.transactions' | translate }}</h5>\\n            </div>\\n        </div>\\n        <div class=\\\"table-responsive\\\">\\n            <table class=\\\"table table-hover table-card\\\">\\n                <thead class=\\\"thead-light\\\">\\n                    <tr>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.subject' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['counterWallet', 'id']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['counterWallet', 'id'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['counterWallet', 'id']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\" class=\\\"text-right\\\">\\n                            {{ 'common.amount' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['amount']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['amount'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['amount']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.status' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.created-at' | translate | titlecase }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['createdAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['createdAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['createdAt']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                        <ng-container *ngIf=\\\"items.length === 0; else rows\\\">\\n                            <tr>\\n                                <td class=\\\"bg-white\\\" colspan=\\\"12\\\">\\n                                    <div class=\\\"mx-auto p-3 mt-2 mb-4 text-center max-width-sm\\\">\\n                                        <p class=\\\"mb-3 text-gray\\\">No transaction found.</p>\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-template #rows>\\n                            <tr\\n                                *ngFor=\\\"let transaction of items\\\"\\n                                class=\\\"clickable bg-white e2e-user-transaction transaction-row\\\"\\n                                (click)=\\\"viewTransaction(transaction)\\\"\\n                                [ngClass]=\\\"{ 'text-muted': transaction.status !== 'completed' }\\\"\\n                            >\\n                                <th scope=\\\"row\\\">\\n                                    <div class=\\\"d-flex align-items-center\\\">\\n                                        <ng-container\\n                                            *ngIf=\\\"\\n                                                transaction.type === 'deposit' ||\\n                                                    transaction.type === 'withdrawal' ||\\n                                                    transaction.type === 'card-order' ||\\n                                                    transaction.type === 'conversion' ||\\n                                                    transaction.type === 'trade' ||\\n                                                    transaction.type === 'subscription' ||\\n                                                    transaction.type === 'investment';\\n                                                else avatar\\n                                            \\\"\\n                                        >\\n                                            <!-- htmllint attr-bans=\\\"[]\\\" -->\\n                                            <div class=\\\"avatar avatar-sm mr-3\\\">\\n                                                <svg\\n                                                    class=\\\"img-avatar\\\"\\n                                                    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                    xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n                                                    xml:space=\\\"preserve\\\"\\n                                                    text-rendering=\\\"geometricPrecision\\\"\\n                                                    style=\\\"\\n                                                        shape-rendering: geometricPrecision;\\n                                                        image-rendering: optimizeQuality;\\n                                                        fill-rule: evenodd;\\n                                                        clip-rule: evenodd;\\n                                                    \\\"\\n                                                    viewBox=\\\"0 0 120 120\\\"\\n                                                >\\n                                                    <g>\\n                                                        <rect [style.fill]=\\\"appColor\\\" width=\\\"120\\\" height=\\\"120\\\"></rect>\\n                                                        <text\\n                                                            font-weight=\\\"500\\\"\\n                                                            font-size=\\\"3.25em\\\"\\n                                                            font-family=\\\"sans-serif\\\"\\n                                                            fill=\\\"#ffffff\\\"\\n                                                            x=\\\"50%\\\"\\n                                                            y=\\\"50%\\\"\\n                                                            text-anchor=\\\"middle\\\"\\n                                                            dy=\\\"0.35em\\\"\\n                                                        >\\n                                                            {{ formatType(transaction.type) }}\\n                                                        </text>\\n                                                    </g>\\n                                                </svg>\\n                                            </div>\\n                                            <!-- htmllint attr-bans=\\\"$previous\\\" -->\\n                                        </ng-container>\\n                                        <ng-template #avatar>\\n                                            <user-avatar\\n                                                *ngIf=\\\"!isReceiver(transaction)\\\"\\n                                                [user]=\\\"transaction.counterWallet.user\\\"\\n                                                size=\\\"sm\\\"\\n                                                elementClass=\\\"mr-3\\\"\\n                                            ></user-avatar>\\n                                            <user-avatar\\n                                                *ngIf=\\\"isReceiver(transaction)\\\"\\n                                                [user]=\\\"transaction.baseWallet.user\\\"\\n                                                size=\\\"sm\\\"\\n                                                elementClass=\\\"mr-3\\\"\\n                                            ></user-avatar>\\n                                        </ng-template>\\n                                        <div>\\n                                            <div>{{ buildBeautifiedType(transaction) }}</div>\\n                                            <ng-container *ngIf=\\\"!['conversion', 'investment', 'trade'].includes(transaction.type); else addon\\\">\\n                                                <span\\n                                                    [ngClass]=\\\"transaction.status !== 'completed' ? 'text-muted' : 'text-primary'\\\"\\n                                                    [innerHtml]=\\\"determineSubject(transaction)\\\"\\n                                                ></span>\\n                                            </ng-container>\\n                                            <ng-template #addon>\\n                                                <ng-container *ngIf=\\\"$any(transaction).allocationsStream | async; let allocations\\\">\\n                                                    <span [ngClass]=\\\"transaction.status !== 'completed' ? 'text-muted' : 'text-primary'\\\">\\n                                                        {{ allocations[0]?.product?.name }}\\n                                                        <span class=\\\"text-muted\\\">/ {{ allocations[0]?.id | truncate: false:7:'' }}</span>\\n                                                    </span>\\n                                                </ng-container>\\n                                                <ng-container *ngIf=\\\"$any(transaction).conversionsStream | async; let conversions\\\">\\n                                                    <span [ngClass]=\\\"transaction.status !== 'completed' ? 'text-muted' : 'text-primary'\\\">\\n                                                        {{\\n                                                            isReceiver(transaction)\\n                                                                ? conversions[0]?.baseTransaction?.currency?.name\\n                                                                : conversions[0]?.currency?.name\\n                                                        }}\\n                                                        <span class=\\\"text-muted\\\">/ {{ conversions[0]?.id | truncate: false:7:'' }}</span>\\n                                                    </span>\\n                                                </ng-container>\\n                                                <ng-container *ngIf=\\\"$any(transaction).tradeStream | async; let trades\\\">\\n                                                    <span [ngClass]=\\\"transaction.status !== 'completed' ? 'text-muted' : 'text-primary'\\\">\\n                                                        {{\\n                                                            isReceiver(transaction)\\n                                                                ? trades[0]?.counterTransaction?.currency?.name\\n                                                                : trades[0]?.baseTransaction?.currency?.name\\n                                                        }}\\n                                                        <span class=\\\"text-muted\\\">/ {{ trades[0]?.id | truncate: false:7:'' }}</span>\\n                                                        <span\\n                                                            [ngClass]=\\\"\\n                                                                !queryParams['currencyCode']['or']?.length\\n                                                                    ? isReceiver(transaction)\\n                                                                        ? 'tx-marker down'\\n                                                                        : 'tx-marker up'\\n                                                                    : ''\\n                                                            \\\"\\n                                                        ></span>\\n                                                    </span>\\n                                                </ng-container>\\n                                            </ng-template>\\n                                        </div>\\n                                    </div>\\n                                </th>\\n                                <td class=\\\"text-right\\\">\\n                                    <span\\n                                        [ngClass]=\\\"\\n                                            transaction.status !== 'completed' ? 'text-muted' : isReceiver(transaction) ? 'text-green' : 'text-danger'\\n                                        \\\"\\n                                        >{{ isReceiver(transaction) ? '' : '-'\\n                                        }}{{\\n                                            (isReceiver(transaction) ? transaction.settledAmount : calculateDeductableAmount(transaction))\\n                                                | amount: transaction.currency.decimalPlaces\\n                                        }}\\n                                        {{ transaction.currency.code }}</span\\n                                    >\\n                                </td>\\n                                <td>\\n                                    <span\\n                                        class=\\\"text-capitalize label\\\"\\n                                        [ngClass]=\\\"{\\n                                            'label-success': transaction.status === 'completed',\\n                                            'label-info': transaction.status === 'pending',\\n                                            'label-warning': transaction.status === 'processing',\\n                                            'label-danger': ['cancelled', 'failed'].indexOf(transaction.status) !== -1\\n                                        }\\\"\\n                                        >{{ transaction.status }}</span\\n                                    >\\n                                </td>\\n                                <td>{{ transaction.createdAt | date: 'medium' }}</td>\\n                            </tr>\\n                        </ng-template>\\n                    </ng-container>\\n                </tbody>\\n            </table>\\n        </div>\\n        <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n            <ng-container *ngIf=\\\"items.length !== 0\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col d-flex justify-content-center mt-3\\\">\\n                        <ngb-pagination\\n                            [(page)]=\\\"page\\\"\\n                            [collectionSize]=\\\"count\\\"\\n                            (pageChange)=\\\"select()\\\"\\n                            [pageSize]=\\\"limit\\\"\\n                            [maxSize]=\\\"4\\\"\\n                            [rotate]=\\\"false\\\"\\n                            [boundaryLinks]=\\\"true\\\"\\n                        >\\n                        </ngb-pagination>\\n                    </div>\\n                </div>\\n            </ng-container>\\n        </ng-container>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"activeTab === 'send-payment'\\\">\\n        <transfer-form [transaction]=\\\"transaction\\\" [recipient]=\\\"associate.email\\\" [showContactBtn]=\\\"false\\\" [lockRecipient]=\\\"true\\\"></transfer-form>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"activeTab === 'send-invoice'\\\">\\n        <user-invoice-form [hideModal]=\\\"true\\\" [invoicee]=\\\"associate.email\\\" [lockRecipient]=\\\"true\\\" [showContacts]=\\\"false\\\"></user-invoice-form>\\n    </ng-container>\\n</div>\\n\";","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"container pt-page pb-3\\\">\\n        <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n            <div class=\\\"col-auto\\\">\\n                <h5 class=\\\"mb-0\\\">{{ 'common.organization' | translate }}</h5>\\n            </div>\\n            <div class=\\\"col-auto d-flex justify-content-end\\\">\\n                <ol class=\\\"breadcrumb px-0\\\">\\n                    <li class=\\\"breadcrumb-item\\\">\\n                        <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                    </li>\\n                    <li class=\\\"breadcrumb-item active\\\">{{ 'common.organization' | translate }}</li>\\n                </ol>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"container\\\">\\n        <merchant-customer-list></merchant-customer-list>\\n    </div>\\n</ng-container>\\n\";"],"sourceRoot":"webpack:///"}