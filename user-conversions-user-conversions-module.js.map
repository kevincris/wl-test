{"version":3,"sources":["./src/app/store/fees/fees.store.ts","./src/app/store/fees/fees.query.ts","./src/app/services/user-conversions/user-conversion-form.component.html","./src/app/common/services/sgpmx.service.ts","./src/app/services/user-conversions/user-conversion-form.component.ts","./src/app/services/user-conversions/user-conversions.module.ts","./src/app/services/user-conversions/user-conversions.component.ts","./src/app/services/user-conversions/user-conversions.component.html","./src/app/common/security-check/security-check.service.ts","./src/app/services/user-conversions/user-conversion-action.component.ts","./src/app/services/user-conversions/user-conversions-routing.module.ts","./src/app/services/user-conversions/user-conversion-action.component.html"],"names":[],"mappings":"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","file":"user-conversions-user-conversions-module.js","sourcesContent":["import { Injectable } from '@angular/core'\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita'\nimport { IFee } from '../../common/api-interfaces'\n\nexport interface FeesState extends EntityState<IFee, string> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'fees', idKey: 'id' })\nexport class FeesStore extends EntityStore<FeesState> {\n    constructor() {\n        super()\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { QueryEntity } from '@datorama/akita'\nimport { Observable, of } from 'rxjs'\nimport { flatMap, map } from 'rxjs/operators'\nimport { FeeType, IFee, TransactionMethod } from 'src/app/common/api-interfaces'\nimport { FeesState, FeesStore } from './fees.store'\n\n@Injectable({ providedIn: 'root' })\nexport class FeesQuery extends QueryEntity<FeesState> {\n    constructor(protected store: FeesStore) {\n        super(store)\n    }\n\n    public findByPrimaryAttributes(query: {\n        type: FeeType\n        method: TransactionMethod\n        currencyCode: string\n    }): Observable<IFee | null> {\n        return this.selectEntity(\n            entity =>\n                entity.type === query.type &&\n                entity.method === query.method &&\n                query.currencyCode === entity.currency.code\n        ).pipe(\n            flatMap(fee =>\n                fee\n                    ? of(fee)\n                    : this.selectEntity(\n                          entity =>\n                              entity.type === query.type &&\n                              entity.method === query.method &&\n                              entity.currency.code === 'USD'\n                      ).pipe(map(usdFee => usdFee ?? null))\n            )\n        )\n    }\n}\n","export default \"<form\\n    class=\\\"form-validation e2e-conversion-form\\\"\\n    #conversionForm=\\\"ngForm\\\"\\n    (ngSubmit)=\\\"submit()\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': conversionForm.submitted }\\\"\\n    autocomplete=\\\"false\\\"\\n    novalidate\\n>\\n    <div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">{{ (!isNew() ? 'common.conversion' : 'common.currency-conversion') | translate }}</h5>\\n        <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        <div class=\\\"form-group\\\" *ngIf=\\\"item.user !== null && canChangeOwner\\\">\\n            <label for=\\\"user\\\">{{ 'common.user' | translate }}</label>\\n            <ng-select\\n                id=\\\"user\\\"\\n                name=\\\"user\\\"\\n                [placeholder]=\\\"'common.enter-user' | translate\\\"\\n                [(ngModel)]=\\\"user\\\"\\n                #userInput=\\\"ngModel\\\"\\n                [items]=\\\"legalEntitiesStream | async\\\"\\n                [typeahead]=\\\"userAutocomplete\\\"\\n                [clearable]=\\\"false\\\"\\n                [disabled]=\\\"!isNew()\\\"\\n                required\\n            >\\n                <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                    {{ item.name }} <small class=\\\"text-gray\\\">{{ item.email }}</small>\\n                </ng-template>\\n                <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                    <div class=\\\"d-flex align-items-center justify-content-center\\\">\\n                        <user-avatar *ngIf=\\\"item\\\" [user]=\\\"item\\\" size=\\\"sm\\\" elementClass=\\\"mr-2\\\"></user-avatar>\\n                        <div class=\\\"w-100\\\">\\n                            <div>{{ item.name }}</div>\\n                            <small class=\\\"text-gray\\\">{{ item.email }}</small>\\n                        </div>\\n                    </div>\\n                </ng-template>\\n            </ng-select>\\n            <div *ngIf=\\\"userInput.invalid && (conversionForm.submitted || userInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"userInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"row\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label for=\\\"baseAmount\\\">{{ 'common.amount' | translate }} ({{ 'common.from' | translate }})</label>\\n                <input\\n                    type=\\\"text\\\"\\n                    class=\\\"form-control\\\"\\n                    id=\\\"baseAmount\\\"\\n                    name=\\\"baseAmount\\\"\\n                    [(ngModel)]=\\\"copy.baseTransaction!.amount\\\"\\n                    #baseAmount=\\\"ngModel\\\"\\n                    placeholder=\\\"0.00\\\"\\n                    required\\n                    [disabled]=\\\"!isNew()\\\"\\n                />\\n                <div *ngIf=\\\"baseAmount.invalid && (conversionForm.submitted || baseAmount.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"baseAmount?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label for=\\\"baseCurrency\\\">{{ 'common.currency' | translate }} ({{ 'common.from' | translate }})</label>\\n                <currency-select\\n                    [user]=\\\"user\\\"\\n                    [placeholder]=\\\"'common.from-currency' | translate\\\"\\n                    [(currency)]=\\\"copy.baseTransaction!.currency\\\"\\n                    [disabled]=\\\"!isNew()\\\"\\n                    [transferable]=\\\"true\\\"\\n                    [required]=\\\"true\\\"\\n                    [hideZeroBalance]=\\\"appName !== 'sgpmx'\\\"\\n                    [filterBy]=\\\"copy.currency && copy.currency.type === 'crypto' ? ['EUR', 'USD'] : undefined\\\"\\n                    (currencyChange)=\\\"copy.currency = undefined; filterCurrencies()\\\"\\n                    #currencySelect\\n                ></currency-select>\\n                <div\\n                    *ngIf=\\\"currencySelect.currencyInput.invalid && (conversionForm.submitted || currencySelect.currencyInput.dirty)\\\"\\n                    class=\\\"error-messages\\\"\\n                >\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currencySelect.currencyInput?.errors?.required\\\">\\n                        {{ 'common.this-is-required' | translate }}\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\" *ngIf=\\\"isNew() || !copy.counterTransaction?.amount\\\">\\n            <label for=\\\"currency\\\">{{ 'common.currency' | translate }} ({{ 'common.to' | translate }})</label>\\n            <ng-select\\n                name=\\\"currency\\\"\\n                class=\\\"to-currency\\\"\\n                [placeholder]=\\\"'common.to-currency' | translate\\\"\\n                [(ngModel)]=\\\"copy.currency\\\"\\n                [items]=\\\"filteredCurrencies\\\"\\n                [clearable]=\\\"false\\\"\\n                [searchable]=\\\"false\\\"\\n                #currencyInput=\\\"ngModel\\\"\\n                required\\n                [disabled]=\\\"!isNew()\\\"\\n                (change)=\\\"resetBaseCurrency()\\\"\\n            >\\n                <ng-template ng-label-tmp let-item=\\\"item\\\">{{ item.code }} - {{ item.name }}</ng-template>\\n                <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item.code }} - {{ item.name }}</ng-template>\\n            </ng-select>\\n            <div *ngIf=\\\"currencyInput.invalid && (conversionForm.submitted || currencyInput.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currencyInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"row\\\" *ngIf=\\\"!isNew() && copy.counterTransaction?.amount\\\">\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label for=\\\"counterAmount\\\">{{ 'common.amount' | translate }} ({{ 'common.to' | translate }})</label>\\n                <input\\n                    type=\\\"text\\\"\\n                    class=\\\"form-control\\\"\\n                    id=\\\"counterAmount\\\"\\n                    name=\\\"counterAmount\\\"\\n                    [ngModel]=\\\"copy.counterTransaction?.amount\\\"\\n                    #counterAmount=\\\"ngModel\\\"\\n                    [disabled]=\\\"true\\\"\\n                />\\n            </div>\\n            <div class=\\\"form-group col-sm-12\\\">\\n                <label for=\\\"counterCurrency\\\">{{ 'common.currency' | translate }} (To)</label>\\n                <input\\n                    type=\\\"text\\\"\\n                    class=\\\"form-control\\\"\\n                    id=\\\"counterCurrency\\\"\\n                    name=\\\"counterCurrency\\\"\\n                    [ngModel]=\\\"copy.currency?.code\\\"\\n                    [disabled]=\\\"true\\\"\\n                />\\n            </div>\\n        </div>\\n\\n        <div class=\\\"callout callout-success mb-0\\\" *ngIf=\\\"isNew()\\\">\\n            <h6>{{ 'common.how-it-works' | translate }}</h6>\\n            <p>\\n                {{ 'common.submit-your-conversion' | translate }}\\n            </p>\\n            <p>{{ 'common.if-you-wish-to-accept' | translate }}</p>\\n        </div>\\n        <div class=\\\"mt-2\\\">\\n            <small class=\\\"text-muted\\\">\\n                <b>Disclaimer:</b> All services related to wallet, custody and currency exchange provided on this website are exclusively provided by\\n                Aerapass' third party suppliers. Aerapass allows to its customers access on an 'as-is' basis.\\n            </small>\\n        </div>\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n        <button *ngIf=\\\"copy.status === 'offered'\\\" type=\\\"button\\\" class=\\\"btn btn-success btn-w-sm\\\" (click)=\\\"accept()\\\">\\n            {{ 'common.accept' | translate }}\\n        </button>\\n        <button *ngIf=\\\"copy.status === 'offered'\\\" type=\\\"button\\\" class=\\\"btn btn-danger btn-w-sm\\\" (click)=\\\"decline()\\\">\\n            {{ 'common.decline' | translate }}\\n        </button>\\n        <button\\n            *ngIf=\\\"isNew()\\\"\\n            type=\\\"submit\\\"\\n            class=\\\"btn btn-primary btn-w-sm e2e-request-btn\\\"\\n            [ngClass]=\\\"{ loading: isSaving }\\\"\\n            [disabled]=\\\"isSaving\\\"\\n        >\\n            {{ 'common.request' | translate }}\\n        </button>\\n        <button *ngIf=\\\"!isNew()\\\" type=\\\"button\\\" class=\\\"btn btn-primary btn-w-sm\\\" (click)=\\\"activeModal.dismiss()\\\">\\n            {{ 'common.close' | translate }}\\n        </button>\\n    </div>\\n</form>\\n\";","import { Injectable } from '@angular/core'\nimport BigNumber from 'bignumber.js'\nimport { forkJoin, Observable, of } from 'rxjs'\nimport { map, take } from 'rxjs/operators'\nimport { CurrenciesQuery } from 'src/app/store/currencies/currencies.query'\nimport { FeesQuery } from 'src/app/store/fees/fees.query'\nimport { Transaction } from '../api-interfaces'\nimport { Currency } from '../models/accounting/currency.model'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SgpmxService {\n    constructor(private currenciesQuery: CurrenciesQuery, private feesQuery: FeesQuery) {}\n\n    public calculateFeeInUsd(transaction: Partial<Transaction> | Transaction): Observable<string> {\n        if (!transaction.currency || !transaction.amount) {\n            return of('0')\n        }\n        return forkJoin([\n            this.currenciesQuery.selectEntity('USD').pipe(take(1)),\n            this.currenciesQuery.selectEntity(transaction.currency.code).pipe(take(1)),\n            this.feesQuery\n                .findByPrimaryAttributes({\n                    type: 'transfer',\n                    method: 'internal',\n                    currencyCode: transaction.currency.code,\n                })\n                .pipe(take(1)),\n            this.feesQuery\n                .findByPrimaryAttributes({\n                    type: 'gst',\n                    method: 'internal',\n                    currencyCode: transaction.currency.code,\n                })\n                .pipe(take(1)),\n        ]).pipe(\n            map(([usd, currency, transferFee, gstFee]) => {\n                const usdValue = new BigNumber(Currency.convert(transaction.amount!, currency!, usd!)).decimalPlaces(2)\n                let feeAmount = usdValue.times(transferFee?.relative || 0).plus(transferFee?.fixed || 0)\n\n                if (transferFee?.min && feeAmount.isLessThan(transferFee.min)) {\n                    feeAmount = new BigNumber(transferFee.min)\n                } else if (transferFee?.max && feeAmount.isGreaterThan(transferFee.max)) {\n                    feeAmount = new BigNumber(transferFee.max)\n                }\n\n                let gst = feeAmount.times(gstFee?.relative || 0)\n                if (!feeAmount.isZero() && gstFee?.min && gst.isLessThan(gstFee.min)) {\n                    gst = new BigNumber(gstFee.min)\n                } else if (!feeAmount.isZero() && gstFee?.max && gst.isGreaterThan(gstFee.max)) {\n                    gst = new BigNumber(gstFee.max)\n                }\n\n                return feeAmount.plus(gst).toFixed(2)\n            })\n        )\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http'\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { cloneDeep } from 'lodash'\nimport { Subscription } from 'rxjs'\nimport { debounceTime, distinctUntilChanged, finalize, flatMap, map, switchMap, tap } from 'rxjs/operators'\nimport { IConversion, ICurrency, IUser, Paginated } from 'src/app/common/api-interfaces'\nimport { SecurityCheckService } from 'src/app/common/security-check/security-check.service'\nimport { ConversionService } from 'src/app/common/services/accounting/conversion.service'\nimport { ToastrService } from 'src/app/common/services/toastr.service'\nimport { environment } from 'src/environments/environment'\n\n@Component({\n    selector: 'user-conversion-form',\n    templateUrl: 'user-conversion-form.component.html',\n})\nexport class UserConversionFormComponent implements OnInit, OnDestroy {\n    @Input()\n    public item: IConversion\n    @Output()\n    public readonly onSave = new EventEmitter<void>()\n    @Output()\n    public readonly onDelete = new EventEmitter<void>()\n    @ViewChild('conversionForm')\n    public conversionForm: NgForm\n    public copy: Partial<IConversion> = {}\n    public isSaving = false\n    public user?: IUser\n    public userAutocomplete = new EventEmitter<string>()\n    public legalEntitiesStream = this.userAutocomplete.pipe(\n        distinctUntilChanged(),\n        debounceTime(200),\n        switchMap(search =>\n            this.http.get<IUser[]>('/users', {\n                params: new HttpParams().set('limit', '25').set('search', search),\n            })\n        )\n    )\n    public currencies: ICurrency[]\n    public filteredCurrencies: ICurrency[]\n    public canChangeOwner = true\n    public appName = environment.appName\n    private subscriptions = new Subscription()\n\n    constructor(\n        private http: HttpClient,\n        private toastr: ToastrService,\n        public activeModal: NgbActiveModal,\n        private securityCheckService: SecurityCheckService,\n        private conversionService: ConversionService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.copy = cloneDeep(this.item)\n        this.http\n            .get<Paginated<ICurrency>>('/currencies', {\n                params: {\n                    limit: 100 + '',\n                    'filter.holdable': JSON.stringify(true),\n                },\n            })\n            .pipe(map(response => response.data))\n            .subscribe(cur => {\n                this.currencies = cur\n                this.filteredCurrencies = cloneDeep(this.currencies)\n            })\n        if (this.item.user) {\n            this.canChangeOwner = false\n            this.user = this.item.user\n        }\n    }\n\n    public isNew(): boolean {\n        return !this.item.id\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (this.conversionForm.invalid) {\n            return\n        }\n\n        this.subscriptions.add(\n            this.securityCheckService\n                .getScopePermission('banking')\n                .pipe(\n                    flatMap(() =>\n                        this.conversionService.create({\n                            currency: this.copy.currency!,\n                            baseTransaction: {\n                                amount: this.copy.baseTransaction!.amount,\n                                currency: this.copy.baseTransaction!.currency,\n                            },\n                            user: this.user,\n                        })\n                    ),\n                    tap(conversion => {\n                        this.copy = conversion\n                    }),\n                    finalize(() => {\n                        this.isSaving = false\n                    })\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.conversion-created'))\n                    this.reset()\n                    this.onSave.emit()\n                })\n        )\n    }\n\n    public convertToISODate(date: string | null): string | null {\n        return date && `${date.slice(4)}-${date.slice(2, 4)}-${date.slice(0, 2)}`\n    }\n\n    public accept(): void {\n        this.subscriptions.add(\n            this.securityCheckService\n                .getScopePermission('banking')\n                .pipe(flatMap(() => this.conversionService.accept(this.item.id)))\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.conversion-accepted'))\n                    this.onSave.emit()\n                    this.activeModal.dismiss()\n                })\n        )\n    }\n\n    public decline(): void {\n        this.subscriptions.add(\n            this.securityCheckService\n                .getScopePermission('banking')\n                .pipe(() =>\n                    this.conversionService.patch(this.item.id, [\n                        {\n                            op: 'replace',\n                            path: '/status',\n                            value: 'declined',\n                        },\n                    ])\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.conversion-decline'))\n                    this.onSave.emit()\n                    this.activeModal.dismiss()\n                })\n        )\n    }\n\n    public filterCurrencies(): void {\n        if (\n            this.currencies &&\n            this.copy.baseTransaction &&\n            this.copy.baseTransaction.currency &&\n            this.copy.baseTransaction.currency.type === 'crypto'\n        ) {\n            this.filteredCurrencies = this.currencies.filter(currency => ['EUR', 'USD'].includes(currency.code))\n        } else {\n            this.filteredCurrencies = cloneDeep(this.currencies)\n        }\n    }\n\n    public resetBaseCurrency(): void {\n        if (\n            this.copy.currency &&\n            this.copy.currency.type === 'crypto' &&\n            !['USD', 'EUR'].includes(this.copy.baseTransaction?.currency.code!)\n        ) {\n            this.copy.baseTransaction!.currency = this.currencies.find(currency => currency.code === 'USD')!\n        }\n    }\n\n    private reset(): void {\n        this.user = undefined\n        this.conversionForm.reset()\n        this.conversionForm.resetForm()\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../../common/common.module'\nimport { UserConversionActionComponent } from './user-conversion-action.component'\nimport { UserConversionFormComponent } from './user-conversion-form.component'\nimport { UserConversionsRoutingModule } from './user-conversions-routing.module'\nimport { UserConversionsComponent } from './user-conversions.component'\n\n@NgModule({\n    declarations: [UserConversionsComponent, UserConversionFormComponent, UserConversionActionComponent],\n    imports: [CommonModule, UserConversionsRoutingModule],\n})\nexport class UserConversionsModule {}\n","import { HttpClient } from '@angular/common/http'\nimport { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core'\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router'\nimport { faEllipsisV } from '@fortawesome/pro-regular-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport * as Color from 'color'\nimport { values } from 'lodash'\nimport { combineLatest, forkJoin, of } from 'rxjs'\nimport { filter, finalize, flatMap } from 'rxjs/operators'\nimport { ListComponent } from 'src/app/common/list.component'\nimport { ConfirmationService } from 'src/app/common/services/confirmation.service'\nimport { IConversion, IUser } from '../../common/api-interfaces'\nimport { Conversion } from '../../common/models/accounting/conversion.model'\nimport { User } from '../../common/models/core/user.model'\nimport { openNoAccessModal } from '../../common/no-access-modal/no-access-modal.component'\nimport { ConversionService } from '../../common/services/accounting/conversion.service'\nimport { NotificationsService } from '../../common/services/notifications.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { UserConversionActionComponent } from './user-conversion-action.component'\nimport { UserConversionFormComponent } from './user-conversion-form.component'\n\nenum Mode {\n    ALL = 'all',\n    ACTIVE = 'active',\n    PENDING = 'pending',\n}\n\n@Component({\n    selector: 'user-conversions',\n    templateUrl: 'user-conversions.component.html',\n})\nexport class UserConversionsComponent extends ListComponent<Conversion> implements OnInit {\n    public user: IUser\n    public modes: Mode[] = values(Mode) as Mode[]\n    @Input()\n    public mode: Mode = Mode.ACTIVE\n    public conversionsChangingStatus = new Set<string>()\n\n    public faEllipsisV = faEllipsisV\n    public appColor = Color(getComputedStyle(document.body).getPropertyValue('--primary').trim()).lighten(0.1)\n\n    protected apiQuery = ['status']\n    protected defaultQuery = { status: { or: ['pending', 'offered', 'accepted'] } }\n    protected defaultLimit = this.limitOpts[0]\n    protected formComponent = UserConversionFormComponent\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        confirmation: ConfirmationService,\n        private notification: NotificationsService,\n        private toastr: ToastrService,\n        private conversionService: ConversionService,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n    }\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.session.userStream.subscribe(user => {\n                this.apiUrl = `/users/${user.id}/conversions`\n                this.user = new User(user)\n            })\n        )\n        this.subscriptions.add(\n            combineLatest(this.route.paramMap, this.route.queryParamMap)\n                .pipe(\n                    filter(([paramMap]) => paramMap.has('id')),\n                    flatMap(([paramMap, queryParamMap]) =>\n                        forkJoin([this.conversionService.fetchById(paramMap.get('id')!), of(queryParamMap)])\n                    )\n                )\n                .subscribe(([conversion, queryParamMap]: [Conversion, ParamMap]) => {\n                    const action = queryParamMap.get('action')\n                    const closeHook = () => this.router.navigate(['/services/conversions'])\n\n                    if (action && ['accept', 'decline'].includes(action)) {\n                        const modal = this.ngbModal.open(UserConversionActionComponent, {\n                            windowClass: 'modal-primary',\n                            backdrop: 'static',\n                        })\n                        const conversionActionComponent = modal.componentInstance as UserConversionActionComponent\n                        conversionActionComponent.action = action as 'accept' | 'decline'\n                        conversionActionComponent.conversion = conversion\n                        modal.result.then(closeHook, closeHook)\n\n                        this.subscriptions.add(\n                            conversionActionComponent.onConfirm\n                                .pipe(\n                                    flatMap(() =>\n                                        action === 'accept'\n                                            ? this.conversionService.accept(conversion.id)\n                                            : this.conversionService.patch(conversion.id, [\n                                                  {\n                                                      op: 'replace',\n                                                      path: '/status',\n                                                      value: 'declined',\n                                                  },\n                                              ])\n                                    )\n                                )\n                                .subscribe(async () => {\n                                    this.updateEvent.next()\n                                    this.toastr.success(\n                                        `${this.translate.instant('common.conversion')} ${\n                                            action === 'accept'\n                                                ? this.translate.instant('common.accepted')\n                                                : this.translate.instant('common.declined')\n                                        }`\n                                    )\n                                    modal.close()\n                                })\n                        )\n                    } else {\n                        const modal = this.ngbModal.open(UserConversionFormComponent, {\n                            windowClass: 'modal-primary',\n                            backdrop: 'static',\n                        })\n                        modal.componentInstance.item = conversion\n                        modal.result.then(closeHook, closeHook)\n                    }\n                })\n        )\n        super.ngOnInit()\n    }\n\n    public accept(conversion: Conversion): void {\n        this.conversionsChangingStatus.add(conversion.id)\n        const modal = this.ngbModal.open(UserConversionActionComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        const conversionActionComponent = modal.componentInstance as UserConversionActionComponent\n        conversionActionComponent.action = 'accept'\n        conversionActionComponent.conversion = conversion\n        const actionSubscription = conversionActionComponent.onConfirm\n            .pipe(flatMap(() => this.conversionService.accept(conversion.id)))\n            .subscribe(() => {\n                modal.close()\n                this.toastr.success(this.translate.instant('common.conversion-accepted'))\n                this.updateEvent.next()\n            })\n        const closeHook = () => {\n            actionSubscription.unsubscribe()\n            this.conversionsChangingStatus.delete(conversion.id)\n        }\n        modal.result.then(closeHook, closeHook)\n    }\n\n    public decline(conversion: Conversion): void {\n        this.conversionsChangingStatus.add(conversion.id)\n        const modal = this.ngbModal.open(UserConversionActionComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        const conversionActionComponent = modal.componentInstance as UserConversionActionComponent\n        conversionActionComponent.action = 'decline'\n        conversionActionComponent.conversion = conversion\n        const actionSubscription = conversionActionComponent.onConfirm\n            .pipe(\n                flatMap(() =>\n                    this.conversionService.patch(conversion.id, [\n                        {\n                            op: 'replace',\n                            path: '/status',\n                            value: 'declined',\n                        },\n                    ])\n                )\n            )\n            .subscribe(() => {\n                modal.close()\n                this.toastr.success(this.translate.instant('user-conversions.conversion-declined'))\n                this.updateEvent.next()\n            })\n        const closeHook = () => {\n            actionSubscription.unsubscribe()\n            this.conversionsChangingStatus.delete(conversion.id)\n        }\n        modal.result.then(closeHook, closeHook)\n    }\n\n    public cancel(conversion: Conversion): void {\n        this.subscriptions.add(\n            this.conversionService\n                .patch(conversion.id, [\n                    {\n                        op: 'replace',\n                        path: '/status',\n                        value: 'cancelled',\n                    },\n                ])\n                .pipe(\n                    finalize(() => {\n                        this.conversionsChangingStatus.delete(conversion.id)\n                    })\n                )\n                .subscribe(response => {\n                    Object.assign(conversion, response)\n                    this.toastr.success(this.translate.instant('common.conversion-cancelled'))\n                    this.updateEvent.next()\n                })\n        )\n    }\n\n    public gotoConversion(conversion: Conversion): void {\n        const closeHook = () => {\n            this.updateEvent.next()\n            this.notification.notifyEvent.next()\n        }\n        const modal = this.ngbModal.open(UserConversionFormComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        modal.componentInstance.item = conversion\n        modal.result.then(closeHook, closeHook)\n    }\n\n    public newConversion(event: MouseEvent): void {\n        if (this.session.user.accessErrors.length > 0) {\n            openNoAccessModal(this.ngbModal, this.session.user.accessErrors[0])\n            return\n        }\n        const conversion: Partial<IConversion> = {\n            baseTransaction: {} as any,\n            user: this.user,\n        }\n        this.showForm(event, conversion as Conversion)\n    }\n\n    protected mapItem(item: any): Conversion {\n        return new Conversion(item)\n    }\n}\n","export default \"<div class=\\\"container pt-page pb-3\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.conversions' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\"><a [routerLink]=\\\"['/dashboard']\\\">Home</a></li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.conversions' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n    <div class=\\\"row justify-content-between align-items-center\\\">\\n        <div class=\\\"col\\\">\\n            <button\\n                type=\\\"button\\\"\\n                class=\\\"btn mr-2\\\"\\n                (click)=\\\"queryParams = getDefaultQuery(); searchEvent.next()\\\"\\n                [ngClass]=\\\"isActiveQuery(getDefaultQuery()) ? 'btn-primary' : 'btn-primary-air'\\\"\\n            >\\n                {{ 'common.all' | translate }}\\n            </button>\\n            <div class=\\\"btn-group mr-2\\\">\\n                <button\\n                    type=\\\"button\\\"\\n                    class=\\\"btn\\\"\\n                    (click)=\\\"queryParams['status']['or'] = ['pending']; searchEvent.next()\\\"\\n                    [ngClass]=\\\"isActiveQuery({ status: { or: ['pending'] } }) ? 'btn-primary' : 'btn-primary-air'\\\"\\n                >\\n                    {{ 'common.pending' | translate }}\\n                </button>\\n                <button\\n                    type=\\\"button\\\"\\n                    class=\\\"btn\\\"\\n                    (click)=\\\"queryParams['status']['or'] = ['offered']; searchEvent.next()\\\"\\n                    [ngClass]=\\\"isActiveQuery({ status: { or: ['offered'] } }) ? 'btn-primary' : 'btn-primary-air'\\\"\\n                >\\n                    {{ 'common.offered' | translate }}\\n                </button>\\n                <button\\n                    type=\\\"button\\\"\\n                    class=\\\"btn\\\"\\n                    (click)=\\\"queryParams['status']['or'] = ['accepted']; searchEvent.next()\\\"\\n                    [ngClass]=\\\"isActiveQuery({ status: { or: ['accepted'] } }) ? 'btn-primary' : 'btn-primary-air'\\\"\\n                >\\n                    {{ 'common.accepted' | translate }}\\n                </button>\\n            </div>\\n        </div>\\n        <div class=\\\"col-auto pt-3 pt-md-0\\\">\\n            <button class=\\\"btn btn-primary-air e2e-create-conversion-btn\\\" (click)=\\\"$event.preventDefault(); newConversion($event)\\\">\\n                <fa-icon class=\\\"mr-1\\\" [icon]=\\\"faPlus\\\"></fa-icon> {{ 'common.new-conversion' | translate }}\\n            </button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"container e2e-user-conversions\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header b-b-0\\\">{{ 'common.conversions' | translate }}</div>\\n        <div class=\\\"table-responsive\\\">\\n            <table class=\\\"table table-hover table-card\\\">\\n                <thead class=\\\"thead-light\\\">\\n                    <tr>\\n                        <th scope=\\\"col\\\">{{ 'common.subject' | translate }}</th>\\n                        <th scope=\\\"col\\\" class=\\\"text-right\\\">{{ 'common.from' | translate }}</th>\\n                        <th scope=\\\"col\\\" class=\\\"text-right\\\">To</th>\\n                        <th scope=\\\"col\\\" class=\\\"text-right\\\">{{ 'common.exchange-rate' | translate }}</th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.status' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.expires-at' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['expiresAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['expiresAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['expiresAt']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.created-at' | translate | titlecase }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['createdAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['createdAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['createdAt']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\"></th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                        <ng-container *ngIf=\\\"items.length === 0; else rows\\\">\\n                            <tr>\\n                                <td class=\\\"bg-white\\\" colspan=\\\"12\\\">\\n                                    <div class=\\\"mx-auto p-3 mt-2 mb-4 text-center max-width-sm\\\">\\n                                        <img src=\\\"/img/icons/refresh.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                                        <h4 class=\\\"mb-1\\\">{{ 'common.convert-your-currency' | translate }}</h4>\\n                                        <p class=\\\"mb-3 text-gray\\\">{{ 'common.need-to-convert' | translate }}</p>\\n                                        <button type=\\\"button\\\" class=\\\"btn btn-primary-air btn-lg btn-block\\\" (click)=\\\"newConversion($event)\\\">\\n                                            {{ 'common.create-conversion' | translate }}\\n                                        </button>\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-template #rows>\\n                            <tr\\n                                *ngFor=\\\"let conversion of itemsStream | async\\\"\\n                                class=\\\"clickable bg-white\\\"\\n                                (click)=\\\"$event.preventDefault(); gotoConversion(conversion)\\\"\\n                            >\\n                                <th scope=\\\"row\\\">\\n                                    <div class=\\\"d-flex align-items-center\\\">\\n                                        <!-- htmllint attr-bans=\\\"[]\\\" -->\\n                                        <div class=\\\"avatar avatar-sm mr-3\\\">\\n                                            <svg\\n                                                class=\\\"img-avatar\\\"\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n                                                xml:space=\\\"preserve\\\"\\n                                                text-rendering=\\\"geometricPrecision\\\"\\n                                                style=\\\"\\n                                                    shape-rendering: geometricPrecision;\\n                                                    image-rendering: optimizeQuality;\\n                                                    fill-rule: evenodd;\\n                                                    clip-rule: evenodd;\\n                                                \\\"\\n                                                viewBox=\\\"0 0 120 120\\\"\\n                                            >\\n                                                <g>\\n                                                    <rect [style.fill]=\\\"appColor\\\" width=\\\"120\\\" height=\\\"120\\\"></rect>\\n                                                    <text\\n                                                        font-weight=\\\"500\\\"\\n                                                        font-size=\\\"3.25em\\\"\\n                                                        font-family=\\\"sans-serif\\\"\\n                                                        fill=\\\"#ffffff\\\"\\n                                                        x=\\\"50%\\\"\\n                                                        y=\\\"50%\\\"\\n                                                        text-anchor=\\\"middle\\\"\\n                                                        dy=\\\"0.35em\\\"\\n                                                    >\\n                                                        {{ conversion.currency.code }}\\n                                                    </text>\\n                                                </g>\\n                                            </svg>\\n                                        </div>\\n                                        <!-- htmllint attr-bans=\\\"$previous\\\" -->\\n                                        <div>\\n                                            <div>{{ conversion.baseTransaction.currency.code }} to {{ conversion.currency.code }}</div>\\n                                            <div><uuid [value]=\\\"conversion.id\\\"></uuid></div>\\n                                        </div>\\n                                    </div>\\n                                </th>\\n                                <td class=\\\"text-right\\\">\\n                                    <span class=\\\"text-danger\\\" *ngIf=\\\"conversion.baseTransaction\\\">\\n                                        {{ conversion.baseTransaction.amount | amount: conversion.baseTransaction.currency.decimalPlaces }}\\n                                        {{ conversion.baseTransaction.currency.code }}</span\\n                                    >\\n                                </td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"conversion.counterTransaction; else pending\\\">\\n                                        <span class=\\\"text-green\\\" *ngIf=\\\"conversion.counterTransaction\\\"\\n                                            >{{\\n                                                conversion.counterTransaction.amount | amount: conversion.counterTransaction.currency.decimalPlaces\\n                                            }}\\n                                            {{ conversion.counterTransaction.currency.code }}</span\\n                                        >\\n                                    </ng-container>\\n                                </td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"conversion.counterTransaction; else pending\\\">\\n                                        <span class=\\\"text-primary\\\"\\n                                            >{{ conversion.exchangeRate | amount: conversion.currency.decimalPlaces }}\\n                                            {{ conversion.currency.code }}</span\\n                                        >\\n                                    </ng-container>\\n                                </td>\\n                                <td>\\n                                    <span\\n                                        [ngbTooltip]=\\\"conversion.id\\\"\\n                                        class=\\\"text-capitalize label label-danger\\\"\\n                                        *ngIf=\\\"conversion.status === 'offered' && (conversion.expiresAt | isBefore); else showStatus\\\"\\n                                    >\\n                                        {{ 'common.expired' | translate }}\\n                                    </span>\\n                                    <ng-template #showStatus>\\n                                        <span\\n                                            placement=\\\"right\\\"\\n                                            [ngbTooltip]=\\\"conversion.id\\\"\\n                                            class=\\\"text-capitalize label\\\"\\n                                            [ngClass]=\\\"{\\n                                                'label-success': conversion.status === 'accepted',\\n                                                'label-info': conversion.status === 'pending',\\n                                                'label-warning': conversion.status === 'offered',\\n                                                'label-danger': ['cancelled', 'declined'].includes(conversion.status)\\n                                            }\\\"\\n                                            >{{ conversion.status }}</span\\n                                        >\\n                                    </ng-template>\\n                                </td>\\n                                <td>\\n                                    <ng-container *ngIf=\\\"conversion.expiresAt; else pending\\\">{{\\n                                        conversion.expiresAt | date: 'mediumDate'\\n                                    }}</ng-container>\\n                                </td>\\n                                <td>\\n                                    {{ conversion.createdAt | date: 'medium' }}\\n                                </td>\\n                                <td class=\\\"action\\\">\\n                                    <div\\n                                        ngbDropdown\\n                                        container=\\\"body\\\"\\n                                        placement=\\\"bottom-right\\\"\\n                                        #dropdown=\\\"ngbDropdown\\\"\\n                                        (click)=\\\"$event.stopPropagation()\\\"\\n                                        *ngIf=\\\"\\n                                            conversion.status === 'pending' || (conversion.status === 'offered' && !(conversion.expiresAt | isBefore))\\n                                        \\\"\\n                                    >\\n                                        <button class=\\\"btn btn-transparent\\\" type=\\\"button\\\" ngbDropdownToggle>\\n                                            <fa-icon [icon]=\\\"faEllipsisV\\\"></fa-icon>\\n                                        </button>\\n                                        <div class=\\\"dropdown-menu dropdown-menu-sm\\\" ngbDropdownMenu>\\n                                            <a\\n                                                class=\\\"e2e-accept-conversion-btn\\\"\\n                                                href\\n                                                ngbDropdownItem\\n                                                (click)=\\\"!conversionsChangingStatus.has(conversion.id) && accept(conversion); $event.preventDefault()\\\"\\n                                                *ngIf=\\\"conversion.status === 'offered'\\\"\\n                                                >Accept</a\\n                                            >\\n                                            <a\\n                                                class=\\\"e2e-decline-conversion-btn\\\"\\n                                                href\\n                                                ngbDropdownItem\\n                                                (click)=\\\"\\n                                                    !conversionsChangingStatus.has(conversion.id) && decline(conversion); $event.preventDefault()\\n                                                \\\"\\n                                                *ngIf=\\\"conversion.status === 'offered'\\\"\\n                                                >{{ 'common.decline' | translate }}</a\\n                                            >\\n                                            <a\\n                                                class=\\\"e2e-cancel-conversion-btn\\\"\\n                                                href\\n                                                ngbDropdownItem\\n                                                (click)=\\\"!conversionsChangingStatus.has(conversion.id) && cancel(conversion); $event.preventDefault()\\\"\\n                                                *ngIf=\\\"conversion.status === 'pending'\\\"\\n                                                >{{ 'common.cancel' | translate }}</a\\n                                            >\\n                                        </div>\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                            <tr *ngFor=\\\"let empty of fill\\\" class=\\\"fill\\\">\\n                                <td colspan=\\\"12\\\">\\n                                    <div>&nbsp;</div>\\n                                    <span>&nbsp;</span>\\n                                </td>\\n                            </tr>\\n                        </ng-template>\\n                    </ng-container>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n    <footer class=\\\"table-footer mb-3\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-6 col-md-8\\\">\\n                <ng-select\\n                    [(ngModel)]=\\\"limit\\\"\\n                    dropdownPosition=\\\"auto\\\"\\n                    (change)=\\\"select(1)\\\"\\n                    [items]=\\\"limitOpts\\\"\\n                    [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                    [clearable]=\\\"false\\\"\\n                    [searchable]=\\\"false\\\"\\n                    required\\n                >\\n                    <ng-template ng-label-tmp let-item=\\\"item\\\"\\n                        >{{ 'common.show' | translate }} {{ item }} {{ 'common.per-page' | translate }}</ng-template\\n                    >\\n                    <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                </ng-select>\\n            </div>\\n            <div class=\\\"col-lg-18 col-md-16 d-flex justify-content-center justify-content-md-end mt-3 mt-md-0\\\">\\n                <ngb-pagination\\n                    [(page)]=\\\"page\\\"\\n                    [collectionSize]=\\\"count\\\"\\n                    (pageChange)=\\\"select()\\\"\\n                    [pageSize]=\\\"limit\\\"\\n                    [maxSize]=\\\"4\\\"\\n                    [rotate]=\\\"false\\\"\\n                    [boundaryLinks]=\\\"true\\\"\\n                >\\n                </ngb-pagination>\\n            </div>\\n        </div>\\n    </footer>\\n</div>\\n\\n<ng-template #pending><span class=\\\"text-muted\\\">...</span></ng-template>\\n\";","import { Injectable } from '@angular/core'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { Observable, of } from 'rxjs'\nimport { SessionService, TokenScope } from '../services/session.service'\nimport { ConfirmPasswordModalComponent } from './confirm-password.modal'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SecurityCheckService {\n    constructor(private ngbModal: NgbModal, private session: SessionService) {}\n\n    /**\n     * Asks the user for permission to do something that requires a higher scope than basic\n     * Resolves if the check was successful or the permission is still granted from another request\n     * @param scope The required scope\n     */\n    public getScopePermission(scope: TokenScope): Observable<void> {\n        // Resolve if token has already the correct scope\n        if (this.session.hasTokenScope(scope)) {\n            return of(undefined)\n        }\n        const modal = this.ngbModal.open(ConfirmPasswordModalComponent, {\n            windowClass: 'modal-primary security-check-modal',\n        })\n        ;(modal.componentInstance as ConfirmPasswordModalComponent).scope = scope\n        return new Observable(observer => {\n            modal.result\n                .then(() => {\n                    observer.next()\n                    observer.complete()\n                })\n                .catch(() => {\n                    observer.complete()\n                })\n        })\n    }\n}\n","import { Component, Input } from '@angular/core'\nimport { Conversion } from 'src/app/common/models/accounting/conversion.model'\nimport { PaymentConfirmationComponent } from 'src/app/common/payment/payment-confirmation/payment-confirmation.component'\n\n@Component({\n    selector: 'user-conversion-action',\n    templateUrl: 'user-conversion-action.component.html',\n})\nexport class UserConversionActionComponent extends PaymentConfirmationComponent {\n    @Input()\n    public action: 'accept' | 'decline'\n    @Input()\n    public conversion: Conversion\n}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../../common/logged-in.auth-guard'\nimport { UserConversionsComponent } from './user-conversions.component'\n\nconst routes: Routes = [\n    {\n        path: ':id',\n        component: UserConversionsComponent,\n        canActivate: [LoggedInAuthGuard],\n    },\n    {\n        path: '',\n        component: UserConversionsComponent,\n        canActivate: [LoggedInAuthGuard],\n        pathMatch: 'full',\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class UserConversionsRoutingModule {}\n","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">{{ (action === 'accept' ? 'common.accept' : 'accept.decline') | translate }} {{ 'common.offer' | translate }}</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"modal.dismiss()\\\">&times;</button>\\n</div>\\n<div class=\\\"modal-body e2e-confirm-conversion\\\">\\n    <h5 class=\\\"text-center\\\">{{ 'common.you-are-about-to' | translate }} {{ action }} {{ 'common.the-offer' | translate }}:</h5>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col text-right\\\">{{ 'common.you-sell' | translate }}</div>\\n        <div class=\\\"col\\\">\\n            {{ conversion?.baseTransaction?.amount | amount: conversion?.baseTransaction?.currency?.decimalPlaces }}\\n            {{ conversion?.baseTransaction?.currency?.code }}\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col text-right\\\">{{ 'common.you-buy' | translate }}</div>\\n        <div class=\\\"col\\\">\\n            {{ conversion?.counterTransaction?.amount | amount: conversion?.counterTransaction?.currency?.decimalPlaces }}\\n            {{ conversion?.counterTransaction?.currency?.code }}\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col text-right\\\">{{ 'common.offer-expires-at' | translate }}</div>\\n        <div class=\\\"col\\\">{{ conversion?.expiresAt | date: 'medium' }}</div>\\n    </div>\\n    <br />\\n    <form class=\\\"form-validation\\\" #passwordForm=\\\"ngForm\\\" (ngSubmit)=\\\"submit()\\\" novalidate>\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"alert\\\">\\n            {{ alert }}\\n        </div>\\n        <div class=\\\"form-group\\\" *ngIf=\\\"!showTwoFactorForm\\\">\\n            <div class=\\\"input-group input-group-lg\\\">\\n                <span class=\\\"input-group-prepend\\\">\\n                    <span class=\\\"input-group-text\\\">\\n                        <fa-icon [icon]=\\\"faLockAlt\\\"></fa-icon>\\n                    </span>\\n                </span>\\n                <input\\n                    type=\\\"password\\\"\\n                    class=\\\"form-control\\\"\\n                    name=\\\"password\\\"\\n                    [placeholder]=\\\"'common.enter-your-password' | translate\\\"\\n                    [(ngModel)]=\\\"password\\\"\\n                    [focus]=\\\"true\\\"\\n                    required\\n                />\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\" *ngIf=\\\"showTwoFactorForm\\\">\\n            <div class=\\\"input-group input-group-lg\\\">\\n                <span class=\\\"input-group-prepend\\\">\\n                    <span class=\\\"input-group-text\\\">\\n                        <fa-icon [icon]=\\\"faMobile\\\"></fa-icon>\\n                    </span>\\n                </span>\\n                <input\\n                    type=\\\"text\\\"\\n                    class=\\\"form-control\\\"\\n                    name=\\\"twoFactorCode\\\"\\n                    [placeholder]=\\\"'common.enter-2fa-code' | translate\\\"\\n                    number\\n                    [(ngModel)]=\\\"twoFactorCode\\\"\\n                    [focus]=\\\"true\\\"\\n                    required\\n                />\\n            </div>\\n        </div>\\n        <button\\n            type=\\\"submit\\\"\\n            class=\\\"btn btn-lg btn-block btn-primary\\\"\\n            [ngClass]=\\\"{ loading: isLoading }\\\"\\n            [disabled]=\\\"!passwordForm.valid || isLoading\\\"\\n        >\\n            {{ 'common.confirm' | translate }}\\n        </button>\\n    </form>\\n</div>\\n\";"],"sourceRoot":"webpack:///"}