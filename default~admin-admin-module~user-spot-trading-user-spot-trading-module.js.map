{"version":3,"sources":["./src/app/common/spot-trading/spot-trading-form.component.html","./src/app/common/spot-trading/spot-trading.module.ts","./src/app/common/spot-trading/spot-trading-form.component.ts","./node_modules/ngx-trend/__ivy_ngcc__/fesm2015/ngx-trend.js","./src/app/common/spot-trading/spot-trading-feed.component.html","./src/app/common/spot-trading/spot-trading-quote-modal.component.html","./src/app/common/spot-trading/spot-trading.component.scss","./src/app/common/spot-trading/spot-trading-quote-modal.component.ts","./src/app/common/spot-trading/spot-trading-feed.component.ts"],"names":[],"mappings":"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D,CAAC;GACW,wBAAwB,CA4GpC;AA5GoC;;;;;;;;;;;;;ACfrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4F;AACtB;AACvB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACE;;AAE1C;AACA,8EAA8E;AAC9E,IAAI,4DAAqB;AACzB,IAAI,uDAAgB;AACpB,CAAC;AACD;AACA,IAAI,yDAAkB;AACtB,CAAC;AACD,kEAAkE;AAClE,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,uDAAgB;AACpB,IAAI,yDAAkB;AACtB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,mCAAmC,SAAS,4DAA4D;AACxG,+BAA+B,SAAS,yBAAyB;AACjE,sDAAsD;AACtD,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,yDAAkB;AACtB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB,mBAAmB,6DAAsB,iCAAiC,6DAAsB;AACrH,IAAI,yDAAkB;AACtB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK,EAAE,YAAY,GAAG,QAAQ,GAAG,QAAQ;AACvD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK,MAAM,QAAQ,GAAG,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS,GAAG,SAAS;AACtC,iBAAiB,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ;AAC1D;AACA,KAAK,OAAO,aAAa,GAAG,aAAa;AACzC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,yBAAyB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,QAAQ;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW,GAAG,WAAW,GAAG,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,aAAa,GAAG,cAAc;AAC5D;AACA;AACA,4DAA4D,KAAK,GAAG,gBAAgB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,oCAAoC;AAC9F,sBAAsB,+DAAwB,EAAE,sGAAsG;AACtJ,QAAQ,yDAAkB;AAC1B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,qYAAqY,aAAa,kEAA2B,iNAAiN;AAChpB,QAAQ,wDAAiB;AACzB,KAAK;AACL,QAAQ,wDAAiB;AACzB,KAAK,EAAE,eAAe,oDAAW,EAAE,uDAAc,4BAA4B;AAC7E,YAAY,mEAAO;AACnB,gBAAgB,iEAAK,aAAa,iEAAK,EAAE,kBAAkB;AAC3D,gBAAg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","file":"default~admin-admin-module~user-spot-trading-user-spot-trading-module.js","sourcesContent":["export default \"<form #spotTradeForm=\\\"ngForm\\\" (ngSubmit)=\\\"requestQuote()\\\" autocomplete=\\\"false\\\" novalidate>\\n    <div *ngIf=\\\"isUserSelectAllowed\\\" class=\\\"form-group\\\">\\n        <label class=\\\"font-md\\\">{{ 'common.user' | translate }}</label>\\n        <ng-select\\n            name=\\\"user\\\"\\n            [placeholder]=\\\"'common.select-user' | translate\\\"\\n            [(ngModel)]=\\\"user\\\"\\n            bindValue=\\\"user\\\"\\n            #userInput=\\\"ngModel\\\"\\n            [items]=\\\"usersStream | async\\\"\\n            [typeahead]=\\\"userAutocomplete\\\"\\n            [clearable]=\\\"false\\\"\\n            required\\n        >\\n            <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                <div class=\\\"d-flex align-items-center justify-content-center\\\">\\n                    <user-display *ngIf=\\\"item\\\" [user]=\\\"item.user\\\"></user-display>\\n                    <small *ngIf=\\\"item.user\\\" class=\\\"text-gray ml-1\\\">{{ item.user.email }}</small>\\n                </div>\\n            </ng-template>\\n            <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                <div class=\\\"d-flex align-items-center justify-content-center\\\">\\n                    <user-avatar *ngIf=\\\"item\\\" [user]=\\\"item.user\\\" size=\\\"sm\\\" elementClass=\\\"mr-2\\\"></user-avatar>\\n                    <div class=\\\"w-100\\\">\\n                        <ng-container *ngIf=\\\"item.user\\\">\\n                            <div>{{ item.user.name }}</div>\\n                            <small class=\\\"text-gray\\\">{{ item.user.email }}</small>\\n                        </ng-container>\\n                    </div>\\n                </div>\\n            </ng-template>\\n        </ng-select>\\n        <div *ngIf=\\\"userInput.invalid && (spotTradeForm.submitted || userInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"userInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label class=\\\"font-md\\\" for=\\\"instrument\\\">{{ 'common.instrument' | translate }}</label>\\n        <ng-select\\n            class=\\\"ng-select-lg\\\"\\n            name=\\\"instrument\\\"\\n            [placeholder]=\\\"'common.select-instrument' | translate\\\"\\n            [items]=\\\"instruments\\\"\\n            [searchable]=\\\"false\\\"\\n            [clearable]=\\\"false\\\"\\n            [(ngModel)]=\\\"copy.instrument\\\"\\n            #instrument=\\\"ngModel\\\"\\n            required\\n        >\\n            <ng-template ng-label-tmp let-item=\\\"item\\\">{{ buildCurrencyPair(item) }}</ng-template>\\n            <ng-template ng-option-tmp let-item=\\\"item\\\">{{ buildCurrencyPair(item) }}</ng-template>\\n        </ng-select>\\n        <div *ngIf=\\\"instrument.invalid && (spotTradeForm.submitted || instrument.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"instrument?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label class=\\\"font-md\\\">{{ 'common.side' | translate }}</label>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col\\\">\\n                <div class=\\\"custom-control custom-radio btn btn-outline-danger btn-lg bg-transparent\\\" (click)=\\\"copy.side = 'sell'\\\">\\n                    <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" id=\\\"side-sell\\\" name=\\\"side\\\" value=\\\"sell\\\" [(ngModel)]=\\\"copy.side\\\" />\\n                    <label class=\\\"custom-control-label text-danger font-weight-normal\\\" for=\\\"side-sell\\\">{{\\n                        'common.sell' | translate | uppercase\\n                    }}</label>\\n                </div>\\n            </div>\\n            <div class=\\\"col\\\">\\n                <div class=\\\"custom-control custom-radio btn btn-outline-primary btn-lg bg-transparent\\\" (click)=\\\"copy.side = 'buy'\\\">\\n                    <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" id=\\\"side-buy\\\" name=\\\"side\\\" value=\\\"buy\\\" [(ngModel)]=\\\"copy.side\\\" />\\n                    <label class=\\\"custom-control-label text-primary font-weight-normal\\\" for=\\\"side-buy\\\">{{\\n                        'common.buy' | translate | uppercase\\n                    }}</label>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label class=\\\"font-md\\\" for=\\\"amount\\\">{{ 'common.amount' | translate }}</label>\\n        <div class=\\\"input-group\\\">\\n            <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"amount\\\"\\n                name=\\\"amount\\\"\\n                [(ngModel)]=\\\"copy.quantity\\\"\\n                #amountInput=\\\"ngModel\\\"\\n                emptyToNull\\n                required\\n            />\\n            <div class=\\\"input-group-append\\\">\\n                <span class=\\\"input-group-text font-lg\\\">{{ getBaseCurrency(copy.instrument) }}</span>\\n            </div>\\n        </div>\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-lg btn-block\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n        {{ 'common.request-quote' | translate }}\\n    </button>\\n</form>\\n\";","import { NgModule } from '@angular/core'\nimport { CountdownModule } from 'ngx-countdown'\nimport { TrendModule } from 'ngx-trend'\nimport { CommonModule } from '../common.module'\nimport { SpotTradingFeedComponent } from './spot-trading-feed.component'\nimport { SpotTradingFormComponent } from './spot-trading-form.component'\nimport { SpotTradingQuoteModalComponent } from './spot-trading-quote-modal.component'\n\n@NgModule({\n    declarations: [SpotTradingFeedComponent, SpotTradingQuoteModalComponent, SpotTradingFormComponent],\n    exports: [SpotTradingFeedComponent, SpotTradingQuoteModalComponent, SpotTradingFormComponent],\n    imports: [CommonModule, TrendModule, CountdownModule],\n})\nexport class SpotTradingModule {}\n","import { HttpClient, HttpParams } from '@angular/common/http'\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { debounceTime, distinctUntilChanged, finalize, map, switchMap } from 'rxjs/operators'\nimport { WalletsService } from 'src/app/store/wallets/wallets.service'\nimport { ISpotTrade, IUser, SpotTradeInstrument } from '../api-interfaces'\nimport { SessionService } from '../services/session.service'\nimport { ToastrService } from '../services/toastr.service'\nimport { SpotTradingQuoteModalComponent } from './spot-trading-quote-modal.component'\n\n@Component({\n    selector: 'spot-trading-form',\n    templateUrl: 'spot-trading-form.component.html',\n})\nexport class SpotTradingFormComponent {\n    @Input()\n    isUserSelectAllowed = false\n    @Output()\n    public onExecuteTrade = new EventEmitter<void>()\n\n    public instruments: SpotTradeInstrument[] = ['BTCUSD.SPOT', 'ETHUSD.SPOT', 'LTCUSD.SPOT', 'USTUSD.SPOT']\n    public copy: Partial<ISpotTrade> = {\n        side: 'buy',\n        instrument: this.instruments[0],\n    }\n    public user: IUser\n    public isLoading = false\n\n    @ViewChild('spotTradeForm')\n    public spotTradeForm: NgForm\n\n    public userAutocomplete = new EventEmitter<string>()\n    public usersStream = this.userAutocomplete.pipe(\n        distinctUntilChanged(),\n        debounceTime(200),\n        switchMap(search =>\n            this.http.get<IUser[]>('/users', {\n                params: new HttpParams().set('limit', '25').set('search', search),\n            })\n        ),\n        map(results => results.map(user => ({ user })))\n    )\n\n    constructor(\n        private http: HttpClient,\n        private session: SessionService,\n        private toastr: ToastrService,\n        private walletsService: WalletsService,\n        private ngbModal: NgbModal\n    ) {}\n\n    public requestQuote(): void {\n        this.isLoading = true\n        this.http\n            .post<ISpotTrade>('/spot-trades/request-for-quote', {\n                ...this.copy,\n                userId: this.user?.id ?? this.session.user.id,\n            })\n            .pipe(\n                finalize(() => {\n                    this.isLoading = false\n                })\n            )\n            .subscribe(response => {\n                this.openQuoteModal(response)\n            })\n    }\n\n    public executeTrade(trade: ISpotTrade): void {\n        this.isLoading = true\n        this.http\n            .post<ISpotTrade>('/spot-trades', {\n                ...trade,\n                userId: this.user?.id ?? this.session.user.id,\n            })\n            .pipe(\n                finalize(() => {\n                    this.isLoading = false\n                })\n            )\n            .subscribe(() => {\n                this.toastr.success('Trade executed')\n                if (this.spotTradeForm) {\n                    this.spotTradeForm.form.markAsUntouched()\n                }\n                this.copy = {\n                    side: trade.side,\n                    instrument: this.instruments[0],\n                }\n                this.walletsService.fetch()\n                this.onExecuteTrade.next()\n            })\n    }\n\n    public openQuoteModal(trade: any): void {\n        const modal = this.ngbModal.open(SpotTradingQuoteModalComponent, {\n            windowClass: trade.side === 'buy' ? 'modal-primary' : 'modal-danger',\n            backdrop: 'static',\n        })\n        const component = modal.componentInstance as SpotTradingQuoteModalComponent\n        component.trade = trade\n        component.onExecute.subscribe(() => {\n            modal.close()\n            this.executeTrade(trade)\n        })\n    }\n\n    public getBaseCurrency(instrument: SpotTradeInstrument | undefined): string {\n        if (!instrument) {\n            return ''\n        }\n        const parts = instrument!.split('.')\n        return parts[0].slice(0, 3)\n    }\n\n    public buildCurrencyPair(instrument: SpotTradeInstrument): string {\n        if (!instrument) {\n            return ''\n        }\n        const parts = instrument.split('.')\n        return `${parts[0].slice(0, 3)} / ${parts[0].slice(3, 6)}`\n    }\n}\n","import { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\nimport { Component, Input, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/* eslint-disable no-restricted-properties */\n/** normalize\n * This lets us translate a value from one scale to another.\n *\n * @param value - Our initial value to translate\n * @param min - the current minimum value possible\n * @param max - the current maximum value possible\n * @param scaleMin - the min value of the scale we're translating to\n * @param scaleMax - the max value of the scale we're translating to\n * @returns the value on its new scale\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = [\"pathEl\"];\nfunction TrendComponent__svg_svg_0__svg_defs_1__svg_stop_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"stop\");\n} if (rf & 2) {\n    const g_r4 = ctx.$implicit;\n    ɵngcc0.ɵɵattribute(\"key\", g_r4.idx)(\"offset\", g_r4.offset)(\"stop-color\", g_r4.stopColor);\n} }\nfunction TrendComponent__svg_svg_0__svg_defs_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"defs\");\n    ɵngcc0.ɵɵelementStart(1, \"linearGradient\", 3);\n    ɵngcc0.ɵɵtemplate(2, TrendComponent__svg_svg_0__svg_defs_1__svg_stop_2_Template, 1, 3, \"stop\", 4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r1.gradientId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.gradientTrimmed);\n} }\nconst _c1 = function (a0, a1, a2) { return { autoDrawDuration: a0, autoDrawEasing: a1, lineLength: a2 }; };\nconst _c2 = function (a0, a1) { return { value: a0, params: a1 }; };\nfunction TrendComponent__svg_svg_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\");\n    ɵngcc0.ɵɵtemplate(1, TrendComponent__svg_svg_0__svg_defs_1_Template, 3, 2, \"defs\", 0);\n    ɵngcc0.ɵɵelement(2, \"path\", 1, 2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"width\", ctx_r0.svgWidth)(\"height\", ctx_r0.svgHeight)(\"stroke\", ctx_r0.stroke)(\"stroke-width\", ctx_r0.strokeWidth)(\"stroke-linecap\", ctx_r0.strokeLinecap)(\"viewBox\", ctx_r0.viewBox)(\"preserveAspectRatio\", ctx_r0.preserveAspectRatio);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.gradient && ctx_r0.gradient.length);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@pathAnimaiton\", ɵngcc0.ɵɵpureFunction2(15, _c2, ctx_r0.animationState, ɵngcc0.ɵɵpureFunction3(11, _c1, ctx_r0.autoDrawDuration, ctx_r0.autoDrawEasing, ctx_r0.lineLength)));\n    ɵngcc0.ɵɵattribute(\"stroke\", ctx_r0.pathStroke)(\"d\", ctx_r0.d);\n} }\nfunction normalize(value, min, max, scaleMin = 0, scaleMax = 1) {\n    // If the `min` and `max` are the same value, it means our dataset is flat.\n    // For now, let's assume that flat data should be aligned to the bottom.\n    if (min === max) {\n        return scaleMin;\n    }\n    return scaleMin + (value - min) * (scaleMax - scaleMin) / (max - min);\n}\n/** moveTo\n * the coordinate that lies at a midpoint between 2 lines, based on the radius\n *\n * @param to - Our initial point\n * @param to.x - The x value of our initial point\n * @param to.y - The y value of our initial point\n * @param from - Our final point\n * @param from.x - The x value of our final point\n * @param from.y - The y value of our final point\n * @param radius - The distance away from the final point\n * @returns an object holding the x/y coordinates of the midpoint.\n */\nfunction moveTo(to, from, radius) {\n    const length = Math.sqrt((to.x - from.x) * (to.x - from.x) + (to.y - from.y) * (to.y - from.y));\n    const unitVector = { x: (to.x - from.x) / length, y: (to.y - from.y) / length };\n    return {\n        x: from.x + unitVector.x * radius,\n        y: from.y + unitVector.y * radius,\n    };\n}\n/** getDistanceBetween\n * Simple formula derived from pythagoras to calculate the distance between\n * 2 points on a plane.\n *\n * @param p1 - Our initial point\n * @param p1.x - The x value of our initial point\n * @param p1.y - The y value of our initial point\n * @param p2 - Our final point\n * @param p2.x - The x value of our final point\n * @param p2.y - The y value of our final point\n * @returns the distance between the points.\n */\nconst getDistanceBetween = (p1, p2) => Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n/** checkForCollinearPoints\n * Figure out if the midpoint fits perfectly on a line between the two others.\n *\n * @param p1 - Our initial point\n * @param p1.x - The x value of our initial point\n * @param p1.y - The y value of our initial point\n * @param p2 - Our mid-point\n * @param p2.x - The x value of our mid-point\n * @param p2.y - The y value of our mid-point\n * @param p3 - Our final point\n * @param p3.x - The x value of our final point\n * @param p3.y - The y value of our final point\n * @returns whether or not p2 sits on the line between p1 and p3.\n */\nconst checkForCollinearPoints = (p1, p2, p3) => (p1.y - p2.y) * (p1.x - p3.x) === (p1.y - p3.y) * (p1.x - p2.x);\n\nconst buildLinearPath = (data) => data.reduce((path, point, index) => {\n    // The very first instruction needs to be a \"move\".\n    // The rest will be a \"line\".\n    const isFirstInstruction = index === 0;\n    const instruction = isFirstInstruction ? 'M' : 'L';\n    return `${path}${instruction} ${point.x},${point.y}\\n`;\n}, '');\nfunction buildSmoothPath(data, radius) {\n    const [firstPoint, ...otherPoints] = data;\n    return otherPoints.reduce((path, point, index) => {\n        const next = otherPoints[index + 1];\n        const prev = otherPoints[index - 1] || firstPoint;\n        const isCollinear = next && checkForCollinearPoints(prev, point, next);\n        if (!next || isCollinear) {\n            // The very last line in the sequence can just be a regular line.\n            return `${path}\\nL ${point.x},${point.y}`;\n        }\n        const distanceFromPrev = getDistanceBetween(prev, point);\n        const distanceFromNext = getDistanceBetween(next, point);\n        const threshold = Math.min(distanceFromPrev, distanceFromNext);\n        const isTooCloseForRadius = threshold / 2 < radius;\n        const radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius;\n        const before = moveTo(prev, point, radiusForPoint);\n        const after = moveTo(next, point, radiusForPoint);\n        return [\n            path,\n            `L ${before.x},${before.y}`,\n            `S ${point.x},${point.y} ${after.x},${after.y}`,\n        ].join('\\n');\n    }, `M ${firstPoint.x},${firstPoint.y}`);\n}\n\nconst generateId = () => Math.round(Math.random() * Math.pow(10, 16));\n\nfunction normalizeDataset(data, minX, maxX, minY, maxY) {\n    // For the X axis, we want to normalize it based on its index in the array.\n    // For the Y axis, we want to normalize it based on the element's value.\n    //\n    // X axis is easy: just evenly-space each item in the array.\n    // For the Y axis, we first need to find the min and max of our array,\n    // and then normalize those values between 0 and 1.\n    const boundariesX = { min: 0, max: data.length - 1 };\n    const boundariesY = { min: Math.min(...data), max: Math.max(...data) };\n    const normalizedData = data.map((point, index) => ({\n        x: normalize(index, boundariesX.min, boundariesX.max, minX, maxX),\n        y: normalize(point, boundariesY.min, boundariesY.max, minY, maxY),\n    }));\n    // According to the SVG spec, paths with a height/width of `0` can't have\n    // linear gradients applied. This means that our lines are invisible when\n    // the dataset is flat (eg. [0, 0, 0, 0]).\n    //\n    // The hacky solution is to apply a very slight offset to the first point of\n    // the dataset. As ugly as it is, it's the best solution we can find (there\n    // are ways within the SVG spec of changing it, but not without causing\n    // breaking changes).\n    if (boundariesY.min === boundariesY.max) {\n        normalizedData[0].y += 0.0001;\n    }\n    return normalizedData;\n}\n\nclass TrendComponent {\n    constructor() {\n        this.autoDraw = false;\n        this.autoDrawDuration = 2000;\n        this.autoDrawEasing = 'ease';\n        this.padding = 8;\n        this.radius = 10;\n        this.stroke = 'black';\n        this.strokeLinecap = '';\n        this.strokeWidth = 1;\n        this.gradient = [];\n        this.svgHeight = '25%';\n        this.svgWidth = '100%';\n        this.animationState = '';\n        this.id = generateId();\n        this.gradientId = `ngx-trend-vertical-gradient-${this.id}`;\n    }\n    ngOnChanges() {\n        // We need at least 2 points to draw a graph.\n        if (!this.data || this.data.length < 2) {\n            return;\n        }\n        // `data` can either be an array of numbers:\n        // [1, 2, 3]\n        // or, an array of objects containing a value:\n        // [{ value: 1 }, { value: 2 }, { value: 3 }]\n        //\n        // For now, we're just going to convert the second form to the first.\n        // Later on, if/when we support tooltips, we may adjust.\n        const plainValues = this.data.map(point => {\n            if (typeof point === 'number') {\n                return point;\n            }\n            return point.value;\n        });\n        // Our viewbox needs to be in absolute units, so we'll default to 300x75\n        // Our SVG can be a %, though; this is what makes it scalable.\n        // By defaulting to percentages, the SVG will grow to fill its parent\n        // container, preserving a 1/4 aspect ratio.\n        const viewBoxWidth = this.width || 300;\n        const viewBoxHeight = this.height || 75;\n        this.svgWidth = this.width || '100%';\n        this.svgHeight = this.height || '25%';\n        this.viewBox = `0 0 ${viewBoxWidth} ${viewBoxHeight}`;\n        const root = location.href.split(location.hash || '#')[0];\n        this.pathStroke =\n            this.gradient && this.gradient.length ? `url('${root}#${this.gradientId}')` : undefined;\n        this.gradientTrimmed = this.gradient\n            .slice()\n            .reverse()\n            .map((val, idx) => {\n            return {\n                idx,\n                stopColor: val,\n                offset: normalize(idx, 0, this.gradient.length - 1 || 1),\n            };\n        });\n        const normalizedValues = normalizeDataset(plainValues, this.padding, viewBoxWidth - this.padding, \n        // NOTE: Because SVGs are indexed from the top left, but most data is\n        // indexed from the bottom left, we're inverting the Y min/max.\n        viewBoxHeight - this.padding, this.padding);\n        if (this.autoDraw && this.animationState !== 'active') {\n            this.animationState = 'inactive';\n            setTimeout(() => {\n                this.lineLength = this.pathEl.nativeElement.getTotalLength();\n                this.animationState = 'active';\n            });\n        }\n        this.d = this.smooth\n            ? buildSmoothPath(normalizedValues, this.radius)\n            : buildLinearPath(normalizedValues);\n    }\n}\nTrendComponent.ɵfac = function TrendComponent_Factory(t) { return new (t || TrendComponent)(); };\nTrendComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TrendComponent, selectors: [[\"ngx-trend\"]], viewQuery: function TrendComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.pathEl = _t.first);\n    } }, inputs: { autoDraw: \"autoDraw\", autoDrawDuration: \"autoDrawDuration\", autoDrawEasing: \"autoDrawEasing\", padding: \"padding\", radius: \"radius\", stroke: \"stroke\", strokeLinecap: \"strokeLinecap\", strokeWidth: \"strokeWidth\", gradient: \"gradient\", svgHeight: \"svgHeight\", svgWidth: \"svgWidth\", data: \"data\", smooth: \"smooth\", width: \"width\", height: \"height\", preserveAspectRatio: \"preserveAspectRatio\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, \"ngIf\"], [\"fill\", \"none\"], [\"pathEl\", \"\"], [\"x1\", \"0%\", \"y1\", \"0%\", \"x2\", \"0%\", \"y2\", \"100%\"], [4, \"ngFor\", \"ngForOf\"]], template: function TrendComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TrendComponent__svg_svg_0_Template, 4, 18, \"svg\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.data && ctx.data.length >= 2);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf], encapsulation: 2, data: { animation: [\n            trigger('pathAnimaiton', [\n                state('inactive', style({ display: 'none' })),\n                transition('* => active', [\n                    style({ display: 'initial' }),\n                    // We do the animation using the dash array/offset trick\n                    // https://css-tricks.com/svg-line-animation-works/\n                    animate('{{ autoDrawDuration }}ms {{ autoDrawEasing }}', keyframes([\n                        style({\n                            'stroke-dasharray': '{{ lineLength }}px',\n                            'stroke-dashoffset': '{{ lineLength }}px'\n                        }),\n                        style({\n                            'stroke-dasharray': '{{ lineLength }}px',\n                            'stroke-dashoffset': 0\n                        }),\n                    ])),\n                    // One unfortunate side-effect of the auto-draw is that the line is\n                    // actually 1 big dash, the same length as the line itself. If the\n                    // line length changes (eg. radius change, new data), that dash won't\n                    // be the same length anymore. We can fix that by removing those\n                    // properties once the auto-draw is completed.\n                    style({\n                        'stroke-dashoffset': '',\n                        'stroke-dasharray': ''\n                    }),\n                ]),\n            ]),\n        ] } });\nTrendComponent.ctorParameters = () => [];\nTrendComponent.propDecorators = {\n    data: [{ type: Input }],\n    smooth: [{ type: Input }],\n    autoDraw: [{ type: Input }],\n    autoDrawDuration: [{ type: Input }],\n    autoDrawEasing: [{ type: Input }],\n    width: [{ type: Input }],\n    height: [{ type: Input }],\n    padding: [{ type: Input }],\n    radius: [{ type: Input }],\n    stroke: [{ type: Input }],\n    strokeLinecap: [{ type: Input }],\n    strokeWidth: [{ type: Input }],\n    gradient: [{ type: Input }],\n    preserveAspectRatio: [{ type: Input }],\n    svgHeight: [{ type: Input }],\n    svgWidth: [{ type: Input }],\n    pathEl: [{ type: ViewChild, args: ['pathEl',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TrendComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-trend',\n                template: `\n    <svg\n      *ngIf=\"data && data.length >= 2\"\n      [attr.width]=\"svgWidth\"\n      [attr.height]=\"svgHeight\"\n      [attr.stroke]=\"stroke\"\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.stroke-linecap]=\"strokeLinecap\"\n      [attr.viewBox]=\"viewBox\"\n      [attr.preserveAspectRatio]=\"preserveAspectRatio\"\n    >\n      <defs *ngIf=\"gradient && gradient.length\">\n        <linearGradient [attr.id]=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop\n            *ngFor=\"let g of gradientTrimmed\"\n            [attr.key]=\"g.idx\"\n            [attr.offset]=\"g.offset\"\n            [attr.stop-color]=\"g.stopColor\"\n          />\n        </linearGradient>\n      </defs>\n      <path\n        fill=\"none\"\n        #pathEl\n        [attr.stroke]=\"pathStroke\"\n        [attr.d]=\"d\"\n        [@pathAnimaiton]=\"{\n          value: animationState,\n          params: {\n            autoDrawDuration: autoDrawDuration,\n            autoDrawEasing: autoDrawEasing,\n            lineLength: lineLength\n          }\n        }\"\n      />\n    </svg>\n  `,\n                animations: [\n                    trigger('pathAnimaiton', [\n                        state('inactive', style({ display: 'none' })),\n                        transition('* => active', [\n                            style({ display: 'initial' }),\n                            // We do the animation using the dash array/offset trick\n                            // https://css-tricks.com/svg-line-animation-works/\n                            animate('{{ autoDrawDuration }}ms {{ autoDrawEasing }}', keyframes([\n                                style({\n                                    'stroke-dasharray': '{{ lineLength }}px',\n                                    'stroke-dashoffset': '{{ lineLength }}px'\n                                }),\n                                style({\n                                    'stroke-dasharray': '{{ lineLength }}px',\n                                    'stroke-dashoffset': 0\n                                }),\n                            ])),\n                            // One unfortunate side-effect of the auto-draw is that the line is\n                            // actually 1 big dash, the same length as the line itself. If the\n                            // line length changes (eg. radius change, new data), that dash won't\n                            // be the same length anymore. We can fix that by removing those\n                            // properties once the auto-draw is completed.\n                            style({\n                                'stroke-dashoffset': '',\n                                'stroke-dasharray': ''\n                            }),\n                        ]),\n                    ]),\n                ]\n            }]\n    }], function () { return []; }, { autoDraw: [{\n            type: Input\n        }], autoDrawDuration: [{\n            type: Input\n        }], autoDrawEasing: [{\n            type: Input\n        }], padding: [{\n            type: Input\n        }], radius: [{\n            type: Input\n        }], stroke: [{\n            type: Input\n        }], strokeLinecap: [{\n            type: Input\n        }], strokeWidth: [{\n            type: Input\n        }], gradient: [{\n            type: Input\n        }], svgHeight: [{\n            type: Input\n        }], svgWidth: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }], smooth: [{\n            type: Input\n        }], width: [{\n            type: Input\n        }], height: [{\n            type: Input\n        }], preserveAspectRatio: [{\n            type: Input\n        }], pathEl: [{\n            type: ViewChild,\n            args: ['pathEl']\n        }] }); })();\n\nclass TrendModule {\n}\nTrendModule.ɵfac = function TrendModule_Factory(t) { return new (t || TrendModule)(); };\nTrendModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TrendModule });\nTrendModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TrendModule, { declarations: function () { return [TrendComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [TrendComponent]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TrendModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                exports: [TrendComponent],\n                declarations: [TrendComponent]\n            }]\n    }], null, null); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TrendComponent, TrendModule };\n\n//# sourceMappingURL=ngx-trend.js.map","export default \"<div class=\\\"crypto-prices\\\">\\n    <div class=\\\"crypto-prices-item\\\" *ngFor=\\\"let stat of stats\\\">\\n        <div class=\\\"crypto-prices-info\\\">\\n            <div class=\\\"info-tag mb-1\\\">\\n                <img src=\\\"/img/icons/btc.svg\\\" alt=\\\"Bitcoin\\\" *ngIf=\\\"stat.symbol === 'BTC'\\\" />\\n                <img src=\\\"/img/icons/eth.svg\\\" alt=\\\"Ethereum\\\" *ngIf=\\\"stat.symbol === 'ETH'\\\" />\\n                <img src=\\\"/img/icons/ltc.svg\\\" alt=\\\"Litecoin\\\" *ngIf=\\\"stat.symbol === 'LTC'\\\" />\\n                <img src=\\\"/img/icons/usdt.svg\\\" alt=\\\"Tether\\\" *ngIf=\\\"stat.symbol === 'USDT'\\\" />\\n                <div class=\\\"mt-1\\\">{{ stat.name }}</div>\\n                <div>{{ stat.symbol }}</div>\\n                <div class=\\\"d-flex justify-content-between text-gray\\\">\\n                    <div>\\n                        <span [ngClass]=\\\"getDailyChange(stat.symbol) < 0 ? 'text-danger' : 'text-green'\\\">\\n                            {{ getDailyChange(stat.symbol) | number: '1.2-2' }}%\\n                        </span>\\n                        <small> (24h)</small>\\n                    </div>\\n                    <div>\\n                        <small>(7d) </small>\\n                        <span [ngClass]=\\\"getWeeklyChange(stat.symbol) < 0 ? 'text-danger' : 'text-green'\\\">\\n                            {{ getWeeklyChange(stat.symbol) | number: '1.2-2' }}%\\n                        </span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"info-trend\\\">\\n                <ngx-trend\\n                    [data]=\\\"getTrend(stat.symbol)\\\"\\n                    [stroke]=\\\"getWeeklyChange(stat.symbol) < 0 ? '#d94a3d' : '#50b652'\\\"\\n                    strokeWidth=\\\"2\\\"\\n                    [autoDraw]=\\\"true\\\"\\n                    [autoDrawDuration]=\\\"1500\\\"\\n                ></ngx-trend>\\n            </div>\\n        </div>\\n        <div class=\\\"d-flex justify-content-between\\\">\\n            <span class=\\\"crypto-prices-value\\\">\\n                <span>{{ 'common.sell' | translate }}</span>\\n                <span class=\\\"text-danger\\\">${{ getPriceSide(stat.symbol, 'sell') | amount: 2 }}</span>\\n            </span>\\n            <span class=\\\"crypto-prices-value\\\">\\n                <span>{{ 'common.buy' | translate }}</span>\\n                <span class=\\\"text-primary\\\">${{ getPriceSide(stat.symbol, 'buy') | amount: 2 }}</span>\\n            </span>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"small text-muted mb-1 mt-1 text-right pr-1\\\">{{ 'common.last-update' | translate }}: {{ rates?.timestamp | date: 'medium' }}</div>\\n\";","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">Review and Execute</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    <table class=\\\"table table-striped table-borderless mb-0\\\">\\n        <tbody>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Instrument</th>\\n                <td>{{ trade.instrument }}</td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Direction</th>\\n                <td class=\\\"text-uppercase\\\">{{ trade.side }}</td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Amount</th>\\n                <td>{{ trade.quantity | amount: 8 }} {{ baseCurrency }}</td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Price</th>\\n                <td>{{ trade.price | amount: 2 }} {{ counterCurrency }}</td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Total</th>\\n                <td class=\\\"font-weight-bold\\\" [ngClass]=\\\"trade.side === 'buy' ? 'text-primary' : 'text-danger'\\\">\\n                    {{ total | amount: 2 }} {{ counterCurrency }}\\n                </td>\\n            </tr>\\n            <tr>\\n                <th class=\\\"font-weight-bold\\\" scope=\\\"row\\\">Expiry</th>\\n                <td><countdown #cd [config]=\\\"{ leftTime: expiry, format: 'ss' }\\\" (event)=\\\"onCountdownEvent($event)\\\"></countdown> seconds</td>\\n            </tr>\\n        </tbody>\\n    </table>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n    <button type=\\\"button\\\" class=\\\"btn\\\" [ngClass]=\\\"trade.side === 'buy' ? 'btn-primary' : 'btn-danger'\\\" (click)=\\\"onExecute.emit()\\\">\\n        <span class=\\\"text-capitalize\\\">{{ trade.side }}</span> {{ trade.quantity | amount: 8 }} {{ baseCurrency }}\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"activeModal.dismiss()\\\">Cancel</button>\\n</div>\\n\";","export default \".crypto-prices {\\n  background: #e3e8f0;\\n  border-radius: 0.5rem;\\n  display: flex;\\n  justify-content: flex-start;\\n  align-content: space-evenly;\\n  align-items: center;\\n}\\n.crypto-prices-item {\\n  min-width: 150px;\\n  width: 50%;\\n  padding: 0.6rem;\\n  font-weight: 500;\\n  border-radius: 0.25rem;\\n  border: 1px solid transparent;\\n}\\n.crypto-prices-item:hover {\\n  background: rgba(0, 0, 0, 0.025);\\n}\\n.crypto-prices-info {\\n  position: relative;\\n  height: 108px;\\n}\\n.crypto-prices-info .info-tag {\\n  position: absolute;\\n  width: 100%;\\n}\\n.crypto-prices-info .info-trend {\\n  padding: 0.5rem;\\n  padding-left: 4.5rem;\\n}\\n.crypto-prices-value {\\n  background-color: white;\\n  display: flex;\\n  flex-direction: column;\\n  width: 100%;\\n  justify-content: center;\\n  align-self: center;\\n  padding: 0.5rem 0;\\n  text-align: center;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n}\\n.crypto-prices-value:first-child {\\n  border-right: 0;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Nwb3QtdHJhZGluZy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1CQUFBO0VBQ0EscUJBQUE7RUFDQSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSwyQkFBQTtFQUNBLG1CQUFBO0FBQ0Y7QUFDRTtFQUNFLGdCQUFBO0VBQ0EsVUFBQTtFQUNBLGVBQUE7RUFDQSxnQkFBQTtFQUNBLHNCQUFBO0VBQ0EsNkJBQUE7QUFDSjtBQUNJO0VBQ0UsZ0NBQUE7QUFDTjtBQUdFO0VBQ0Usa0JBQUE7RUFDQSxhQUFBO0FBREo7QUFHSTtFQUNFLGtCQUFBO0VBQ0EsV0FBQTtBQUROO0FBSUk7RUFDRSxlQUFBO0VBQ0Esb0JBQUE7QUFGTjtBQU1FO0VBQ0UsdUJBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxXQUFBO0VBQ0EsdUJBQUE7RUFDQSxrQkFBQTtFQUNBLGlCQUFBO0VBQ0Esa0JBQUE7RUFDQSxvQ0FBQTtBQUpKO0FBTUk7RUFDRSxlQUFBO0FBSk4iLCJmaWxlIjoic3BvdC10cmFkaW5nLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNyeXB0by1wcmljZXMge1xuICBiYWNrZ3JvdW5kOiBkYXJrZW4oI2YwZjNmNywgNCUpO1xuICBib3JkZXItcmFkaXVzOiAwLjVyZW07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgYWxpZ24tY29udGVudDogc3BhY2UtZXZlbmx5O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICYtaXRlbSB7XG4gICAgbWluLXdpZHRoOiAxNTBweDtcbiAgICB3aWR0aDogNTAlO1xuICAgIHBhZGRpbmc6IDAuNnJlbTtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XG4gICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4wMjUpO1xuICAgIH1cbiAgfVxuXG4gICYtaW5mbyB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGhlaWdodDogMTA4cHg7XG5cbiAgICAuaW5mby10YWcge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuXG4gICAgLmluZm8tdHJlbmQge1xuICAgICAgcGFkZGluZzogMC41cmVtO1xuICAgICAgcGFkZGluZy1sZWZ0OiA0LjVyZW07XG4gICAgfVxuICB9XG5cbiAgJi12YWx1ZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAxKTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgd2lkdGg6IDEwMCU7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgIHBhZGRpbmc6IDAuNXJlbSAwO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSk7XG5cbiAgICAmOmZpcnN0LWNoaWxkIHtcbiAgICAgIGJvcmRlci1yaWdodDogMDtcbiAgICB9XG4gIH1cbn1cbiJdfQ== */\";","import { AfterViewInit, Component, EventEmitter, OnInit, ViewChild } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport BigNumber from 'bignumber.js'\nimport differenceInSeconds from 'date-fns/differenceInSeconds'\nimport { CountdownComponent } from 'ngx-countdown'\nimport { ConfirmationService } from '../services/confirmation.service'\n\n@Component({\n    selector: 'spot-trading-quote-modal',\n    templateUrl: 'spot-trading-quote-modal.component.html',\n})\nexport class SpotTradingQuoteModalComponent implements OnInit, AfterViewInit {\n    public trade: any\n    public expiry: number\n    public onExecute = new EventEmitter<void>()\n\n    @ViewChild('cd', { static: false })\n    private countdown: CountdownComponent\n\n    constructor(public activeModal: NgbActiveModal, private confirmation: ConfirmationService) {}\n\n    public ngOnInit(): void {\n        this.expiry = differenceInSeconds(new Date(this.trade.validUntil), new Date())\n    }\n\n    public ngAfterViewInit(): void {\n        this.countdown.begin()\n    }\n\n    public get baseCurrency(): string {\n        const parts = this.trade.instrument!.split('.')\n        return parts[0].slice(0, 3)\n    }\n\n    public get counterCurrency(): string {\n        const parts = this.trade.instrument!.split('.')\n        return parts[0].slice(3, 6)\n    }\n\n    public get total(): string {\n        return new BigNumber(this.trade.price!).times(this.trade.quantity).toFixed(2, 1)\n    }\n\n    public onCountdownEvent(event: any): void {\n        if (event.action === 'done') {\n            this.activeModal.dismiss()\n            // TODO: Just renew quote instead of show expiry\n            this.confirmation\n                .show({\n                    type: 'info',\n                    title: 'Quote Expired',\n                    text: `Your quote expired. Please request a new quote.`,\n                    confirmClass: 'info',\n                    showCancel: false,\n                })\n                .subscribe(() => undefined)\n        }\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { Component, OnInit } from '@angular/core'\nimport { faArrowAltFromBottom, faArrowAltToBottom } from '@fortawesome/pro-light-svg-icons'\nimport BigNumber from 'bignumber.js'\n\ninterface SpotTradeRates {\n    timestamp: Date\n    data: {\n        [K: string]: {\n            current_price: number\n            percent_change_1h: number\n            percent_change_24h: number\n            percent_change_7d: number\n            percent_change_30d: number\n            trend_7d: [number, number, number, number]\n        }\n    }\n}\n\n@Component({\n    selector: 'spot-trading-feed',\n    templateUrl: 'spot-trading-feed.component.html',\n    styleUrls: ['./spot-trading.component.scss'],\n})\nexport class SpotTradingFeedComponent implements OnInit {\n    public stats = [\n        {\n            name: 'Bitcoin',\n            symbol: 'BTC',\n        },\n        {\n            name: 'Ethereum',\n            symbol: 'ETH',\n        },\n        {\n            name: 'Litecoin',\n            symbol: 'LTC',\n        },\n        {\n            name: 'Tether',\n            symbol: 'USDT',\n        },\n    ]\n    public rates: SpotTradeRates\n\n    public faArrowAltToBottom = faArrowAltToBottom\n    public faArrowAltFromBottom = faArrowAltFromBottom\n\n    constructor(private http: HttpClient) {}\n\n    public ngOnInit(): void {\n        this.http.get<SpotTradeRates>('/spot-trades/rates').subscribe(rates => (this.rates = rates))\n    }\n\n    public getDailyChange(ticker: string): number {\n        return this.rates && this.rates.data[ticker]?.percent_change_24h\n    }\n\n    public getWeeklyChange(ticker: string): number {\n        return this.rates && this.rates.data[ticker]?.percent_change_7d\n    }\n\n    public getTrend(ticker: string): number[] {\n        return this.rates && this.rates.data[ticker].trend_7d\n    }\n\n    public getPrice(ticker: string): string {\n        return ((this.rates && this.rates.data[ticker].current_price) || 1).toFixed(2)\n    }\n\n    public getPriceSide(ticker: string, side: string): string {\n        const spread = side === 'buy' ? '1.04' : '0.96'\n        return new BigNumber(this.getPrice(ticker)).times(spread).toFixed(2)\n    }\n}\n"],"sourceRoot":"webpack:///"}