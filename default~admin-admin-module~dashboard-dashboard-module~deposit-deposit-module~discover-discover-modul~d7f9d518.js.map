{"version":3,"sources":["./src/app/common/transaction/transaction-overview/transaction-overview.component.ts","./src/app/common/trades/trade.mixins.ts","./src/app/common/logged-in.auth-guard.ts","./src/app/store/fees/fees.store.ts","./src/app/common/models/accounting/wallet.model.ts","./src/app/store/fees/fees.query.ts","./src/app/common/transaction/transaction-view/transaction-view.component.html","./src/app/common/transaction/transaction-slip/transaction-slip.component.html","./src/app/common/services/sgpmx.service.ts","./src/app/common/models/core/address.model.ts","./src/app/common/transaction/transaction-slip/transaction-slip.component.ts","./src/app/common/transaction/transaction-overview/transaction-overview.component.html","./src/app/common/transaction/transaction-flow/transaction-flow.component.ts","./src/app/common/transaction/transaction-files/transaction-files.component.ts","./src/app/common/models/accounting/beneficiary.model.ts","./src/app/common/models/accounting/transaction.model.ts","./src/app/common/transaction/transaction.module.ts","./src/app/common/transaction/transaction-files/transation-files-modal/transaction-files-modal.component.ts","./src/app/common/transaction/transaction-flow/transaction-flow.component.html","./src/app/common/transaction/transaction-files/transation-files-modal/transaction-files-modal.component.html","./src/app/common/transaction/transaction-files/transaction-files.component.html","./src/app/common/services/transaction.service.ts","./src/app/common/transaction/transaction-view/transaction-view.component.ts"],"names":[],"mappings":"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","file":"default~admin-admin-module~dashboard-dashboard-module~deposit-deposit-module~discover-discover-modul~d7f9d518.js","sourcesContent":["import { HttpClient } from '@angular/common/http'\nimport { Component, Input, OnChanges, OnDestroy, OnInit, Optional, SimpleChanges } from '@angular/core'\nimport { faCircleNotch, faTimes } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport { Observable, Subject, Subscription } from 'rxjs'\nimport { filter, switchMap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { IUser, Transaction as ITransaction } from '../../api-interfaces'\nimport { isZero } from '../../common.mixin'\nimport { Transaction } from '../../models/accounting/transaction.model'\nimport { User } from '../../models/core/user.model'\nimport { SessionService } from '../../services/session.service'\nimport { SgpmxService } from '../../services/sgpmx.service'\nimport {\n    calculateCreditableAmount,\n    calculateDeductableAmount,\n    calculateFee,\n    isReceiver,\n} from '../../transactions.mixins'\n\n@Component({\n    selector: 'transaction-overview',\n    templateUrl: 'transaction-overview.component.html',\n})\nexport class TransactionOverviewComponent implements OnInit, OnChanges, OnDestroy {\n    @Input()\n    public transaction: ITransaction\n\n    public calculateFee = calculateFee\n    public isZero = isZero\n    public faTimes = faTimes\n    public faCircleNotch = faCircleNotch\n    public appName = environment.appName\n    public displayName = environment.displayName\n\n    private user: IUser | null\n    private fetchEvent = new Subject<void>()\n    private subscriptions = new Subscription()\n\n    constructor(\n        private http: HttpClient,\n        @Optional() public activeModal: NgbActiveModal,\n        public session: SessionService,\n        public sgpmxService: SgpmxService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.session.userStream.subscribe(user => {\n                this.user = new User(user)\n            })\n        )\n        this.subscriptions.add(\n            this.fetchEvent\n                .pipe(\n                    filter(() => !!this.transaction.id),\n                    switchMap(() => this.http.get<ITransaction>(`/transactions/${this.transaction.id}`))\n                )\n                .subscribe(transaction => {\n                    Object.assign(this.transaction, transaction)\n                })\n        )\n        this.fetchEvent.next()\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.transaction) {\n            this.fetchEvent.next()\n        }\n    }\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public buildActionLabel(transaction: ITransaction): string {\n        if (transaction.status === 'completed') {\n            if (transaction.type === 'deposit') {\n                return this.translate.instant('common.deposited')\n            }\n            return this.isReceiver ? 'Received' : 'Sent'\n        }\n        if (transaction.type === 'deposit') {\n            return this.translate.instant('common.requesting')\n        }\n        return this.translate.instant('common.sending')\n    }\n\n    public showFees(transaction: ITransaction): boolean {\n        return !this.isReceiver || transaction.type === 'deposit'\n    }\n\n    public formatTxid(externalReference: string): string {\n        return externalReference.includes(':') ? externalReference.split(':')[1] : externalReference\n    }\n\n    public calculateExchangeRate(): string {\n        if (this.transaction.type === 'deposit' && this.transaction.receivedAmount) {\n            return new BigNumber(this.transaction.receivedAmount)\n                .div(this.transaction.amount)\n                .toFixed(this.transaction.currency.decimalPlaces, 1)\n        }\n        return ''\n    }\n\n    public determineAmount(): string | null {\n        if (this.transaction.card && this.transaction.currency.code !== this.transaction.receivedCurrency?.code) {\n            return this.transaction.receivedAmount\n        }\n        return ['card-order', 'payment'].includes(this.transaction.type)\n            ? this.calculateFee(this.transaction)\n            : this.creditableAmount\n    }\n\n    public get isReceiver(): boolean {\n        return isReceiver(this.transaction, this.user)\n    }\n\n    public get creditableAmount(): string {\n        return this.transaction.id ? this.transaction.settledAmount : calculateCreditableAmount(this.transaction)\n    }\n\n    public get deductableAmount(): string {\n        // For preview\n        if (!this.transaction.id || this.transaction.type === 'payment') {\n            return calculateDeductableAmount(this.transaction)\n        }\n        return this.transaction.type !== 'deposit' && this.isReceiver\n            ? this.transaction.settledAmount\n            : calculateDeductableAmount(this.transaction)\n    }\n\n    public isSgpmxMetalTransfer(): boolean {\n        return (\n            this.appName === 'sgpmx' &&\n            this.transaction.type === 'transfer' &&\n            ['AU', 'AG'].includes(this.transaction.currency?.code)\n        )\n    }\n\n    public calculateFeeInUsd(): Observable<string> {\n        return this.sgpmxService.calculateFeeInUsd(this.transaction)\n    }\n\n    public isPlatformTransfer(): boolean {\n        return new Transaction(this.transaction).isPlatformTransfer()\n    }\n}\n","import BigNumber from 'bignumber.js'\nimport { Trade } from '../api-interfaces'\n\nexport function getTradeGrandTotal(trade: Trade): string {\n    const value = new BigNumber(trade.quantity).times(trade.price)\n    return (\n        trade.side === 'BUY'\n            ? value.plus(new BigNumber(trade.fee).plus(trade.gst))\n            : value.minus(new BigNumber(trade.fee).plus(trade.gst))\n    ).toFixed(2)\n}\n\nexport function getTradeValue(trade: Trade): string {\n    return new BigNumber(trade.quantity).times(trade.price).toFixed(2)\n}\n","import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router'\nimport { SessionService } from './services/session.service'\n\n@Injectable({ providedIn: 'root' })\nexport class LoggedInAuthGuard implements CanActivate {\n    constructor(private session: SessionService, private router: Router) {}\n    public canActivate(_: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree {\n        if (!this.session.isAuthenticated()) {\n            return this.router.parseUrl('/login?redirect=' + state.url)\n        }\n        return true\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita'\nimport { IFee } from '../../common/api-interfaces'\n\nexport interface FeesState extends EntityState<IFee, string> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'fees', idKey: 'id' })\nexport class FeesStore extends EntityStore<FeesState> {\n    constructor() {\n        super()\n    }\n}\n","import { ICurrency, IUser, Product, Wallet as IWallet } from '../../api-interfaces'\nimport { User } from '../core/user.model'\nimport { Currency } from './currency.model'\n\nexport class Wallet implements IWallet {\n    public id: string\n    public balance: string\n    public user: IUser | null\n    public product: Product | null\n    public currency: ICurrency\n    public availableBalance: string\n    public createdAt: string\n    public updatedAt: string\n\n    constructor(data?: any) {\n        if (data) {\n            Object.assign(this, data)\n            this.currency = new Currency(data.currency)\n            if (data.user) {\n                this.user = new User(data.user)\n            }\n        }\n    }\n\n    public isRootWallet(): boolean {\n        return this.user === null\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { QueryEntity } from '@datorama/akita'\nimport { Observable, of } from 'rxjs'\nimport { flatMap, map } from 'rxjs/operators'\nimport { FeeType, IFee, TransactionMethod } from 'src/app/common/api-interfaces'\nimport { FeesState, FeesStore } from './fees.store'\n\n@Injectable({ providedIn: 'root' })\nexport class FeesQuery extends QueryEntity<FeesState> {\n    constructor(protected store: FeesStore) {\n        super(store)\n    }\n\n    public findByPrimaryAttributes(query: {\n        type: FeeType\n        method: TransactionMethod\n        currencyCode: string\n    }): Observable<IFee | null> {\n        return this.selectEntity(\n            entity =>\n                entity.type === query.type &&\n                entity.method === query.method &&\n                query.currencyCode === entity.currency.code\n        ).pipe(\n            flatMap(fee =>\n                fee\n                    ? of(fee)\n                    : this.selectEntity(\n                          entity =>\n                              entity.type === query.type &&\n                              entity.method === query.method &&\n                              entity.currency.code === 'USD'\n                      ).pipe(map(usdFee => usdFee ?? null))\n            )\n        )\n    }\n}\n","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">Txid: <uuid [value]=\\\"transaction.id\\\" ngClass=\\\"text-white\\\"></uuid></h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\" *ngIf=\\\"activeModal\\\">&times;</button>\\n</div>\\n<ul class=\\\"nav nav-tabs-alt nav-fill\\\">\\n    <li class=\\\"nav-item\\\">\\n        <a\\n            href\\n            class=\\\"nav-link e2e-transaction-view-overview\\\"\\n            [ngClass]=\\\"{ active: activeTab === 'overview' }\\\"\\n            (click)=\\\"$event.preventDefault(); activeTab = 'overview'\\\"\\n        >\\n            {{ 'common.overview' | translate }}\\n        </a>\\n    </li>\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"transaction.beneficiary\\\">\\n        <a\\n            href\\n            class=\\\"nav-link e2e-transaction-view-beneficiary\\\"\\n            [ngClass]=\\\"{ active: activeTab === 'beneficiary' }\\\"\\n            (click)=\\\"$event.preventDefault(); activeTab = 'beneficiary'\\\"\\n        >\\n            {{ (transaction.type === 'deposit' ? 'common.instructions' : 'common.beneficiary') | translate }}\\n        </a>\\n    </li>\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"transaction.method !== 'crypto'\\\">\\n        <a\\n            href\\n            class=\\\"nav-link e2e-transaction-view-attachments\\\"\\n            [ngClass]=\\\"{ active: activeTab === 'attachments' }\\\"\\n            (click)=\\\"$event.preventDefault(); activeTab = 'attachments'\\\"\\n        >\\n            {{ 'common.attachments' | translate }}\\n        </a>\\n    </li>\\n</ul>\\n<div class=\\\"modal-body transaction-view e2e-transaction-view\\\">\\n    <ng-container *ngIf=\\\"activeTab === 'overview'\\\">\\n        <transaction-overview [transaction]=\\\"transaction\\\"></transaction-overview>\\n        <div class=\\\"row b-t-1 p-2\\\">\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.type' | translate }}</div>\\n                <div>{{ transaction.type | startCase }}</div>\\n            </div>\\n            <div *ngIf=\\\"transaction.method !== 'internal'\\\" class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.method' | translate }}</div>\\n                <div>{{ transactionMethodMap[transaction.method] }}</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.status' | translate }}</div>\\n                <div\\n                    class=\\\"text-capitalize\\\"\\n                    [ngClass]=\\\"{\\n                        'text-success': transaction.status === 'completed',\\n                        'text-info': transaction.status === 'pending',\\n                        'text-warning': transaction.status === 'processing',\\n                        'text-danger': ['cancelled', 'failed'].includes(transaction.status)\\n                    }\\\"\\n                >\\n                    {{ transaction.status | startCase }}\\n                </div>\\n            </div>\\n            <div *ngIf=\\\"transaction.purpose\\\" class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.purpose' | translate }}</div>\\n                <div>{{ transaction.purpose | startCase }}</div>\\n            </div>\\n            <div *ngIf=\\\"transaction.sourceOfFunds\\\" class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.source-of-funds' | translate }}</div>\\n                <div>{{ transaction.sourceOfFunds | startCase }}</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.created-at' | translate }}</div>\\n                <div>{{ transaction.createdAt | date: 'medium' }}</div>\\n            </div>\\n            <div *ngIf=\\\"transaction.settledAt\\\" class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">Settled at</div>\\n                <div>{{ transaction.settledAt | date: 'medium' }}</div>\\n            </div>\\n        </div>\\n        <div class=\\\"row b-t-1 p-2\\\" *ngIf=\\\"trade\\\">\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.trade' | translate }} ID</div>\\n                <uuid [value]=\\\"trade.id\\\" ngClass=\\\"text-gray\\\"></uuid>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.symbol' | translate }}</div>\\n                <div>{{ trade.symbol }}</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'trade-type' | translate }}</div>\\n                <div>{{ trade.side }}</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.spot-price' | translate }}</div>\\n                <div>{{ trade.price | amount: 2 }} USD</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.amount' | translate }}</div>\\n                <div>{{ trade.quantity | amount: 7 }} {{ trade.symbol.split('/')[0] }}</div>\\n                <div class=\\\"text-muted font-sm\\\">{{ getTradeValue(trade) | amount: 2 }} USD</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.fee' | translate }}</div>\\n                <div>{{ trade.fee | amount: 2 }} USD</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">GST</div>\\n                <div>{{ trade.gst | amount: 2 }} USD</div>\\n            </div>\\n            <div class=\\\"col-12 py-2\\\">\\n                <div class=\\\"font-weight-bold\\\">{{ 'common.grand-total' | translate | sentenceCase }}</div>\\n                <div>{{ getTradeGrandTotal(trade) | amount: 2 }} USD</div>\\n            </div>\\n        </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"activeTab === 'beneficiary'\\\">\\n        <ng-container *ngIf=\\\"transaction.method === 'crypto'; else depositInstruction\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"font-md\\\" for=\\\"depositAddress\\\">{{ transaction.type | startCase }} {{ 'common.address' | translate }}</label>\\n                <div class=\\\"input-group input-group-lg mb-3\\\">\\n                    <input\\n                        type=\\\"text\\\"\\n                        class=\\\"form-control\\\"\\n                        id=\\\"depositAddress\\\"\\n                        name=\\\"depositAddress\\\"\\n                        [value]=\\\"transaction.beneficiary?.accountNumber\\\"\\n                        disabled\\n                    />\\n                    <copy-btn\\n                        class=\\\"input-group-append\\\"\\n                        [value]=\\\"transaction.beneficiary?.accountNumber\\\"\\n                        [disabled]=\\\"!transaction.beneficiary\\\"\\n                    ></copy-btn>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"font-md\\\" for=\\\"depositAmount\\\">{{ transaction.type | startCase }} {{ 'common.amount' | translate }}</label>\\n                <div class=\\\"input-group input-group-lg mb-3\\\">\\n                    <input\\n                        type=\\\"text\\\"\\n                        class=\\\"form-control\\\"\\n                        id=\\\"depositAmount\\\"\\n                        name=\\\"depositAmount\\\"\\n                        value=\\\"{{ transaction.amount | amount }}\\\"\\n                        disabled\\n                    />\\n                    <div class=\\\"input-group-append\\\">\\n                        <span class=\\\"input-group-text\\\">{{ transaction.currency?.code }}</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <form\\n                *ngIf=\\\"transaction.type === 'deposit'\\\"\\n                class=\\\"crypto-form form-validation\\\"\\n                #cryptoForm=\\\"ngForm\\\"\\n                [ngClass]=\\\"{ 'ng-submitted': cryptoForm.submitted }\\\"\\n                autocomplete=\\\"false\\\"\\n                novalidate\\n            >\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"font-md\\\" for=\\\"txid\\\">\\n                        Transaction ID\\n                        <a\\n                            href\\n                            (click)=\\\"$event.preventDefault()\\\"\\n                            [ngbPopover]=\\\"txidContent\\\"\\n                            [popoverTitle]=\\\"txidTitle\\\"\\n                            triggers=\\\"mouseenter:mouseleave\\\"\\n                            ><fa-icon [icon]=\\\"faQuestionCircle\\\"></fa-icon\\n                        ></a>\\n                    </label>\\n                    <input\\n                        type=\\\"text\\\"\\n                        class=\\\"form-control form-control-lg\\\"\\n                        id=\\\"txid\\\"\\n                        name=\\\"txid\\\"\\n                        [(ngModel)]=\\\"transaction.reference\\\"\\n                        [disabled]=\\\"transaction.status !== 'pending'\\\"\\n                        #txidInput=\\\"ngModel\\\"\\n                        required\\n                    />\\n                    <div *ngIf=\\\"txidInput.invalid && (cryptoForm.submitted || txidInput.dirty)\\\" class=\\\"error-messages\\\">\\n                        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"txidInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                    </div>\\n                </div>\\n            </form>\\n            <div class=\\\"callout callout-info\\\" *ngIf=\\\"transaction.type === 'deposit'\\\">\\n                <p>By using this deposit address, you confirm that you accept our Terms & Conditions and Data Privacy Notice</p>\\n                <p>\\n                    <b>Disclaimer:</b> All funds are deposited into a cold wallet provided to Aerapass by a third party service provider. Aerapass\\n                    does not operate any virtual asset storage or exchange facilities.\\n                </p>\\n            </div>\\n        </ng-container>\\n        <ng-template #depositInstruction>\\n            <div class=\\\"p-1\\\">\\n                <deposit-instruction [transaction]=\\\"transaction\\\"></deposit-instruction>\\n            </div>\\n        </ng-template>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"activeTab === 'attachments'\\\">\\n        <dropzone\\n            *ngIf=\\\"\\n                ['deposit', 'transfer', 'withdrawal'].includes(transaction.type) &&\\n                ['pending', 'processing', 'completed'].includes(transaction.status)\\n            \\\"\\n            class=\\\"w-100\\\"\\n            [files]=\\\"files\\\"\\n            [existingFiles]=\\\"existingFiles\\\"\\n            [canDelete]=\\\"false\\\"\\n            [showTable]=\\\"false\\\"\\n        ></dropzone>\\n        <div class=\\\"table-responsive\\\">\\n            <table\\n                class=\\\"table table-hover align-items-center table-borderless mb-0\\\"\\n                *ngIf=\\\"\\n                    (files && files.length > 0) ||\\n                        (existingFiles && existingFiles.length > 0) ||\\n                        ['deposit', 'withdrawal'].includes(transaction.type) ||\\n                        hasReceipt ||\\n                        transaction.reference?.startsWith('Invoice');\\n                    else noFile\\n                \\\"\\n            >\\n                <thead>\\n                    <tr>\\n                        <th scope=\\\"col\\\" colspan=\\\"2\\\">{{ 'common.file-name' | translate }}</th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <tr *ngIf=\\\"transaction.reference?.startsWith('Invoice')\\\">\\n                        <th>\\n                            <a href (click)=\\\"$event.preventDefault(); openInvoice(transaction?.reference)\\\">{{ transaction.reference }}</a>\\n                        </th>\\n                        <td></td>\\n                    </tr>\\n                    <tr class=\\\"bg-white attachment\\\" *ngIf=\\\"['deposit', 'withdrawal'].includes(transaction.type)\\\">\\n                        <th scope=\\\"row\\\">\\n                            <a href class=\\\"text-primary\\\" (click)=\\\"$event.preventDefault(); openProformaInvoice()\\\">{{\\n                                'common.proforma-invoice' | translate\\n                            }}</a>\\n                        </th>\\n                        <td></td>\\n                    </tr>\\n                    <tr class=\\\"bg-white attachment\\\" *ngIf=\\\"hasReceipt\\\">\\n                        <th scope=\\\"row\\\">\\n                            <a href class=\\\"text-primary\\\" (click)=\\\"$event.preventDefault(); openSgpmxInvoice()\\\">{{ 'common.invoice' | translate }}</a>\\n                        </th>\\n                        <td></td>\\n                    </tr>\\n                    <tr class=\\\"bg-white attachment e2e-attachment\\\" *ngFor=\\\"let existingFile of existingFiles\\\">\\n                        <th scope=\\\"row\\\">\\n                            <file-item [file]=\\\"existingFile\\\"></file-item>\\n                        </th>\\n                        <td></td>\\n                    </tr>\\n                    <tr class=\\\"bg-white attachment e2e-attachment\\\" *ngFor=\\\"let item of files; let i = index\\\">\\n                        <th scope=\\\"row\\\">\\n                            <div class=\\\"text-primary\\\">{{ item.name }}</div>\\n                            <small class=\\\"text-muted\\\">{{ item.size / 1024 / 1024 | number: '.2' }} MB</small>\\n                        </th>\\n                        <td class=\\\"text-right\\\" nowrap>\\n                            <button type=\\\"button\\\" class=\\\"btn btn-danger btn-sm\\\" (click)=\\\"files.splice(i, 1)\\\">\\n                                <fa-icon [icon]=\\\"faTimes\\\"></fa-icon>\\n                            </button>\\n                        </td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n        <ng-template #noFile>\\n            <div class=\\\"text-center mt-4 mb-3\\\">\\n                <fa-icon class=\\\"text-muted\\\" [icon]=\\\"faFileSearch\\\" size=\\\"3x\\\"></fa-icon>\\n                <h3 class=\\\"text-muted mt-2\\\">{{ 'common.no-files-found' | translate }}</h3>\\n            </div>\\n        </ng-template>\\n    </ng-container>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n    <ng-container *ngIf=\\\"['deposit', 'withdrawal', 'transfer'].includes(transaction.type) && (canMarkAsPaid || canUpload || canCancel); else close\\\">\\n        <button\\n            *ngIf=\\\"canMarkAsPaid\\\"\\n            class=\\\"btn btn-success btn-w-sm e2e-mark-as-paid-btn\\\"\\n            [ngClass]=\\\"{ loading: isMarkingAsPaid }\\\"\\n            [disabled]=\\\"isLoading\\\"\\n            (click)=\\\"transaction.method === 'crypto' ? markCryptoDepositAsPaid() : markAsPaid()\\\"\\n        >\\n            {{ 'common.mark-as-paid' | translate }}\\n        </button>\\n        <button\\n            *ngIf=\\\"canUpload\\\"\\n            class=\\\"btn btn-success btn-w-sm e2e-upload-attachment-btn\\\"\\n            [ngClass]=\\\"{ loading: isUploading }\\\"\\n            [disabled]=\\\"isLoading\\\"\\n            (click)=\\\"uploadFiles()\\\"\\n        >\\n            {{ 'common.upload-files' | translate }}\\n        </button>\\n        <button\\n            *ngIf=\\\"canCancel\\\"\\n            class=\\\"btn btn-danger btn-w-sm e2e-cancel-transaction-btn\\\"\\n            [ngClass]=\\\"{ loading: isCancelling }\\\"\\n            [disabled]=\\\"isLoading\\\"\\n            (click)=\\\"cancel()\\\"\\n        >\\n            {{ 'common.cancel' | translate }}\\n        </button>\\n    </ng-container>\\n    <ng-template #close>\\n        <button class=\\\"btn btn-default btn-w-sm\\\" (click)=\\\"activeModal.dismiss()\\\">{{ 'common.close' | translate }}</button>\\n    </ng-template>\\n</div>\\n\\n<ng-template #txidTitle> {{ 'common.what-is-transaction-id' | translate }} </ng-template>\\n<ng-template #txidContent>\\n    <p>{{ 'common.after-submitting-transaction' | translate }}</p>\\n    <p>{{ 'common.please-paste-transaction-id' | translate }}</p>\\n</ng-template>\\n\";","export default \"<div class=\\\"transaction-slip\\\">\\n    <button type=\\\"button\\\" class=\\\"close close-modal float-right\\\" (click)=\\\"activeModal.close()\\\" *ngIf=\\\"activeModal\\\">&times;</button>\\n    <p class=\\\"text-center\\\" *ngIf=\\\"transaction.id\\\">\\n        <span class=\\\"font-weight-bold\\\">{{ transaction.id }}</span>\\n    </p>\\n    <transaction-overview [transaction]=\\\"transaction\\\"></transaction-overview>\\n</div>\\n\";","import { Injectable } from '@angular/core'\nimport BigNumber from 'bignumber.js'\nimport { forkJoin, Observable, of } from 'rxjs'\nimport { map, take } from 'rxjs/operators'\nimport { CurrenciesQuery } from 'src/app/store/currencies/currencies.query'\nimport { FeesQuery } from 'src/app/store/fees/fees.query'\nimport { Transaction } from '../api-interfaces'\nimport { Currency } from '../models/accounting/currency.model'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SgpmxService {\n    constructor(private currenciesQuery: CurrenciesQuery, private feesQuery: FeesQuery) {}\n\n    public calculateFeeInUsd(transaction: Partial<Transaction> | Transaction): Observable<string> {\n        if (!transaction.currency || !transaction.amount) {\n            return of('0')\n        }\n        return forkJoin([\n            this.currenciesQuery.selectEntity('USD').pipe(take(1)),\n            this.currenciesQuery.selectEntity(transaction.currency.code).pipe(take(1)),\n            this.feesQuery\n                .findByPrimaryAttributes({\n                    type: 'transfer',\n                    method: 'internal',\n                    currencyCode: transaction.currency.code,\n                })\n                .pipe(take(1)),\n            this.feesQuery\n                .findByPrimaryAttributes({\n                    type: 'gst',\n                    method: 'internal',\n                    currencyCode: transaction.currency.code,\n                })\n                .pipe(take(1)),\n        ]).pipe(\n            map(([usd, currency, transferFee, gstFee]) => {\n                const usdValue = new BigNumber(Currency.convert(transaction.amount!, currency!, usd!)).decimalPlaces(2)\n                let feeAmount = usdValue.times(transferFee?.relative || 0).plus(transferFee?.fixed || 0)\n\n                if (transferFee?.min && feeAmount.isLessThan(transferFee.min)) {\n                    feeAmount = new BigNumber(transferFee.min)\n                } else if (transferFee?.max && feeAmount.isGreaterThan(transferFee.max)) {\n                    feeAmount = new BigNumber(transferFee.max)\n                }\n\n                let gst = feeAmount.times(gstFee?.relative || 0)\n                if (!feeAmount.isZero() && gstFee?.min && gst.isLessThan(gstFee.min)) {\n                    gst = new BigNumber(gstFee.min)\n                } else if (!feeAmount.isZero() && gstFee?.max && gst.isGreaterThan(gstFee.max)) {\n                    gst = new BigNumber(gstFee.max)\n                }\n\n                return feeAmount.plus(gst).toFixed(2)\n            })\n        )\n    }\n}\n","import { IAddress } from '../../api-interfaces'\n\nexport class Address implements IAddress {\n    public id: string\n    public addressLine1: string\n    public addressLine2: string\n    public zipCode: string\n    public city: string\n    public state: string\n    public country: string\n\n    constructor(data: IAddress) {\n        Object.assign(this, data)\n    }\n}\n","import { Component, Input, Optional } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { Transaction } from '../../api-interfaces'\n\n@Component({\n    selector: 'transaction-slip',\n    templateUrl: 'transaction-slip.component.html',\n})\nexport class TransactionSlipComponent {\n    @Input()\n    public transaction: Transaction\n\n    constructor(@Optional() public activeModal: NgbActiveModal) {}\n}\n","export default \"<div class=\\\"mb-2 text-center\\\">\\n    <span class=\\\"label label-success mb-1\\\">{{ buildActionLabel(transaction) }}</span>\\n    <h2 class=\\\"text-primary mb-0\\\">{{ deductableAmount | amount: transaction.currency?.decimalPlaces }} {{ transaction.currency?.code }}</h2>\\n</div>\\n<transaction-flow [transaction]=\\\"transaction\\\"></transaction-flow>\\n<div class=\\\"table-responsive my-2\\\">\\n    <table class=\\\"table table-borderless mb-0\\\">\\n        <tbody>\\n            <tr\\n                *ngIf=\\\"\\n                    transaction.id &&\\n                    transaction.type === 'deposit' &&\\n                    transaction.method !== 'card' &&\\n                    transaction.receivedCurrency &&\\n                    transaction.receivedCurrency.code !== transaction.currency?.code\\n                \\\"\\n            >\\n                <th class=\\\"py-2 text-right font-weight-bold text-muted\\\">{{ 'common.conversion' | translate }}</th>\\n                <td class=\\\"py-2 text-right text-muted\\\">\\n                    {{ transaction.receivedAmount | amount: transaction.receivedCurrency?.decimalPlaces }} {{ transaction.receivedCurrency?.code }} =\\n                    {{ transaction.amount | amount: transaction.currency?.decimalPlaces }} {{ transaction.currency?.code }}\\n                    <div class=\\\"small\\\">\\n                        1 {{ transaction.currency?.code }} = {{ calculateExchangeRate() }} {{ transaction.receivedCurrency?.code }}\\n                    </div>\\n                </td>\\n            </tr>\\n            <ng-container *ngIf=\\\"!isSgpmxMetalTransfer(); else metalTransferFees\\\">\\n                <tr *ngIf=\\\"showFees(transaction)\\\">\\n                    <th class=\\\"py-2 text-right font-weight-bold text-muted\\\">{{ 'common.service-fee' | translate }}</th>\\n                    <td class=\\\"py-2 text-right text-muted\\\">\\n                        {{ calculateFee(transaction) | amount: transaction.currency?.decimalPlaces }} {{ transaction.currency?.code }}\\n                        <div class=\\\"small\\\">\\n                            <ng-container\\n                                *ngIf=\\\"\\n                                    (transaction.fixedFee && !isZero(transaction.fixedFee)) ||\\n                                        (transaction.relativeFee && !isZero(transaction.relativeFee));\\n                                    else free\\n                                \\\"\\n                            >\\n                                (<ng-container *ngIf=\\\"transaction.fixedFee && !isZero(transaction.fixedFee)\\\"\\n                                    >{{ transaction.fixedFee | amount: transaction.currency?.decimalPlaces }}\\n                                    {{ transaction.currency?.code }}</ng-container\\n                                >\\n                                <ng-container\\n                                    *ngIf=\\\"\\n                                        transaction.fixedFee &&\\n                                        !isZero(transaction.fixedFee) &&\\n                                        transaction.relativeFee &&\\n                                        !isZero(transaction.relativeFee)\\n                                    \\\"\\n                                >\\n                                    +\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"transaction.relativeFee && !isZero(transaction.relativeFee)\\\">{{\\n                                    transaction.relativeFee | percent: '1.2'\\n                                }}</ng-container\\n                                >)\\n                            </ng-container>\\n                            <ng-template #free>({{ 'common.free-of-charge' | translate | lowercase }})</ng-template>\\n                        </div>\\n                    </td>\\n                </tr>\\n            </ng-container>\\n            <ng-template #metalTransferFees>\\n                <tr *ngIf=\\\"!transaction.id\\\">\\n                    <th class=\\\"py-2 text-right font-weight-bold text-muted\\\">{{ 'common.service-fee' | translate }}</th>\\n                    <td class=\\\"py-2 text-right text-muted\\\">{{ calculateFeeInUsd() | async | amount }} USD</td>\\n                </tr>\\n            </ng-template>\\n            <tr>\\n                <th class=\\\"py-2 text-right font-weight-bold\\\">\\n                    <ng-container *ngIf=\\\"!transaction.card; else cardTransaction\\\">\\n                        {{ 'common.recipient' | translate }} {{ (transaction.status === 'completed' ? 'common.got' : 'common.gets') | translate }}\\n                    </ng-container>\\n                    <ng-template #cardTransaction>\\n                        {{ 'common.card' | translate }} {{ (transaction.type === 'withdrawal' ? 'common.loaded' : 'common.unloaded') | translate }}\\n                        {{ 'common.with' | translate }}\\n                    </ng-template>\\n                </th>\\n                <td class=\\\"py-2 text-right text-primary\\\">\\n                    {{ determineAmount() | amount: transaction.currency?.decimalPlaces }}\\n                    {{\\n                        transaction.card && transaction.currency.code !== transaction.receivedCurrency?.code\\n                            ? transaction.receivedCurrency?.code\\n                            : transaction.currency?.code\\n                    }}\\n                </td>\\n            </tr>\\n        </tbody>\\n    </table>\\n    <ng-container *ngIf=\\\"transaction.comment\\\">\\n        <div class=\\\"mt-2\\\">\\n            <p>\\n                <span class=\\\"text-primary\\\">\\n                    <ng-container *ngIf=\\\"!isReceiver\\\">\\n                        {{ isPlatformTransfer() ? displayName : transaction.baseWallet?.user?.name }}\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"isReceiver\\\">\\n                        {{ isPlatformTransfer() ? displayName : transaction.counterWallet?.user?.name }}\\n                    </ng-container>\\n                </span>\\n                {{ 'common.wrote-a-comment' | translate }}:\\n            </p>\\n            <div class=\\\"transaction-slip-comment\\\">\\n                {{ transaction.comment }}\\n            </div>\\n        </div>\\n    </ng-container>\\n    <p class=\\\"text-center\\\" *ngIf=\\\"transaction.reference\\\">\\n        <b>{{ 'common.reference' | translate }}:</b> {{ transaction.reference }}\\n    </p>\\n    <p class=\\\"mt-4 text-truncate\\\" *ngIf=\\\"transaction.externalReference\\\">\\n        <b>Txid:</b> <copy-icon [value]=\\\"formatTxid(transaction.externalReference)\\\" class=\\\"ml-2 mr-1\\\"></copy-icon>\\n        <span class=\\\"text-muted\\\">{{ formatTxid(transaction.externalReference) }}</span>\\n    </p>\\n</div>\\n\";","import { Component, Input } from '@angular/core'\nimport { IconDefinition as BrandIconDefinition } from '@fortawesome/free-brands-svg-icons'\nimport {\n    faChartNetwork,\n    faCreditCard,\n    faFireAlt,\n    faGlobeAmericas,\n    faUniversity,\n    faWallet,\n} from '@fortawesome/pro-regular-svg-icons'\nimport { IconDefinition } from '@fortawesome/pro-solid-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport { environment } from 'src/environments/environment'\nimport { Transaction, TransactionMethod, Wallet } from '../../api-interfaces'\nimport { formatAccountNumber, isAccountNumber } from '../../common.mixin'\nimport { SessionService } from '../../services/session.service'\nimport { buildWalletOwnerAccountNumber } from '../../transactions.mixins'\n\n@Component({\n    selector: 'transaction-flow',\n    templateUrl: 'transaction-flow.component.html',\n})\nexport class TransactionFlowComponent {\n    @Input()\n    public transaction: Transaction\n    public displayName = environment.displayName\n    constructor(public session: SessionService, public translate: TranslateService) {}\n\n    public walletOwnerAccountNumber = (wallet: Wallet | null) =>\n        buildWalletOwnerAccountNumber(wallet, environment.displayName)\n\n    public prettifyCoinName(coin: TransactionMethod | null): string {\n        switch (coin) {\n            case 'crypto':\n                return 'Crypto'\n            default:\n                return ''\n        }\n    }\n\n    public determineTransactionIcon(transaction: Transaction, isSender = true): IconDefinition | BrandIconDefinition {\n        if (transaction.type === 'deposit') {\n            if (isSender) {\n                if (transaction.method === 'card') {\n                    return faCreditCard\n                }\n                return faUniversity\n            }\n        }\n        if (transaction.type === 'withdrawal') {\n            if (!isSender) {\n                if (transaction.method === 'card') {\n                    return faCreditCard\n                }\n                return faUniversity\n            }\n        }\n        if (transaction.type === 'mint') {\n            if (isSender) {\n                if (transaction.baseWallet) {\n                    return faWallet\n                }\n                return faGlobeAmericas\n            }\n            if (transaction.counterWallet) {\n                return faWallet\n            }\n            return faFireAlt\n        }\n\n        if (transaction.type === 'investment') {\n            return faChartNetwork\n        }\n        return faWallet\n    }\n\n    public buildCounterWalletName(): string {\n        if (!this.transaction.counterWallet) {\n            return ''\n        }\n        const { user } = this.transaction.counterWallet\n        if (user) {\n            return `${\n                isAccountNumber(user.accountNumber) ? formatAccountNumber(user.accountNumber) : user.accountNumber\n            }`\n        }\n        return environment.displayName\n    }\n\n    public buildFromText(): string {\n        if (environment.appName === 'sgpmx' && this.transaction.type === 'trade') {\n            return this.transaction.currency.code === 'USD' ? this.translate.instant('common.debit') : 'Sell'\n        }\n        if (this.transaction.type === 'account-fee') {\n            return this.translate.instant('common.payment-from')\n        }\n        return `${this.transaction.type} ${this.translate.instant('common.from').toLowerCase()}`\n    }\n\n    public buildToText(): string {\n        if (environment.appName === 'sgpmx' && this.transaction.type === 'trade') {\n            return this.transaction.currency.code === 'USD' ? 'Credit' : 'Buy'\n        }\n        if (this.transaction.type === 'account-fee') {\n            return this.translate.instant('common.payment-for')\n        }\n        return `${this.transaction.type} ${this.translate.instant('common.to').toLowerCase()}`\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, Input, OnInit } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { remove } from 'lodash'\nimport { forkJoin, Subject, Subscription } from 'rxjs'\nimport { filter, finalize, flatMap, switchMap } from 'rxjs/operators'\nimport { File as IFile, Transaction } from '../../api-interfaces'\nimport { ConfirmationResult, ConfirmationService } from '../../services/confirmation.service'\nimport { SessionService } from '../../services/session.service'\nimport { ToastrService } from '../../services/toastr.service'\n\n@Component({\n    selector: 'transaction-files',\n    templateUrl: 'transaction-files.component.html',\n})\nexport class TransactionFilesComponent implements OnInit {\n    @Input()\n    public transaction: Transaction\n    public files: File[] = []\n    public existingFiles: IFile[] = []\n    public isLoading = false\n\n    public subscriptions = new Subscription()\n    public fetchEvent = new Subject<void>()\n\n    public constructor(\n        public activeModal: NgbActiveModal,\n        public session: SessionService,\n        private http: HttpClient,\n        private toastr: ToastrService,\n        private confirmation: ConfirmationService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.fetchEvent\n                .pipe(switchMap(() => this.http.get<IFile[]>(`/transactions/${this.transaction.id}/files`)))\n                .subscribe(files => (this.existingFiles = files))\n        )\n        this.fetchEvent.next()\n    }\n\n    public deleteFile(file: IFile): void {\n        this.subscriptions.add(\n            this.confirmation\n                .show({\n                    type: 'danger',\n                    text: `${this.translate.instant(\n                        'common.are-you-sure-want-to-delete-file'\n                    )}<br>${this.translate.instant('common.you-cant-undo-action')}`,\n                    confirmText: this.translate.instant('common.delete'),\n                    confirmClass: 'danger',\n                })\n                .pipe(\n                    filter(result => result === ConfirmationResult.CONFIRMED),\n                    flatMap(() => this.http.delete<void>(`/transactions/${this.transaction.id}/files/${file.id}`))\n                )\n                .subscribe(() => {\n                    remove(this.existingFiles, { id: file.id })\n                    this.toastr.success(`${file.name} ${this.translate.instant('common.removed')}`)\n                    this.fetchEvent.next()\n                })\n        )\n    }\n\n    public uploadFiles(): void {\n        this.isLoading = true\n        this.subscriptions.add(\n            forkJoin(\n                this.files.map(file =>\n                    this.http.post<IFile>(`/transactions/${this.transaction.id}/files`, file, {\n                        headers: new HttpHeaders({\n                            'X-File-Name': encodeURIComponent(file.name),\n                            'Content-Type': file.type,\n                        }),\n                    })\n                )\n            )\n                .pipe(finalize(() => (this.isLoading = false)))\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.file-uploaded'))\n                    this.files = []\n                    this.fetchEvent.next()\n                })\n        )\n    }\n}\n","import { BeneficiaryMethod, BeneficiaryType, IBeneficiary } from '../../api-interfaces'\nimport { Address } from '../core/address.model'\nimport { User } from '../core/user.model'\nimport { Currency } from './currency.model'\n\nexport class Beneficiary implements IBeneficiary {\n    public id: string\n    public type: BeneficiaryType\n    public method: BeneficiaryMethod\n    public accountHolder: string | null\n    public accountHolderAddress: Address | null\n    public accountNumber: string | null\n    public routingNumber: string | null\n    public bankName: string | null\n    public bankSwiftCode: string | null\n    public bankAddress: Address | null\n    public intermediateBankName: string | null\n    public intermediateBankSwiftCode: string | null\n    public intermediateBankAddress: Address | null\n    public user: User | null\n    public currency: Currency\n    public createdAt: string\n    public updatedAt: string\n\n    constructor(data: Partial<IBeneficiary>) {\n        Object.assign(this, data)\n        if (data.currency) {\n            this.currency = new Currency(data.currency)\n        }\n        if (data.user) {\n            this.user = new User(data.user)\n        }\n        if (data.accountHolderAddress) {\n            this.accountHolderAddress = new Address(data.accountHolderAddress)\n        }\n        if (data.bankAddress) {\n            this.bankAddress = new Address(data.bankAddress)\n        }\n        if (data.intermediateBankAddress) {\n            this.intermediateBankAddress = new Address(data.intermediateBankAddress)\n        }\n    }\n}\n","import {\n    Alert,\n    ICard,\n    ICurrency,\n    Transaction as ITransaction,\n    TransactionMethod,\n    TransactionStatus,\n    TransactionTag,\n    TransactionType,\n} from '../../api-interfaces'\nimport { Beneficiary } from './beneficiary.model'\nimport { Currency } from './currency.model'\nimport { Wallet } from './wallet.model'\n\nexport const methodMap: { [K in TransactionMethod]: string } = {\n    internal: 'INTERNAL',\n    card: 'CARD',\n    crypto: 'CRYPTO',\n    local: 'LOCAL',\n    swift: 'SWIFT',\n}\n\nexport class Transaction implements ITransaction {\n    public id: string\n    public amount: string\n    public requestedAmount: string | null\n    public settledAmount: string\n    public status: TransactionStatus\n    public type: TransactionType\n    public method: TransactionMethod\n    public baseNewBalance: string | null\n    public counterNewBalance: string | null\n    public fixedFee: string\n    public relativeFee: string\n    public comment: string | null\n    public reference: string | null\n    public externalReference: string | null\n    public currency: ICurrency\n    public requestedCurrency: ICurrency | null\n    public baseWallet: Wallet | null\n    public counterWallet: Wallet | null\n    public settledAt: string | null\n    public beneficiary: Beneficiary | null\n    public card: ICard | null\n    public faulty: boolean\n    public alerts: Alert[]\n    public precision: number\n    public totalFee: string\n    public receivedAmount: string | null\n    public receivedCurrency: ICurrency | null\n    public purpose: string | null\n    public sourceOfFunds: string | null\n    public automated?: boolean\n    public tags?: TransactionTag[]\n    public usdRate: string | null\n    public createdAt: string\n    public updatedAt: string\n\n    constructor(data?: ITransaction) {\n        if (data) {\n            Object.assign(this, data)\n            this.currency = new Currency(data.currency)\n            if (data.requestedCurrency) {\n                this.requestedCurrency = new Currency(data.requestedCurrency)\n            }\n            if (data.receivedCurrency) {\n                this.receivedCurrency = new Currency(data.receivedCurrency)\n            }\n            if (data.baseWallet) {\n                this.baseWallet = new Wallet(data.baseWallet)\n            }\n            if (data.counterWallet) {\n                this.counterWallet = new Wallet(data.counterWallet)\n            }\n            if (data.beneficiary) {\n                this.beneficiary = new Beneficiary(data.beneficiary)\n            }\n        }\n    }\n\n    public isPlatformTransfer(): boolean {\n        return !!(\n            this.type === 'transfer' &&\n            ((this.baseWallet && this.baseWallet.isRootWallet()) ||\n                (this.counterWallet && this.counterWallet.isRootWallet()))\n        )\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common.module'\nimport { TransactionFilesComponent } from './transaction-files/transaction-files.component'\nimport { TransactionFilesModalComponent } from './transaction-files/transation-files-modal/transaction-files-modal.component'\nimport { TransactionFlowComponent } from './transaction-flow/transaction-flow.component'\nimport { TransactionOverviewComponent } from './transaction-overview/transaction-overview.component'\nimport { TransactionSlipComponent } from './transaction-slip/transaction-slip.component'\nimport { TransactionViewComponent } from './transaction-view/transaction-view.component'\n\nconst components = [\n    TransactionViewComponent,\n    TransactionFilesComponent,\n    TransactionFilesModalComponent,\n    TransactionFlowComponent,\n    TransactionSlipComponent,\n    TransactionOverviewComponent,\n]\n\n@NgModule({\n    declarations: components,\n    exports: components,\n    imports: [CommonModule],\n})\nexport class TransactionModule {}\n","import { Component, Input } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { Transaction } from '../../../api-interfaces'\n\n@Component({\n    selector: 'transaction-files-modal',\n    templateUrl: 'transaction-files-modal.component.html',\n})\nexport class TransactionFilesModalComponent {\n    @Input()\n    public transaction: Transaction\n\n    public constructor(public activeModal: NgbActiveModal) {}\n}\n","export default \"<div class=\\\"transaction-flow mb-2\\\">\\n    <div class=\\\"d-flex flex-column justify-content-between align-items-center w-25\\\">\\n        <div class=\\\"bubble\\\">\\n            <user-avatar\\n                *ngIf=\\\"transaction.baseWallet && transaction.baseWallet.user; else baseIcon\\\"\\n                [user]=\\\"transaction.baseWallet.user\\\"\\n            ></user-avatar>\\n            <ng-template #baseIcon>\\n                <fa-icon [icon]=\\\"determineTransactionIcon(transaction, true)\\\" [size]=\\\"'lg'\\\"></fa-icon>\\n            </ng-template>\\n        </div>\\n        <div class=\\\"line\\\"></div>\\n        <div class=\\\"bubble\\\">\\n            <user-avatar\\n                *ngIf=\\\"transaction.counterWallet && transaction.counterWallet.user?.id; else counterIcon\\\"\\n                [user]=\\\"transaction.counterWallet.user\\\"\\n            ></user-avatar>\\n            <ng-template #counterIcon>\\n                <fa-icon\\n                    [icon]=\\\"determineTransactionIcon(transaction, false)\\\"\\n                    [size]=\\\"'lg'\\\"\\n                    *ngIf=\\\"transaction.counterWallet || transaction.type === 'mint'\\\"\\n                ></fa-icon>\\n            </ng-template>\\n        </div>\\n    </div>\\n    <div class=\\\"w-75\\\">\\n        <div class=\\\"b-b-1 pb-3\\\">\\n            <div class=\\\"text-muted lh-1 pb-1\\\">\\n                {{ buildFromText() | capitalize }}\\n            </div>\\n            <div class=\\\"name-tag\\\">\\n                <ng-container *ngIf=\\\"transaction.baseWallet && transaction.type !== 'deposit'\\\">\\n                    <ng-container *ngIf=\\\"transaction.type === 'trade' && !transaction.baseWallet.user; else default\\\">\\n                        <div class=\\\"text-primary font-lg\\\">Trade</div>\\n                        <small>{{ walletOwnerAccountNumber(transaction.baseWallet) }}</small>\\n                    </ng-container>\\n                    <ng-template #default>\\n                        <ng-container *ngIf=\\\"transaction.baseWallet.user && transaction.baseWallet.user.name; else plain\\\">\\n                            <div class=\\\"text-primary font-lg\\\">{{ transaction.baseWallet.user.name }}</div>\\n                            <small>{{ transaction.baseWallet.user.accountNumber | accountNumber }}</small>\\n                        </ng-container>\\n                    </ng-template>\\n                    <ng-template #plain>\\n                        <div class=\\\"text-primary font-lg\\\">{{ walletOwnerAccountNumber(transaction.baseWallet) | accountNumber }}</div>\\n                    </ng-template>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"transaction.type === 'deposit'\\\">\\n                    <div class=\\\"text-primary font-lg\\\">\\n                        <ng-template #depositBtc>\\n                            {{ prettifyCoinName(transaction.method) }} {{ 'common.wallet' | translate | lowercase }}\\n                        </ng-template>\\n                    </div>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"transaction.type === 'mint' && !transaction.baseWallet\\\"\\n                    ><span class=\\\"text-primary\\\">{{ 'common.mint' | translate }}</span></ng-container\\n                >\\n            </div>\\n        </div>\\n        <div class=\\\"pt-3\\\">\\n            <div class=\\\"text-muted lh-1 pb-1\\\">\\n                {{ buildToText() | capitalize }}\\n            </div>\\n            <div class=\\\"name-tag\\\">\\n                <ng-container *ngIf=\\\"transaction.counterWallet && transaction.type !== 'withdrawal'\\\">\\n                    <ng-container *ngIf=\\\"transaction.counterWallet.user && transaction.counterWallet.user.name; else accountFee\\\">\\n                        <div class=\\\"text-primary font-lg\\\">{{ transaction.counterWallet.user.name }}</div>\\n                        <small>{{ transaction.counterWallet.user.accountNumber | accountNumber }}</small>\\n                    </ng-container>\\n                    <ng-template #accountFee>\\n                        <ng-container *ngIf=\\\"transaction.type === 'account-fee'; else cardOrder\\\">\\n                            <div class=\\\"text-primary font-lg\\\">{{ 'common.account-fee' | translate | sentenceCase }}</div>\\n                            <small>{{ walletOwnerAccountNumber(transaction.counterWallet) }}</small>\\n                        </ng-container>\\n                    </ng-template>\\n                    <ng-template #cardOrder>\\n                        <ng-container *ngIf=\\\"transaction.type === 'card-order'; else conversion\\\">\\n                            <div class=\\\"text-primary font-lg\\\">{{ 'common.card-order' | translate }}</div>\\n                            <small>{{ walletOwnerAccountNumber(transaction.counterWallet) }}</small>\\n                        </ng-container>\\n                    </ng-template>\\n                    <ng-template #conversion>\\n                        <ng-container *ngIf=\\\"transaction.type === 'conversion'; else trade\\\">\\n                            <div class=\\\"text-primary font-lg\\\">{{ 'common.conversion' | translate }}</div>\\n                            <small>{{ walletOwnerAccountNumber(transaction.counterWallet) }}</small>\\n                        </ng-container>\\n                    </ng-template>\\n                    <ng-template #trade>\\n                        <ng-container *ngIf=\\\"transaction.type === 'trade'; else plain\\\">\\n                            <div class=\\\"text-primary font-lg\\\">{{ 'common.trade' | translate }}</div>\\n                            <small>{{ walletOwnerAccountNumber(transaction.counterWallet) }}</small>\\n                        </ng-container>\\n                    </ng-template>\\n                    <ng-template #plain>\\n                        <div class=\\\"text-primary font-lg\\\">{{ buildCounterWalletName() | accountNumber }}</div>\\n                    </ng-template>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"!transaction.id && !transaction.counterWallet && transaction.type === 'transfer'\\\">\\n                    <div class=\\\"text-muted font-lg\\\">...</div>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"transaction.type === 'withdrawal'\\\">\\n                    <ng-container *ngIf=\\\"['redeem'].includes(transaction.method)\\\">\\n                        <div>{{ displayName }}</div>\\n                        <small class=\\\"text-gray\\\">{{ 'common.platform' | translate }}</small>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"transaction.method === 'card'\\\">\\n                        <div class=\\\"text-primary font-lg\\\">{{ 'common.card' | translate }} {{ transaction.card?.maskedPan }}</div>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"transaction.method !== 'card' && !['redeem'].includes(transaction.method)\\\">\\n                        <div class=\\\"text-primary font-lg\\\">{{ transaction.beneficiary?.accountHolder || transaction.beneficiary?.accountNumber }}</div>\\n                        <small *ngIf=\\\"transaction.beneficiary?.accountHolder\\\">{{ transaction.beneficiary?.accountNumber }}</small>\\n                    </ng-container>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"transaction.type === 'mint' && !transaction.counterWallet\\\"\\n                    ><span class=\\\"text-danger\\\">{{ 'common.destroyed' | translate }}</span></ng-container\\n                >\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">{{ 'transaction-files-modal.attach-file' | translate }}</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"activeModal.dismiss()\\\">&times;</button>\\n</div>\\n<div class=\\\"modal-body e2e-transaction-files-modal\\\">\\n    <transaction-files [transaction]=\\\"transaction\\\"></transaction-files>\\n</div>\\n\";","export default \"<dropzone\\n    [canCreate]=\\\"transaction.status === 'pending'\\\"\\n    [files]=\\\"files\\\"\\n    [existingFiles]=\\\"existingFiles\\\"\\n    (onDelete)=\\\"deleteFile($event)\\\"\\n    [canDelete]=\\\"['admin'].includes(session.user?.role)\\\"\\n></dropzone>\\n<div class=\\\"text-center p-3\\\">\\n    <h3 *ngIf=\\\"transaction.status !== 'pending' && existingFiles.length === 0\\\">{{ 'common.no-files' | translate }}</h3>\\n</div>\\n<div class=\\\"d-flex justify-content-end\\\" *ngIf=\\\"transaction.status !== 'completed'\\\">\\n    <button\\n        (click)=\\\"uploadFiles()\\\"\\n        type=\\\"button\\\"\\n        class=\\\"btn btn-primary btn-w-sm e2e-transaction-files-submit-btn\\\"\\n        [ngClass]=\\\"{ loading: isLoading }\\\"\\n        [disabled]=\\\"isLoading\\\"\\n    >\\n        {{ 'common.upload' | translate }}\\n    </button>\\n</div>\\n\";","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { EventEmitter, Injectable } from '@angular/core'\nimport { Observable, Subject } from 'rxjs'\nimport { environment } from 'src/environments/environment'\nimport { Transaction as ITransaction } from '../api-interfaces'\nimport { Transaction } from '../models/accounting/transaction.model'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TransactionService {\n    public changeEvent = new EventEmitter<void>()\n    public searchEvent = new Subject<void>()\n    public appName = environment.appName\n\n    constructor(private http: HttpClient) {}\n\n    public changeStatus(id: string, status: 'cancelled' | 'processing'): Observable<ITransaction> {\n        return this.http.patch<ITransaction>(\n            `/transactions/${id}`,\n            [\n                {\n                    op: 'replace',\n                    path: '/status',\n                    value: status,\n                },\n            ],\n            {\n                headers: new HttpHeaders({ 'Content-Type': 'application/json-patch+json' }),\n            }\n        )\n    }\n\n    public revert(id: string): Observable<ITransaction> {\n        return this.http.post<ITransaction>(`/transactions/${id}/revert`, {})\n    }\n\n    public hasInvoice(transaction: ITransaction): boolean {\n        const transactionModel = new Transaction(transaction)\n        const isTrade = transaction.type === 'trade' && ['AU', 'AG'].includes(transaction.currency.code)\n        const isTransfer =\n            transaction.type === 'transfer' &&\n            ['AU', 'AG'].includes(transaction.currency.code) &&\n            !transactionModel.isPlatformTransfer()\n        return (\n            this.appName === 'sgpmx' &&\n            transaction.status === 'completed' &&\n            (isTrade || isTransfer || ['redeem', 'card-order'].includes(transaction.type))\n        )\n    }\n\n    public restore(id: string): Observable<Transaction> {\n        return this.http.post<Transaction>(`/admin/transactions/${id}/restore`, {})\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Optional, Output, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { faFileSearch, faQuestionCircle } from '@fortawesome/pro-light-svg-icons'\nimport { faTimes } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { forkJoin, Subscription } from 'rxjs'\nimport { filter, finalize, flatMap, take } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { File as IFile, Paginated, Trade, Transaction } from '../../api-interfaces'\nimport { methodMap } from '../../models/accounting/transaction.model'\nimport { ConfirmationResult, ConfirmationService } from '../../services/confirmation.service'\nimport { SessionService } from '../../services/session.service'\nimport { ToastrService } from '../../services/toastr.service'\nimport { TransactionService } from '../../services/transaction.service'\nimport { getTradeGrandTotal, getTradeValue } from '../../trades/trade.mixins'\n\n@Component({\n    selector: 'transaction-view',\n    templateUrl: 'transaction-view.component.html',\n})\nexport class TransactionViewComponent implements OnInit, OnDestroy {\n    public faQuestionCircle = faQuestionCircle\n    @Input()\n    public transaction: Transaction\n    @Output()\n    public readonly onUpdate = new EventEmitter<void>()\n    @Output()\n    public readonly onCancel = new EventEmitter<void>()\n\n    public files: File[] = []\n    public existingFiles: IFile[] = []\n    public trade: Trade\n    public activeTab: 'overview' | 'beneficiary' | 'attachments' = 'overview'\n    public isMarkingAsPaid = false\n    public isUploading = false\n    public isCancelling = false\n    public transactionMethodMap = methodMap\n    public faTimes = faTimes\n    public faFileSearch = faFileSearch\n    public getTradeGrandTotal = getTradeGrandTotal\n    public getTradeValue = getTradeValue\n\n    @ViewChild('cryptoForm')\n    public cryptoForm: NgForm\n\n    // SGPMX\n    public hasReceipt = false\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private http: HttpClient,\n        @Optional() public activeModal: NgbActiveModal,\n        private toastr: ToastrService,\n        private confirmation: ConfirmationService,\n        private transactionService: TransactionService,\n        private session: SessionService,\n        private router: Router,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        if (this.transaction.type === 'trade' && environment.appName === 'sgpmx') {\n            this.subscriptions.add(\n                this.session.userStream\n                    .pipe(\n                        take(1),\n                        flatMap(user =>\n                            this.http.get<Paginated<Trade>>(`/users/${user.id}/trades`, {\n                                params: {\n                                    'filter.baseTransactionId': this.transaction.id,\n                                    'filter.counterTransactionId': this.transaction.id,\n                                    'filter.q': 'or',\n                                },\n                            })\n                        )\n                    )\n                    .subscribe(res => {\n                        this.trade = res.data[0]\n                    })\n            )\n        }\n        if (\n            this.transaction.type === 'deposit' &&\n            this.transaction.method === 'crypto' &&\n            this.transaction.status === 'pending'\n        ) {\n            this.activeTab = 'beneficiary'\n        }\n        if (\n            this.transactionService.hasInvoice(this.transaction) &&\n            (this.transaction.type === 'trade' || this.transaction.baseWallet?.user?.id === this.session.user.id)\n        ) {\n            this.http.get<boolean>(`/sgpmx/transactions/${this.transaction.id}/has-receipt`).subscribe(hasReceipt => {\n                this.hasReceipt = hasReceipt\n            })\n        }\n        this.getTransactionFiles()\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public getTransactionFiles(): void {\n        this.http.get<IFile[]>(`/transactions/${this.transaction.id}/files`).subscribe(files => {\n            this.existingFiles = files\n        })\n    }\n\n    public markAsPaid(): void {\n        this.isMarkingAsPaid = true\n        this.transactionService\n            .changeStatus(this.transaction.id, 'processing')\n            .pipe(\n                finalize(() => {\n                    this.isMarkingAsPaid = false\n                })\n            )\n            .subscribe(transaction => {\n                this.transaction.status = transaction.status\n                this.toastr.success(this.translate.instant('common.deposit-marked-as-paid'))\n                this.onUpdate.emit()\n\n                this.subscriptions.add(\n                    this.confirmation\n                        .show({\n                            type: 'success',\n                            text: this.translate.instant('common.thank-you-for-notifying'),\n                            confirmText: this.translate.instant('common.i-will-upload-a-receipt'),\n                            cancelText: this.translate.instant('common.i-will-do-it-later'),\n                            cancelClass: 'warning',\n                        })\n                        .subscribe(result => {\n                            if (result === ConfirmationResult.CONFIRMED) {\n                                this.activeTab = 'attachments'\n                            }\n                        })\n                )\n            })\n    }\n\n    public markCryptoDepositAsPaid(): void {\n        Object.assign(this.cryptoForm, { submitted: true })\n        if (this.cryptoForm && this.cryptoForm.invalid) {\n            return\n        }\n        this.isMarkingAsPaid = true\n        this.http\n            .patch<Transaction>(\n                `/transactions/${this.transaction.id}`,\n                [\n                    {\n                        op: 'replace',\n                        path: '/status',\n                        value: 'processing',\n                    },\n                    {\n                        op: 'replace',\n                        path: '/reference',\n                        value: this.transaction.reference,\n                    },\n                ],\n                {\n                    headers: new HttpHeaders({ 'Content-Type': 'application/json-patch+json' }),\n                }\n            )\n            .pipe(\n                finalize(() => {\n                    this.isMarkingAsPaid = false\n                })\n            )\n            .subscribe(async transaction => {\n                this.transaction.status = transaction.status\n                this.toastr.success(this.translate.instant('common.deposit-marked-as-paid'))\n                this.onUpdate.emit()\n                this.router\n                    .navigateByUrl('/', { skipLocationChange: true })\n                    .then(() => this.router.navigate(['/transactions']))\n                if (this.activeModal) {\n                    this.activeModal.close()\n                }\n            })\n    }\n\n    public cancel(): void {\n        this.isCancelling = true\n        this.subscriptions.add(\n            this.confirmation\n                .show({\n                    type: 'danger',\n                    text: `${this.translate.instant('common.are-you-sure-you-want-to-cancel')} ${\n                        this.transaction.type\n                    } (${this.transaction.id.substring(0, 7)})?`,\n                    confirmText: this.translate.instant('common.yes'),\n                    confirmClass: 'danger',\n                    cancelText: this.translate.instant('common.no'),\n                    cancelClass: 'success',\n                })\n                .pipe(\n                    filter(result => result === ConfirmationResult.CONFIRMED),\n                    flatMap(() => this.transactionService.changeStatus(this.transaction.id, 'cancelled')),\n                    finalize(() => {\n                        this.isCancelling = false\n                    })\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.transaction-cancelled'))\n                    this.onCancel.emit()\n                })\n        )\n    }\n\n    public uploadFiles(): void {\n        this.isUploading = true\n        this.subscriptions.add(\n            forkJoin(\n                this.files.map(file =>\n                    this.http.post<File>(`/transactions/${this.transaction.id}/files`, file, {\n                        headers: new HttpHeaders({\n                            'X-File-Name': encodeURIComponent(file.name),\n                            'Content-Type': file.type,\n                        }),\n                    })\n                )\n            )\n                .pipe(\n                    finalize(() => {\n                        this.isUploading = false\n                    })\n                )\n                .subscribe(() => {\n                    this.files = []\n                    this.getTransactionFiles()\n                    this.toastr.success(this.translate.instant('common.attachment-uploaded'))\n                    this.onUpdate.emit()\n                })\n        )\n    }\n\n    public get canCancel(): boolean {\n        return this.activeTab !== 'attachments' && this.transaction.status === 'pending'\n    }\n\n    public get canMarkAsPaid(): boolean {\n        return (\n            this.activeTab !== 'attachments' &&\n            this.transaction.status === 'pending' &&\n            this.transaction.type === 'deposit'\n        )\n    }\n\n    public get canUpload(): boolean {\n        return (\n            this.activeTab === 'attachments' && ['pending', 'processing', 'completed'].includes(this.transaction.status)\n        )\n    }\n\n    public get isLoading(): boolean {\n        return this.isMarkingAsPaid || this.isUploading || this.isCancelling\n    }\n\n    public openProformaInvoice(): void {\n        this.subscriptions.add(\n            this.session\n                .createSignedUrl(`/transactions/${this.transaction.id}/proforma-invoice`)\n                .subscribe(signedUrl => {\n                    window.open(signedUrl, '_blank', 'noopener')\n                })\n        )\n    }\n\n    public openSgpmxInvoice(): void {\n        this.subscriptions.add(\n            this.session.createSignedUrl(`/sgpmx-invoice/${this.transaction.id}`).subscribe(signedUrl => {\n                window.open(signedUrl, '_blank', 'noopener')\n            })\n        )\n    }\n\n    public openInvoice(reference: string): void {\n        const invoiceId = reference.split(' ')[1]\n        this.subscriptions.add(\n            this.session.createSignedUrl(`/invoices/${invoiceId}/file`).subscribe(signedUrl => {\n                window.open(signedUrl, '_blank', 'noopener')\n            })\n        )\n    }\n}\n"],"sourceRoot":"webpack:///"}