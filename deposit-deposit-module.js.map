{"version":3,"sources":["./src/app/common/models/accounting/fee.model.ts","./src/app/deposit/deposit-form/deposit-form.component.ts","./src/app/deposit/deposit-form/deposit-form.component.html","./src/app/deposit/deposit-routing.module.ts","./src/app/deposit/deposit.component.html","./src/app/deposit/deposit.component.ts","./src/app/deposit/deposit.module.ts","./src/app/common/services/accounting/fee.service.ts"],"names":[],"mappings":"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","file":"deposit-deposit-module.js","sourcesContent":["import { FeeType, IFee, TransactionMethod } from '../../api-interfaces'\nimport { User } from '../core/user.model'\nimport { Beneficiary } from './beneficiary.model'\nimport { Currency } from './currency.model'\n\nexport const feeTypeMap: { [K in FeeType]: string } = {\n    'account-fee': 'Account Fee',\n    'card-order': 'Card Order Fee',\n    'fx-spread': 'Exchange Rate Spread',\n    deposit: 'Deposit',\n    withdrawal: 'Withdrawal',\n    transfer: 'Transfer',\n    conversion: 'Conversion',\n    investment: 'Investment',\n    trade: 'Trade',\n    redeem: 'Redeem',\n    service: 'Buy & Sell',\n    gst: 'GST',\n    payment: 'Payment',\n}\n\nexport const feeMethodMap: { [K in TransactionMethod]: string } = {\n    internal: 'Internal',\n    card: 'Topup Card',\n    crypto: 'Crypto',\n    local: 'LOCAL',\n    swift: 'SWIFT',\n}\n\nexport class Fee implements IFee {\n    public id: string\n    public type: FeeType\n    public method: TransactionMethod\n    public fixed: string | null\n    public relative: string | null\n    public max: string | null\n    public min: string | null\n    public minValue: string | null\n    public currency: Currency\n    public user: User | null\n    public beneficiary: Beneficiary | null\n    public createdAt: string\n    public updatedAt: string\n\n    public constructor(data?: Partial<IFee>) {\n        if (data) {\n            Object.assign(this, data)\n            if (data.currency) {\n                this.currency = new Currency(data.currency)\n            }\n            if (data.user) {\n                this.user = new User(data.user)\n            }\n            if (data.beneficiary) {\n                this.beneficiary = new Beneficiary(data.beneficiary)\n            }\n        }\n    }\n\n    public isGlobal(): boolean {\n        return this.user === null\n    }\n\n    public isFallback(currency: Currency): boolean {\n        return this.currency.code !== currency.code\n    }\n\n    public isAssociationFee(user: User | null): boolean {\n        return !!this.user && !!user && this.user.id !== user.id\n    }\n\n    public hasFixedFee(): boolean {\n        return !['fx-spread', 'service', 'gst'].includes(this.type)\n    }\n\n    public hasRelativeFee(): boolean {\n        return !['account-fee'].includes(this.type)\n    }\n\n    public hasMaxOrMin(): boolean {\n        return !['account-fee', 'fx-spread'].includes(this.type)\n    }\n\n    public hasMinValue(): boolean {\n        return ['transfer', 'deposit', 'withdrawal'].includes(this.type)\n    }\n}\n\nexport function getFeeType(transactionType: string): FeeType {\n    const feeMap: Record<string, FeeType> = {\n        deposit: 'deposit',\n        withdrawal: 'withdrawal',\n        transfer: 'transfer',\n        conversion: 'conversion',\n        investment: 'investment',\n        trade: 'trade',\n        redeem: 'redeem',\n        payment: 'payment',\n        // Use transfer fee for invoice\n        invoice: 'transfer',\n        'invoice-p2p': 'transfer',\n        'card-order': 'card-order',\n        'account-fee': 'account-fee',\n    }\n    return feeMap[transactionType]\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { faQuestionCircle } from '@fortawesome/pro-light-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { pick } from 'lodash'\nimport { combineLatest, forkJoin, Observable, of, Subject, Subscription, throwError } from 'rxjs'\nimport { catchError, map, mergeMap, switchMap, tap } from 'rxjs/operators'\nimport {\n    BeneficiaryMethod,\n    IBeneficiary,\n    ICurrency,\n    IFee,\n    IUser,\n    Transaction,\n    TransactionMethod,\n    Wallet,\n} from 'src/app/common/api-interfaces'\nimport { Currency } from 'src/app/common/models/accounting/currency.model'\nimport { openNoAccessModal } from 'src/app/common/no-access-modal/no-access-modal.component'\nimport { PaymentConfirmationComponent } from 'src/app/common/payment/payment-confirmation/payment-confirmation.component'\nimport { FeeService } from 'src/app/common/services/accounting/fee.service'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { TransactionViewComponent } from 'src/app/common/transaction/transaction-view/transaction-view.component'\nimport { WalletsService } from 'src/app/store/wallets/wallets.service'\nimport { environment } from 'src/environments/environment'\nimport { BeneficiaryService } from '../../common/services/accounting/beneficiary.service'\n\n@Component({\n    selector: 'deposit-form',\n    templateUrl: 'deposit-form.component.html',\n})\nexport class DepositFormComponent implements OnInit, OnDestroy, OnChanges {\n    @Input()\n    public transaction: Partial<Transaction>\n    public files: File[] = []\n    public minAmount: string | number | undefined\n    public isUploadCollapsed = true\n\n    public faQuestionCircle = faQuestionCircle\n    public appName = environment.appName\n\n    public purposeItems = [\n        'Pre Funding Remittance Account',\n        'Pre Funding Card Top Up',\n        'Pre Funding Foreign Exchange Account',\n        'Purchase Sale of Goods',\n        'Payment of Interest/Fees/Charges',\n        'Refund/Rebate',\n    ]\n\n    public sourceOfFundItems = [\n        'Business/Partnership Income',\n        'Employment Income',\n        'Social Security or Government Payments ',\n        'Retirement Income (Super Pensions or Annuities) ',\n        'Crowd Funding',\n        'Investment Income (Interest, Dividend, Rent)',\n        'Trust Fund Income',\n        'Foreign Income ',\n        'Prizes & Awards',\n        'Compensation or Insurance',\n        'Investment/Securities',\n    ]\n\n    @ViewChild('depositForm')\n    public depositForm: NgForm\n\n    private subscriptions = new Subscription()\n    private fetchEvent = new Subject<void>()\n    private fee: IFee | null\n\n    constructor(\n        public session: SessionService,\n        private ngbModal: NgbModal,\n        private http: HttpClient,\n        private walletsService: WalletsService,\n        private feeService: FeeService,\n        private beneficiaryService: BeneficiaryService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            combineLatest([this.fetchEvent, this.session.userStream])\n                .pipe(\n                    tap(([_, user]) => {\n                        this.transaction.counterWallet = {\n                            user: pick(user, ['id', 'accountNumber', 'name']),\n                        } as Wallet\n                    }),\n                    switchMap(([_, user]) =>\n                        forkJoin([\n                            this.feeService.fetch({\n                                type: 'deposit',\n                                method: this.transaction.method as TransactionMethod,\n                                user: { id: user.id } as IUser,\n                                currency: { code: this.transaction.currency?.code } as ICurrency,\n                            }),\n                            this.beneficiaryService.fetchDepositInstruction(\n                                this.transaction.method as BeneficiaryMethod,\n                                this.transaction.currency?.code!,\n                                user.id\n                            ),\n                        ])\n                    )\n                )\n                .subscribe(([fee, depositInstruction]) => {\n                    this.fee = fee\n                    Object.assign(this.transaction, this.feeService.determineFee(this.transaction, fee as any))\n                    if (fee && fee.minValue) {\n                        this.minAmount = Currency.convert(fee.minValue, fee.currency, this.transaction.currency!)\n                    }\n                    if (this.transaction.method === 'crypto') {\n                        this.transaction.beneficiary = {\n                            accountNumber: (environment.cryptoDepositAddresses as any)[\n                                this.transaction.currency?.code as any\n                            ],\n                            currency: {\n                                code: this.transaction.currency?.code,\n                            } as ICurrency,\n                            method: 'crypto',\n                            type: 'crypto-address',\n                        } as IBeneficiary\n                    } else {\n                        this.transaction.beneficiary = depositInstruction\n                    }\n                })\n        )\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.transaction) {\n            this.reset()\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (this.depositForm && this.depositForm.invalid) {\n            return\n        }\n        if (this.session.user.accessErrors.length > 0) {\n            openNoAccessModal(this.ngbModal, this.session.user.accessErrors[0])\n            return\n        }\n\n        const modal = this.ngbModal.open(PaymentConfirmationComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n        const component = modal.componentInstance as PaymentConfirmationComponent\n        component.transaction = this.transaction as Transaction\n        component.onConfirm.subscribe(() => {\n            this.createTransaction()\n                .pipe(\n                    catchError(err => {\n                        component.isSubmitted = false\n                        component.reset()\n                        return throwError(err)\n                    })\n                )\n                .subscribe(async transaction => {\n                    modal.close()\n                    const transactionView = this.ngbModal.open(TransactionViewComponent, {\n                        windowClass: 'modal-primary',\n                        backdrop: 'static',\n                    })\n                    const transactionViewModal = transactionView.componentInstance as TransactionViewComponent\n                    transactionViewModal.transaction = transaction\n                    transactionViewModal.activeTab = 'beneficiary'\n                    this.reset()\n                    this.walletsService.fetch()\n                    this.fetchEvent.next()\n                })\n        })\n    }\n\n    public createTransaction(): Observable<Transaction> {\n        return this.http.post<Transaction>('/transactions', this.transaction).pipe(\n            mergeMap(transaction =>\n                this.files.length > 0\n                    ? forkJoin(\n                          this.files.map(file =>\n                              this.http.post<File>(`/transactions/${transaction.id}/files`, file, {\n                                  headers: new HttpHeaders({\n                                      'X-File-Name': encodeURIComponent(file.name),\n                                      'Content-Type': file.type,\n                                  }),\n                              })\n                          )\n                      ).pipe(map(() => transaction))\n                    : of(transaction)\n            )\n        )\n    }\n\n    public onCurrencyChange(): void {\n        this.fetchEvent.next()\n    }\n\n    public onAmountChange(): void {\n        Object.assign(this.transaction, this.feeService.determineFee(this.transaction, this.fee as any))\n    }\n\n    private reset(): void {\n        this.files = []\n        this.minAmount = undefined\n        if (this.depositForm) {\n            this.depositForm.resetForm({\n                amount: undefined,\n                purpose: undefined,\n                sourceOfFunds: undefined,\n                comment: undefined,\n                'currency-select': this.transaction.currency,\n            })\n        }\n    }\n}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <form\\n        class=\\\"form-validation\\\"\\n        #depositForm=\\\"ngForm\\\"\\n        (ngSubmit)=\\\"submit()\\\"\\n        [ngClass]=\\\"{ 'ng-submitted': depositForm.submitted }\\\"\\n        autocomplete=\\\"false\\\"\\n        novalidate\\n    >\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"currency\\\">{{ 'common.currency' | translate }}</label>\\n            <currency-select\\n                [(currency)]=\\\"transaction.currency\\\"\\n                [user]=\\\"user\\\"\\n                [isLarge]=\\\"true\\\"\\n                [currencyTypes]=\\\"transaction.method === 'crypto' ? ['crypto'] : ['fiat']\\\"\\n                [required]=\\\"true\\\"\\n                [depositable]=\\\"true\\\"\\n                [useFullName]=\\\"true\\\"\\n                (currencyChange)=\\\"onCurrencyChange()\\\"\\n                #currencySelect\\n            >\\n            </currency-select>\\n        </div>\\n        <div *ngIf=\\\"currencySelect.currencyInput.invalid && (depositForm.submitted || currencySelect.currencyInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"currencySelect.currencyInput?.errors?.required\\\">\\n                {{ 'common.this-is-required' | translate }}\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"amount\\\">{{ 'common.amount' | translate }}</label>\\n            <fa-icon\\n                class=\\\"text-primary ml-1\\\"\\n                [icon]=\\\"faQuestionCircle\\\"\\n                [ngbPopover]=\\\"'common.in-case-receiving' | translate\\\"\\n                triggers=\\\"hover\\\"\\n                container=\\\"body\\\"\\n            >\\n            </fa-icon>\\n            <div class=\\\"input-group\\\">\\n                <input\\n                    type=\\\"number\\\"\\n                    class=\\\"form-control form-control-lg\\\"\\n                    id=\\\"amount\\\"\\n                    name=\\\"amount\\\"\\n                    placeholder=\\\"0.00\\\"\\n                    [(ngModel)]=\\\"transaction.amount\\\"\\n                    (ngModelChange)=\\\"onAmountChange()\\\"\\n                    [min]=\\\"minAmount\\\"\\n                    #amount=\\\"ngModel\\\"\\n                    required\\n                />\\n                <div class=\\\"input-group-append\\\">\\n                    <span class=\\\"input-group-text font-lg\\\">{{ transaction.currency?.code }}</span>\\n                </div>\\n            </div>\\n            <div *ngIf=\\\"amount.invalid && (depositForm.submitted || amount.dirty)\\\" class=\\\"error-messages\\\">\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"amount?.errors?.min\\\">\\n                    Minimum amount is\\n                    {{ minAmount + '' || '0' | amount: transaction.currency?.decimalPlaces }}\\n                    {{ transaction.currency?.code }}.\\n                </div>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"appName !== 'sgpmx'\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"font-md\\\" for=\\\"purpose\\\">{{ 'common.source-of-funds' | translate }}</label>\\n                <ng-select\\n                    class=\\\"ng-select-lg\\\"\\n                    name=\\\"sourceOfFunds\\\"\\n                    [(ngModel)]=\\\"transaction.sourceOfFunds\\\"\\n                    [items]=\\\"sourceOfFundItems\\\"\\n                    [clearable]=\\\"false\\\"\\n                    [searchable]=\\\"false\\\"\\n                    [required]=\\\"true\\\"\\n                    dropdownPosition=\\\"bottom\\\"\\n                    #sourceOfFundInput=\\\"ngModel\\\"\\n                >\\n                    <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                        {{ item }}\\n                    </ng-template>\\n                    <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                        {{ item }}\\n                    </ng-template>\\n                </ng-select>\\n                <div *ngIf=\\\"sourceOfFundInput.invalid && (depositForm.submitted || sourceOfFundInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"sourceOfFundInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"font-md\\\" for=\\\"purpose\\\">{{ 'common.purpose' | translate }}</label>\\n                <ng-select\\n                    class=\\\"ng-select-lg\\\"\\n                    name=\\\"purpose\\\"\\n                    [(ngModel)]=\\\"transaction.purpose\\\"\\n                    [items]=\\\"purposeItems\\\"\\n                    [clearable]=\\\"false\\\"\\n                    [required]=\\\"true\\\"\\n                    [addTag]=\\\"true\\\"\\n                    addTagText=\\\"Use\\\"\\n                    dropdownPosition=\\\"bottom\\\"\\n                    #purposeInput=\\\"ngModel\\\"\\n                >\\n                    <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                        {{ item }}\\n                    </ng-template>\\n                    <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                        {{ item }}\\n                    </ng-template>\\n                </ng-select>\\n                <div *ngIf=\\\"purposeInput.invalid && (depositForm.submitted || purposeInput.dirty)\\\" class=\\\"error-messages\\\">\\n                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"purposeInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"font-md\\\" for=\\\"comment\\\"\\n                >{{ 'common.comment' | translate }} <small class=\\\"text-muted\\\">({{ 'common.optional' | translate }})</small></label\\n            >\\n            <textarea\\n                class=\\\"form-control form-control-lg\\\"\\n                id=\\\"comment\\\"\\n                name=\\\"comment\\\"\\n                [(ngModel)]=\\\"transaction.comment\\\"\\n                rows=\\\"3\\\"\\n                emptyToNull\\n            ></textarea>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <a href class=\\\"d-block mb-2\\\" (click)=\\\"isUploadCollapsed = !isUploadCollapsed; $event.preventDefault()\\\">\\n                {{ isUploadCollapsed ? '+ Attach' : '- Remove' }} {{ 'common.file' | translate | lowercase }}\\n            </a>\\n            <dropzone [files]=\\\"files\\\" [ngbCollapse]=\\\"isUploadCollapsed\\\"></dropzone>\\n        </div>\\n        <access-errors [errors]=\\\"['VerificationRequiredError']\\\"></access-errors>\\n        <div *ngIf=\\\"!transaction.beneficiary\\\" class=\\\"callout callout-danger e2e-deposit-not-config\\\">\\n            {{ 'deposit-form.deposit-method-is-not-configured' | translate }}\\n        </div>\\n\\n        <button\\n            type=\\\"submit\\\"\\n            class=\\\"btn btn-lg btn-block btn-primary mb-2\\\"\\n            [disabled]=\\\"!transaction.beneficiary || user.accessErrors.includes('VerificationRequiredError')\\\"\\n        >\\n            {{ (transaction.method === 'crypto' ? 'common.request-address' : 'common.submit') | translate }}\\n        </button>\\n        <div *ngIf=\\\"transaction.method === 'crypto'\\\" class=\\\"small text-muted mb-2\\\">\\n            <b>Disclaimer:</b> All services related to wallet, custody and currency exchange provided on this website are exclusively provided by\\n            Aerapass' third party suppliers. Aerapass allows to its customers access on an 'as-is' basis.\\n        </div>\\n        <div class=\\\"small text-muted\\\">\\n            {{ 'common.by-clicking-the-submit-button' | translate }} <br />\\n            <a [routerLink]=\\\"['/terms']\\\" class=\\\"text-muted\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\"\\n                >{{ 'common.terms' | translate }} &amp; {{ 'common.conditions' | translate }}</a\\n            >\\n            {{ 'common.and' | translate }}\\n            <a [routerLink]=\\\"['/privacy']\\\" class=\\\"text-muted\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">{{ 'common.data-privacy-notice' | translate }}</a\\n            >.\\n        </div>\\n    </form>\\n</ng-container>\\n\";","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { PaymentGuard } from '../common/payment/payment.guard'\nimport { DepositComponent } from './deposit.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: DepositComponent,\n        data: {\n            redirectTo: '/deposit',\n        },\n        canActivate: [LoggedInAuthGuard, PaymentGuard],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class DepositRoutingModule {}\n","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"container pt-page e2e-deposit\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col\\\">\\n                <div class=\\\"payment-methods\\\">\\n                    <a\\n                        *ngIf=\\\"user.hasPermission('payment-swift')\\\"\\n                        class=\\\"payment-methods-item\\\"\\n                        [routerLink]=\\\"['/deposit']\\\"\\n                        [queryParams]=\\\"{ method: null }\\\"\\n                        routerLinkActive=\\\"active\\\"\\n                        [routerLinkActiveOptions]=\\\"{ exact: true }\\\"\\n                    >\\n                        <figure>\\n                            <img class=\\\"img-fluid\\\" draggable=\\\"false\\\" src=\\\"/img/payment-methods/swift.svg\\\" />\\n                        </figure>\\n                        <span>Intl. {{ 'common.wire-transfer' | translate }}</span>\\n                    </a>\\n                    <a\\n                        *ngIf=\\\"user.hasPermission('payment-local')\\\"\\n                        class=\\\"payment-methods-item\\\"\\n                        [routerLink]=\\\"['/deposit']\\\"\\n                        [queryParams]=\\\"{ method: 'local' }\\\"\\n                        routerLinkActive=\\\"active\\\"\\n                    >\\n                        <figure>\\n                            <img class=\\\"img-fluid\\\" draggable=\\\"false\\\" src=\\\"/img/payment-methods/local.svg\\\" />\\n                        </figure>\\n                        <span>{{ 'deposit.local-transfer' | translate }}</span>\\n                    </a>\\n                    <a\\n                        *ngIf=\\\"user.hasPermission('payment-crypto')\\\"\\n                        class=\\\"payment-methods-item\\\"\\n                        [routerLink]=\\\"['/deposit']\\\"\\n                        [queryParams]=\\\"{ method: 'crypto' }\\\"\\n                        routerLinkActive=\\\"active\\\"\\n                    >\\n                        <figure>\\n                            <img class=\\\"img-fluid\\\" draggable=\\\"false\\\" src=\\\"/img/payment-methods/crypto.svg\\\" />\\n                        </figure>\\n                        <span>{{ 'common.crypto-currencies' | translate }}</span>\\n                    </a>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row mb-3\\\">\\n            <div class=\\\"col-lg-12\\\">\\n                <section class=\\\"card mb-3\\\">\\n                    <div class=\\\"card-header\\\">\\n                        <h5 class=\\\"mb-0\\\">{{ 'common.deposit' | translate }}</h5>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"callout callout-info mt-0\\\" *ngIf=\\\"['swift', 'local'].includes(transaction.method!)\\\">\\n                            <h6 class=\\\"text-info mb-0\\\">{{ 'common.deposit-instructions' | translate }}</h6>\\n                            <p>{{ 'deposit.choose-your-desired-amount' | translate }}</p>\\n                        </div>\\n                        <div class=\\\"callout callout-info mt-0\\\" *ngIf=\\\"transaction.method === 'crypto'\\\">\\n                            <h6 class=\\\"text-info mb-0\\\">{{ 'common.wallet-address' | translate }}</h6>\\n                            <p>{{ 'common.enter-the-following' | translate }}</p>\\n                        </div>\\n                        <deposit-form [(transaction)]=\\\"transaction\\\"></deposit-form>\\n                        <p class=\\\"small text-muted mt-2\\\" *ngIf=\\\"['swift'].includes(transaction.method!)\\\">\\n                            {{ 'common.if-you-send' | translate }}\\n                        </p>\\n                    </div>\\n                </section>\\n                <p class=\\\"text-center text-muted\\\">\\n                    <a [routerLink]=\\\"['/withdraw']\\\">{{ 'deposit.go-to-withdraw' | translate }} &#x203A;</a>\\n                </p>\\n            </div>\\n            <div class=\\\"col-lg-12 d-none d-lg-block\\\">\\n                <div class=\\\"transation-slip-container max-width-sm\\\">\\n                    <transaction-slip [transaction]=\\\"transaction\\\"></transaction-slip>\\n                    <p class=\\\"text-center text-muted pb-4\\\">\\n                        {{ 'common.learn-more-about-our-fees' | translate }} <a [routerLink]=\\\"['/fees']\\\">{{ 'common.here' | translate }}</a>\\n                    </p>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n\";","import { Component, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { Subscription } from 'rxjs'\nimport { Transaction, TransactionMethod, Wallet } from '../common/api-interfaces'\nimport { SessionService } from '../common/services/session.service'\n\n@Component({\n    selector: 'deposit',\n    templateUrl: 'deposit.component.html',\n})\nexport class DepositComponent implements OnInit, OnDestroy {\n    public transaction: Partial<Transaction>\n    private subscriptions = new Subscription()\n\n    constructor(private route: ActivatedRoute, public session: SessionService) {}\n\n    public async ngOnInit(): Promise<void> {\n        if (this.route.snapshot.queryParamMap.has('method')) {\n            this.resetTransaction(this.route.snapshot.queryParamMap.get('method') as TransactionMethod)\n        }\n        this.route.queryParamMap.subscribe(params => {\n            this.resetTransaction((params.get('method') || 'swift') as TransactionMethod)\n        })\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    private resetTransaction(method: TransactionMethod): void {\n        this.transaction = {\n            type: 'deposit',\n            method,\n            baseWallet: {\n                user: null,\n            } as Wallet,\n        }\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { PaymentFormModule } from '../common/payment/payment.module'\nimport { TransactionModule } from '../common/transaction/transaction.module'\nimport { DepositFormComponent } from './deposit-form/deposit-form.component'\nimport { DepositRoutingModule } from './deposit-routing.module'\nimport { DepositComponent } from './deposit.component'\n\n@NgModule({\n    declarations: [DepositComponent, DepositFormComponent],\n    imports: [CommonModule, DepositRoutingModule, PaymentFormModule, TransactionModule],\n})\nexport class DepositModule {}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport BigNumber from 'bignumber.js'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { FeeType, ICurrency, IFee, IUser, RPCResult, Transaction, TransactionMethod } from '../../api-interfaces'\nimport { Currency } from '../../models/accounting/currency.model'\nimport { Fee } from '../../models/accounting/fee.model'\nimport { calculateFee } from '../../transactions.mixins'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FeeService {\n    constructor(private http: HttpClient) {}\n\n    public fetch(fee: {\n        type: FeeType\n        method: TransactionMethod\n        currency: ICurrency\n        amount?: string\n        user?: IUser | null\n    }): Observable<Fee | null> {\n        return this.http\n            .post<RPCResult<IFee | null>>(\n                '/fees',\n                {\n                    id: Math.round(Math.random() * 10000),\n                    jsonrpc: '2.0',\n                    method: 'findByPrimaryAttributes',\n                    params: {\n                        type: fee.type,\n                        method: fee.method,\n                        amount: fee.amount ? fee.amount : '1',\n                        currency: fee.currency,\n                        user: fee.user,\n                    },\n                },\n                {\n                    headers: new HttpHeaders({\n                        'Content-Type': 'application/json-rpc',\n                    }),\n                }\n            )\n            .pipe(map(response => (response.result ? new Fee(response.result) : null)))\n    }\n\n    public determineFee(currentTransaction: Partial<Transaction>, fee: Partial<Fee> | null): Partial<Transaction> {\n        const transaction = currentTransaction\n        const fixedFee =\n            fee && fee.fixed && transaction.currency\n                ? Currency.convert(fee.fixed, fee.currency!, transaction.currency)\n                : '0'\n        const relativeFee = fee && fee.relative ? fee.relative : '0'\n\n        transaction.fixedFee = fixedFee || undefined\n        transaction.relativeFee = relativeFee || undefined\n\n        if (fee && fee.min) {\n            const minFee = Currency.convert(fee.min, fee.currency!, transaction.currency!)\n            if (new BigNumber(calculateFee(transaction as Transaction)).isLessThan(minFee)) {\n                transaction.fixedFee = minFee\n                transaction.relativeFee = '0'\n            }\n        }\n        if (fee && fee.max) {\n            const maxFee = Currency.convert(fee.max, fee.currency!, transaction.currency!)\n            if (new BigNumber(calculateFee(transaction as Transaction)).isGreaterThan(maxFee)) {\n                transaction.fixedFee = maxFee\n                transaction.relativeFee = '0'\n            }\n        }\n        return transaction\n    }\n}\n"],"sourceRoot":"webpack:///"}