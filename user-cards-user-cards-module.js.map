{"version":3,"sources":["./src/app/user-cards/user-cards.service.ts","./src/app/common/card-view/card-view.module.ts","./src/app/user-cards/card-activation/card-activation.component.html","./src/app/user-cards/card-order/card-order.component.html","./src/app/user-cards/user-cards.component.html","./src/app/user-cards/user-cards.module.ts","./src/app/user-cards/user-card-orders/user-card-orders.component.ts","./src/app/user-cards/card-activation/card-activation.component.ts","./src/app/user-cards/card-order/card-order.component.ts","./src/app/user-cards/user-card-orders/user-card-orders.component.html","./src/app/user-cards/user-cards.component.ts","./src/app/user-cards/card-order/card-order-fees/card-order-fees.component.ts","./src/app/user-cards/card-order/card-order-fees/card-order-fees.component.html","./src/app/user-cards/user-cards-routing.module.ts"],"names":[],"mappings":"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","file":"user-cards-user-cards-module.js","sourcesContent":["import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { map, switchMap, take } from 'rxjs/operators'\nimport { SessionService } from '../common/services/session.service'\n\n@Injectable()\nexport class UserCardsService {\n    public cardsCount$ = this.session.userStream.pipe(\n        take(1),\n        switchMap(user =>\n            this.http\n                .head(`/users/${user.id}/cards`, {\n                    observe: 'response',\n                })\n                .pipe(\n                    map(response =>\n                        response.headers && response.headers.has('x-total-count')\n                            ? response.headers.get('x-total-count')!\n                            : '0'\n                    )\n                )\n        )\n    )\n    public cardOrdersCount$ = this.session.userStream.pipe(\n        take(1),\n        switchMap(user =>\n            this.http\n                .head(`/users/${user.id}/card-orders`, {\n                    observe: 'response',\n                })\n                .pipe(\n                    map(response =>\n                        response.headers && response.headers.has('x-total-count')\n                            ? response.headers.get('x-total-count')!\n                            : '0'\n                    )\n                )\n        )\n    )\n\n    constructor(private http: HttpClient, private session: SessionService) {}\n}\n","import { NgModule } from '@angular/core'\nimport { IonicModule } from '@ionic/angular'\nimport { CommonModule } from '../common.module'\nimport { CardDetailsPage } from './card-details/card-details.page'\nimport { CardViewPage } from './card-view.page'\nimport { ModalChangePinPage } from './modal-change-pin/modal-change-pin.page'\nimport { ModalDownloadTransactionsPage } from './modal-download-transactions/modal-download-transactions.page'\nimport { ModalFeesPage } from './modal-fees/modal-fees.page'\nimport { ModalOffledgerPage } from './modal-offledger/modal-offledger.page'\nimport { ModalSwapPage } from './modal-swap/modal-swap.page'\nimport { ModalTopupPage } from './modal-topup/modal-topup.page'\nimport { ModalUnloadPage } from './modal-unload/modal-unload.page'\n\n@NgModule({\n    declarations: [\n        CardViewPage,\n        ModalTopupPage,\n        CardDetailsPage,\n        ModalChangePinPage,\n        ModalDownloadTransactionsPage,\n        ModalFeesPage,\n        ModalOffledgerPage,\n        ModalUnloadPage,\n        ModalSwapPage,\n    ],\n    exports: [CardViewPage],\n    imports: [CommonModule, IonicModule],\n})\nexport class CardViewModule {}\n","export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.cards' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/cards']\\\">{{ 'common.cards' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.activate' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-3\\\">\\n        <div class=\\\"col-lg-12 offset-lg-6\\\">\\n            <section class=\\\"card mb-3\\\">\\n                <div class=\\\"card-header\\\">\\n                    <h5 class=\\\"mb-0\\\">{{ 'common.activate-card' | translate }}</h5>\\n                </div>\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"callout callout-primary mt-0\\\">\\n                        <h6 class=\\\"text-info mb-0\\\">{{ 'common.follow-these-instructions' | translate }}</h6>\\n                        <p class=\\\"mb-0\\\">{{ 'common.enter-4-digits' | translate }}</p>\\n                    </div>\\n                    <form\\n                        class=\\\"form-validation\\\"\\n                        [ngClass]=\\\"{ 'ng-submitted': cardActivationForm.submitted }\\\"\\n                        #cardActivationForm=\\\"ngForm\\\"\\n                        (ngSubmit)=\\\"submit()\\\"\\n                        autocomplete=\\\"false\\\"\\n                        novalidate\\n                    >\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"font-md\\\" for=\\\"last4Digits\\\">{{ 'common.last-4-digits' | translate }}</label>\\n                            <input\\n                                type=\\\"text\\\"\\n                                class=\\\"form-control form-control-lg\\\"\\n                                [(ngModel)]=\\\"activation.last4Digits\\\"\\n                                id=\\\"last4Digits\\\"\\n                                name=\\\"last4Digits\\\"\\n                                #last4Digits=\\\"ngModel\\\"\\n                                required\\n                            />\\n                            <div *ngIf=\\\"last4Digits.invalid && (cardActivationForm.submitted || last4Digits.dirty)\\\" class=\\\"error-messages\\\">\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"last4Digits?.errors?.required\\\">\\n                                    {{ 'common.this-is-required' | translate }}\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"font-md\\\" for=\\\"pin\\\">PIN</label>\\n                            <input\\n                                type=\\\"password\\\"\\n                                class=\\\"form-control form-control-lg\\\"\\n                                [(ngModel)]=\\\"activation.pin\\\"\\n                                id=\\\"pin\\\"\\n                                name=\\\"pin\\\"\\n                                #pin=\\\"ngModel\\\"\\n                                pattern=\\\"^[0-9]+$\\\"\\n                                minlength=\\\"6\\\"\\n                                maxlength=\\\"6\\\"\\n                                required\\n                            />\\n                            <div *ngIf=\\\"pin.invalid && (cardActivationForm.submitted || pin.dirty)\\\" class=\\\"error-messages\\\">\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"pin?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"pin?.errors?.pattern\\\">{{ 'common.only-digits-allowed' | translate }}</div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"pin?.errors?.minlength\\\">{{ 'common.must-six-digits' | translate }}</div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"pin?.errors?.maxlength\\\">{{ 'common.cannot-be-longer' | translate }}</div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"font-md\\\" for=\\\"pin\\\">{{ 'common.repeat-pin' | translate }}</label>\\n                            <input\\n                                type=\\\"password\\\"\\n                                class=\\\"form-control form-control-lg\\\"\\n                                [(ngModel)]=\\\"repeatedPin\\\"\\n                                id=\\\"repeatedPin\\\"\\n                                name=\\\"repeatedPin\\\"\\n                                #repeatedPinInput=\\\"ngModel\\\"\\n                                pattern=\\\"^[0-9]+$\\\"\\n                                minlength=\\\"6\\\"\\n                                maxlength=\\\"6\\\"\\n                                [matchPassword]=\\\"activation.pin\\\"\\n                                required\\n                            />\\n                            <div *ngIf=\\\"repeatedPinInput.invalid && (cardActivationForm.submitted || repeatedPinInput.dirty)\\\" class=\\\"error-messages\\\">\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPinInput?.errors?.required\\\">\\n                                    {{ 'common.this-is-required' | translate }}\\n                                </div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPinInput?.errors?.pattern\\\">\\n                                    {{ 'common.only-digits-allowed' | translate }}\\n                                </div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPinInput?.errors?.minlength\\\">\\n                                    {{ 'common.must-six-digits' | translate }}\\n                                </div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPinInput?.errors?.maxlength\\\">\\n                                    {{ 'common.cannot-be-longer' | translate }}\\n                                </div>\\n                                <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPinInput?.errors?.matchPassword\\\">\\n                                    {{ 'common.pin-do-not-match' | translate }}\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <button type=\\\"submit\\\" class=\\\"btn btn-lg btn-block btn-primary\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n                            {{ 'common.activate-card' | translate }}\\n                        </button>\\n                    </form>\\n                </div>\\n            </section>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.cards' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/cards']\\\">{{ 'common.cards' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.order' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"container e2e-card-order\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col d-flex justify-content-center\\\">\\n            <div class=\\\"card max-width-lg\\\">\\n                <div class=\\\"card-header\\\">\\n                    <h5 class=\\\"text-center mb-0\\\">\\n                        {{ 'common.apply-for' | translate }} {{ displayName }}\\n                        {{ appName === 'sgpmx' ? (cardProgram?.name === 'Gold' ? 'Elite' : 'Pro') : 'Card' }}\\n                    </h5>\\n                </div>\\n                <div class=\\\"card-body\\\">\\n                    <card-dummy\\n                        [backgroundImage]=\\\"digitalCardArtWorkUrl\\\"\\n                        [card]=\\\"{ maskedPan: '1234 56** **** 5432' }\\\"\\n                        [isLoading]=\\\"isLoading\\\"\\n                    ></card-dummy>\\n                    <form\\n                        #cardOrderForm=\\\"ngForm\\\"\\n                        [ngClass]=\\\"{ 'ng-submitted': cardOrderForm.submitted }\\\"\\n                        (ngSubmit)=\\\"submit()\\\"\\n                        autocomplete=\\\"false\\\"\\n                        novalidate\\n                    >\\n                        <h5 class=\\\"text-center mb-2 font-lg\\\" [hidden]=\\\"item.transaction.fixedFee === null\\\">\\n                            <ng-container *ngIf=\\\"!isFree(); else free\\\">\\n                                {{ appName === 'sgpmx' ? 'Annual Fee inclusive of 7% GST' : 'One-Time' }} {{ 'common.fee' | translate }}\\n                                <span class=\\\"text-primary font-weight-bold\\\">\\n                                    {{ item.transaction.fixedFee | amount: item.transaction.currency?.decimalPlaces }}\\n                                    {{ item.transaction.currency?.code }}\\n                                </span>\\n                            </ng-container>\\n                            <ng-template #free>\\n                                {{ 'common.apply-for' | translate }} <b>{{ 'common.free' | translate | lowercase }}</b> {{ 'common.now' | translate }}\\n                            </ng-template>\\n                        </h5>\\n                        <h5 class=\\\"text-danger mb-3 text-center\\\" *ngIf=\\\"item.transaction.fixedFee === null\\\">\\n                            {{ 'common.out-of-stock' | translate }}\\n                        </h5>\\n                        <p class=\\\"text-center\\\" *ngIf=\\\"appName !== 'sgpmx'; else sgpmxContent\\\">\\n                            {{ 'common.simple-safe' | translate }} {{ item.type !== 'physical' ? 'of' : 'of ATMs and' }}\\n                            {{ 'common.store-around-globe' | translate: { value: displayName } }}\\n                            {{ appName === 'sgpmx' ? '' : ('common.at-annual-cost' | translate) }} {{ 'common.now' | translate }}.\\n                        </p>\\n                        <ng-template #sgpmxContent>\\n                            <div class=\\\"text-center w-75 m-auto mb-3\\\">\\n                                <hr />\\n                                <h5 class=\\\"text-primary font-weight-bold\\\">LIMITED TIME OFFER</h5>\\n                                <p class=\\\"text-primary\\\">\\n                                    Sign up for your Stacker Market {{ cardProgram?.name === 'Gold' ? 'Elite' : 'Pro' }} account today and receive\\n                                    200.00 USD worth of silver in your account.\\n                                </p>\\n                                <hr />\\n                                <p>Stacker Market {{ cardProgram?.name === 'Gold' ? 'Elite' : 'Pro' }} includes:</p>\\n                                <p>\\n                                    1. A physical or virtual multi-currency prepaid/debit card that is widely accepted by millions of ATMs, stores,\\n                                    and across the internet.*\\n                                </p>\\n                                <p>2. A physical mailing address in Singapore.</p>\\n                                <p>\\n                                    3. Preferred rates rates when onboarding existing metals or redeeming your Stacker Market allocated ounces for\\n                                    physical metals.\\n                                </p>\\n                                <br />\\n                                <p>*ATM option for physical cards only. Virtual card option is available for Androids devices only.</p>\\n                            </div>\\n                        </ng-template>\\n                        <div class=\\\"alert alert-warning\\\" *ngIf=\\\"isCardOrderDisabled()\\\">\\n                            {{ 'common.card-orders-unavailable' | translate }}\\n                        </div>\\n                        <ng-container *ngIf=\\\"user$ | async; let user\\\">\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"type\\\">{{ 'common.card-type' | translate }}</label>\\n                                <ng-select\\n                                    [items]=\\\"types\\\"\\n                                    [placeholder]=\\\"'common.select-card-type' | translate\\\"\\n                                    name=\\\"type\\\"\\n                                    id=\\\"type\\\"\\n                                    [clearable]=\\\"false\\\"\\n                                    [(ngModel)]=\\\"item.type\\\"\\n                                    (change)=\\\"assignFee(); typeChanged$.next()\\\"\\n                                    required\\n                                    [disabled]=\\\"isCardOrderDisabled()\\\"\\n                                >\\n                                    <ng-template ng-label-tmp let-item=\\\"item\\\">\\n                                        <span class=\\\"text-capitalize\\\">{{ item }}</span>\\n                                    </ng-template>\\n                                    <ng-template ng-option-tmp let-item=\\\"item\\\">\\n                                        <span class=\\\"text-capitalize\\\">{{ item }}</span>\\n                                    </ng-template>\\n                                </ng-select>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"form-group\\\" [ngClass]=\\\"!isFree() ? 'col-sm-12' : 'col'\\\">\\n                                    <label for=\\\"cardHolder\\\">{{ 'common.name-on-card' | translate }}</label>\\n                                    <input\\n                                        type=\\\"text\\\"\\n                                        id=\\\"cardHolder\\\"\\n                                        name=\\\"cardHolder\\\"\\n                                        class=\\\"form-control\\\"\\n                                        [value]=\\\"userDetails?.firstName + ' ' + userDetails?.lastName\\\"\\n                                        disabled\\n                                    />\\n                                </div>\\n                                <div class=\\\"form-group col-sm-12\\\" *ngIf=\\\"!isFree()\\\">\\n                                    <label for=\\\"type\\\">{{ 'common.pay-with' | translate }}</label>\\n                                    <currency-select\\n                                        [(currency)]=\\\"item.transaction.currency\\\"\\n                                        [user]=\\\"user\\\"\\n                                        (currencyChange)=\\\"assignFee()\\\"\\n                                    ></currency-select>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group mb-3\\\" *ngIf=\\\"item.type === 'physical'\\\">\\n                                <div class=\\\"d-flex justify-content-between\\\">\\n                                    <label>{{ 'common.shipping-address' | translate }}</label>\\n                                </div>\\n                                <textarea\\n                                    class=\\\"form-control\\\"\\n                                    [(ngModel)]=\\\"item.shippingAddress\\\"\\n                                    name=\\\"shippingAddress\\\"\\n                                    rows=\\\"4\\\"\\n                                    required\\n                                    #shippingAddressField=\\\"ngModel\\\"\\n                                ></textarea>\\n                                <div\\n                                    *ngIf=\\\"shippingAddressField.invalid && (cardOrderForm.submitted || shippingAddressField.dirty)\\\"\\n                                    class=\\\"error-messages\\\"\\n                                >\\n                                    <div class=\\\"form-control-feedback\\\" *ngIf=\\\"shippingAddressField?.errors?.required\\\">\\n                                        {{ 'common.this-is-required' | translate }}\\n                                    </div>\\n                                </div>\\n                                <p class=\\\"text-muted font-sm mt-1\\\">{{ 'common.shipping-address-note' | translate }}</p>\\n                            </div>\\n                            <ng-container *ngIf=\\\"appName !== 'sgpmx'\\\">\\n                                <div *ngIf=\\\"item.type === 'physical' && !!cardProgram?.expressDeliveryPrice\\\" class=\\\"row\\\">\\n                                    <div class=\\\"form-group col-sm-12\\\">\\n                                        <div class=\\\"custom-control custom-radio\\\">\\n                                            <input\\n                                                class=\\\"custom-control-input\\\"\\n                                                type=\\\"radio\\\"\\n                                                id=\\\"shippingBatch\\\"\\n                                                name=\\\"isExpressDelivery\\\"\\n                                                [value]=\\\"false\\\"\\n                                                [(ngModel)]=\\\"item.isExpressDelivery\\\"\\n                                            />\\n                                            <label class=\\\"custom-control-label font-md\\\" for=\\\"shippingBatch\\\">\\n                                                {{ 'common.batch-delivery' | translate }}\\n                                                <p class=\\\"font-sm\\\">\\n                                                    {{ 'common.batch-delivery-desc' | translate }} <br />\\n                                                    <b class=\\\"text-primary\\\">FREE</b>\\n                                                </p>\\n                                            </label>\\n                                        </div>\\n                                    </div>\\n                                    <div class=\\\"form-group col-sm-12\\\">\\n                                        <div class=\\\"custom-control custom-radio\\\">\\n                                            <input\\n                                                class=\\\"custom-control-input\\\"\\n                                                type=\\\"radio\\\"\\n                                                id=\\\"shippingExpress\\\"\\n                                                name=\\\"isExpressDelivery\\\"\\n                                                [value]=\\\"true\\\"\\n                                                [(ngModel)]=\\\"item.isExpressDelivery\\\"\\n                                            />\\n                                            <label class=\\\"custom-control-label font-md\\\" for=\\\"shippingExpress\\\">\\n                                                {{ 'common.express-delivery' | translate }}\\n                                                <p class=\\\"font-sm\\\">\\n                                                    {{ 'common.express-delivery-desc' | translate }} <br />\\n                                                    <b class=\\\"text-primary\\\">+{{ cardProgram.expressDeliveryPrice | amount: 2 }} USD</b>\\n                                                </p>\\n                                            </label>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </ng-container>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col\\\">\\n                                    <access-errors></access-errors>\\n                                    <button\\n                                        type=\\\"submit\\\"\\n                                        class=\\\"btn btn-primary btn-lg mb-2 w-100\\\"\\n                                        [ngClass]=\\\"{ loading: isLoading }\\\"\\n                                        [disabled]=\\\"\\n                                            isLoading ||\\n                                            !item.transaction.fixedFee ||\\n                                            user.accessErrors.length > 0 ||\\n                                            isCardOrderDisabled() ||\\n                                            isDisallowMultiple()\\n                                        \\\"\\n                                    >\\n                                        {{ 'common.apply' | translate }} {{ appName === 'sgpmx' ? '' : ('common.for-card' | translate) }}\\n                                    </button>\\n                                    <p class=\\\"text-center text-danger\\\" *ngIf=\\\"isDisallowMultiple()\\\">\\n                                        {{ 'common.this-card-program' | translate }}\\n                                    </p>\\n                                </div>\\n                            </div>\\n                        </ng-container>\\n                        <div class=\\\"row mt-2\\\">\\n                            <div class=\\\"col text-center\\\">\\n                                <a href (click)=\\\"openFeesModal(); $event.preventDefault()\\\">{{ 'common.view-card-fee-schedule' | translate }}</a>\\n                            </div>\\n                        </div>\\n                    </form>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"container pt-page pb-3\\\">\\n        <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n            <div class=\\\"col-auto\\\">\\n                <h5 class=\\\"mb-0\\\">{{ 'common.cards' | translate }}</h5>\\n            </div>\\n            <div class=\\\"col-auto d-flex justify-content-end\\\">\\n                <ol class=\\\"breadcrumb px-0\\\">\\n                    <li class=\\\"breadcrumb-item\\\">\\n                        <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                    </li>\\n                    <li class=\\\"breadcrumb-item active\\\">{{ 'common.cards' | translate }}</li>\\n                </ol>\\n            </div>\\n        </div>\\n        <div class=\\\"row justify-content-between align-items-center\\\">\\n            <div class=\\\"col-lg col-md-12\\\">\\n                <ul class=\\\"nav nav-tabs nav-tabs-lg\\\">\\n                    <li class=\\\"nav-item\\\">\\n                        <a href class=\\\"nav-link\\\" [ngClass]=\\\"{ active: router.isActive('/cards', true) }\\\" [routerLink]=\\\"['/cards']\\\">\\n                            {{ 'common.manage-cards' | translate }} ({{ (cardsCount$ | async) || 0 }})\\n                        </a>\\n                    </li>\\n                    <li class=\\\"nav-item\\\">\\n                        <a href class=\\\"nav-link\\\" [ngClass]=\\\"{ active: router.isActive('/cards/orders', true) }\\\" [routerLink]=\\\"['/cards/orders']\\\">\\n                            {{ 'common.manage-orders' | translate }} ({{ (cardOrdersCount$ | async) || 0 }})\\n                        </a>\\n                    </li>\\n                </ul>\\n            </div>\\n            <div class=\\\"col-auto pt-3 pt-md-0\\\">\\n                <button class=\\\"btn btn-success-air mr-2\\\" [routerLink]=\\\"['/cards/activate']\\\">{{ 'common.activate-card' | translate }}</button>\\n                <button class=\\\"btn btn-primary-air\\\" [routerLink]=\\\"['/cards/order']\\\">\\n                    <fa-icon class=\\\"mr-1\\\" [icon]=\\\"faPlus\\\"></fa-icon> {{ 'common.new-card' | translate }}\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"container e2e-user-invoices\\\">\\n        <div class=\\\"card\\\">\\n            <div class=\\\"card-header b-b-0\\\">{{ 'common.cards' | translate }}</div>\\n            <div class=\\\"table-responsive\\\">\\n                <table class=\\\"table table-hover table-card\\\">\\n                    <thead class=\\\"thead-light\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.card' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['invoicee', 'name']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['invoicee', 'name'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['invoicee', 'name']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.status' | translate }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\">\\n                                {{ 'common.created-at' | translate | titlecase }}\\n                                <fa-icon\\n                                    class=\\\"sort-toggle\\\"\\n                                    [icon]=\\\"getSortingDirection(['createdAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                    (click)=\\\"sort(['createdAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                    [ngClass]=\\\"{ active: isActiveSorting(['createdAt']) }\\\"\\n                                ></fa-icon>\\n                            </th>\\n                            <th scope=\\\"col\\\"></th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                            <ng-container *ngIf=\\\"items.length === 0; else rows\\\">\\n                                <tr>\\n                                    <td class=\\\"bg-white\\\" colspan=\\\"12\\\">\\n                                        <div class=\\\"mx-auto p-3 mt-2 mb-4 text-center max-width-sm\\\">\\n                                            <img src=\\\"/img/icons/delivery.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                                            <h4 class=\\\"mb-1\\\">{{ 'common.order-your-card' | translate }}</h4>\\n                                            <p class=\\\"mb-3 text-gray\\\">\\n                                                {{ 'common.get-your-multi-currency-card-now' | translate: { value: displayName } }}\\n                                            </p>\\n                                            <button type=\\\"button\\\" class=\\\"btn btn-primary-air btn-lg btn-block\\\" [routerLink]=\\\"['/cards/order']\\\">\\n                                                {{ 'common.apply-now' | translate }}\\n                                            </button>\\n                                        </div>\\n                                    </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-template #rows>\\n                                <tr *ngFor=\\\"let card of items\\\" class=\\\"clickable bg-white\\\" (click)=\\\"showCard(card)\\\">\\n                                    <th scope=\\\"row\\\">\\n                                        <div class=\\\"d-flex align-items-center\\\">\\n                                            <!-- htmllint attr-bans=\\\"[]\\\" -->\\n                                            <div class=\\\"avatar avatar-sm mr-3\\\">\\n                                                <svg\\n                                                    class=\\\"img-avatar\\\"\\n                                                    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                    xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n                                                    xml:space=\\\"preserve\\\"\\n                                                    text-rendering=\\\"geometricPrecision\\\"\\n                                                    style=\\\"\\n                                                        shape-rendering: geometricPrecision;\\n                                                        image-rendering: optimizeQuality;\\n                                                        fill-rule: evenodd;\\n                                                        clip-rule: evenodd;\\n                                                    \\\"\\n                                                    viewBox=\\\"0 0 120 120\\\"\\n                                                >\\n                                                    <g>\\n                                                        <rect [style.fill]=\\\"appColor\\\" width=\\\"120\\\" height=\\\"120\\\"></rect>\\n                                                        <text\\n                                                            font-weight=\\\"500\\\"\\n                                                            font-size=\\\"3.25em\\\"\\n                                                            font-family=\\\"sans-serif\\\"\\n                                                            fill=\\\"#ffffff\\\"\\n                                                            x=\\\"50%\\\"\\n                                                            y=\\\"50%\\\"\\n                                                            text-anchor=\\\"middle\\\"\\n                                                            dy=\\\"0.35em\\\"\\n                                                        >\\n                                                            {{ card.type[0] | uppercase }}\\n                                                        </text>\\n                                                    </g>\\n                                                </svg>\\n                                            </div>\\n                                            <!-- htmllint attr-bans=\\\"$previous\\\" -->\\n                                            <div>\\n                                                <div>{{ formatPan(card.maskedPan) }}</div>\\n                                                <div class=\\\"text-muted text-capitalize\\\">{{ card.type }}</div>\\n                                            </div>\\n                                        </div>\\n                                    </th>\\n                                    <td>\\n                                        <span\\n                                            class=\\\"text-capitalize label\\\"\\n                                            [ngClass]=\\\"{\\n                                                'label-success': card.status === 'active',\\n                                                'label-info': card.status === 'blocked',\\n                                                'label-danger': card.status === 'inactive'\\n                                            }\\\"\\n                                            >{{ card.status }}</span\\n                                        >\\n                                    </td>\\n                                    <td>{{ card.createdAt | date: 'medium' }}</td>\\n                                    <td class=\\\"action pr-4 text-right\\\">\\n                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-primary-air\\\" (click)=\\\"showCard(card); $event.stopPropagation()\\\">\\n                                            {{ 'common.view' | translate }}\\n                                        </button>\\n                                    </td>\\n                                </tr>\\n                                <tr *ngFor=\\\"let empty of fill\\\" class=\\\"fill\\\">\\n                                    <td colspan=\\\"12\\\">\\n                                        <div>&nbsp;</div>\\n                                        <span>&nbsp;</span>\\n                                    </td>\\n                                </tr>\\n                            </ng-template>\\n                        </ng-container>\\n                    </tbody>\\n                </table>\\n            </div>\\n        </div>\\n        <footer class=\\\"table-footer mb-3\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-6 col-md-8\\\">\\n                    <ng-select\\n                        [(ngModel)]=\\\"limit\\\"\\n                        dropdownPosition=\\\"auto\\\"\\n                        (change)=\\\"select(1)\\\"\\n                        [items]=\\\"limitOpts\\\"\\n                        [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                        [clearable]=\\\"false\\\"\\n                        [searchable]=\\\"false\\\"\\n                        required\\n                    >\\n                        <ng-template ng-label-tmp let-item=\\\"item\\\">{{ 'common.show-entries' | translate: { value: item } }}</ng-template>\\n                        <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                    </ng-select>\\n                </div>\\n                <div class=\\\"col-lg-18 col-md-16 d-flex justify-content-center justify-content-md-end mt-3 mt-md-0\\\">\\n                    <ngb-pagination\\n                        [(page)]=\\\"page\\\"\\n                        [collectionSize]=\\\"count\\\"\\n                        (pageChange)=\\\"select()\\\"\\n                        [pageSize]=\\\"limit\\\"\\n                        [maxSize]=\\\"4\\\"\\n                        [rotate]=\\\"false\\\"\\n                        [boundaryLinks]=\\\"true\\\"\\n                    >\\n                    </ngb-pagination>\\n                </div>\\n            </div>\\n        </footer>\\n    </div>\\n</ng-container>\\n\";","import { NgModule } from '@angular/core'\nimport { CardDummyModule } from '../common/card-dummy/card-dummy.module'\nimport { CardViewModule } from '../common/card-view/card-view.module'\nimport { CommonModule } from '../common/common.module'\nimport { PaymentFormModule } from '../common/payment/payment.module'\nimport { TransactionModule } from '../common/transaction/transaction.module'\nimport { CardActivationComponent } from './card-activation/card-activation.component'\nimport { CardOrderConfirmationComponent } from './card-order-confirmation/card-order-confirmation.component'\nimport { CardOrderFeesComponent } from './card-order/card-order-fees/card-order-fees.component'\nimport { CardOrderTermsComponent } from './card-order/card-order-terms/card-order-terms.component'\nimport { CardOrderComponent } from './card-order/card-order.component'\nimport { UserCardOrdersComponent } from './user-card-orders/user-card-orders.component'\nimport { UserCardsRoutingModule } from './user-cards-routing.module'\nimport { UserCardsComponent } from './user-cards.component'\nimport { UserCardsService } from './user-cards.service'\n\n@NgModule({\n    declarations: [\n        UserCardsComponent,\n        CardOrderComponent,\n        UserCardOrdersComponent,\n        CardOrderTermsComponent,\n        CardOrderFeesComponent,\n        CardActivationComponent,\n        CardOrderConfirmationComponent,\n    ],\n    imports: [\n        CommonModule,\n        UserCardsRoutingModule,\n        CardDummyModule,\n        PaymentFormModule,\n        TransactionModule,\n        CardViewModule,\n    ],\n    providers: [UserCardsService],\n})\nexport class UserCardsModule {}\n","import { HttpClient, HttpResponse } from '@angular/common/http'\nimport { ChangeDetectorRef, Component } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { faCreditCardFront } from '@fortawesome/pro-light-svg-icons'\nimport { faPaperPlane } from '@fortawesome/pro-solid-svg-icons'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport * as Color from 'color'\nimport { Observable } from 'rxjs'\nimport { delay, flatMap, take, tap } from 'rxjs/operators'\nimport { ConfirmationService } from 'src/app/common/services/confirmation.service'\nimport { environment } from 'src/environments/environment'\nimport { ListComponent } from '../../common/list.component'\nimport { CardOrder } from '../../common/models/accounting/card-order.model'\nimport { IntercomService } from '../../common/services/intercom.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { UserCardsService } from '../user-cards.service'\n\n@Component({\n    selector: 'user-card-orders',\n    templateUrl: 'user-card-orders.component.html',\n})\nexport class UserCardOrdersComponent extends ListComponent<CardOrder> {\n    public displayName = environment.displayName\n    public appColor = Color(getComputedStyle(document.body).getPropertyValue('--primary').trim()).lighten(0.1)\n    public faCreditCardFront = faCreditCardFront\n\n    public cardsCount$: Observable<string>\n    public cardOrdersCount$: Observable<string>\n\n    public faPaperPlane = faPaperPlane\n\n    protected defaultLimit = this.limitOpts[0]\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        userCardsService: UserCardsService,\n        confirmation: ConfirmationService,\n        public intercom: IntercomService,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n\n        this.cardsCount$ = userCardsService.cardsCount$\n        this.cardOrdersCount$ = userCardsService.cardOrdersCount$\n    }\n\n    public find(): Observable<HttpResponse<any[]>> {\n        return this.session.userStream.pipe(\n            delay(0),\n            take(1),\n            tap(user => {\n                this.apiUrl = `/users/${user!.id}/card-orders`\n            }),\n            flatMap(() => super.find())\n        )\n    }\n\n    protected async stateChange(): Promise<void> {\n        // do nothing\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { Component, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { TranslateService } from '@ngx-translate/core'\nimport { finalize, switchMap, take } from 'rxjs/operators'\nimport { SecurityCheckService } from 'src/app/common/security-check/security-check.service'\nimport { ICard } from '../../common/api-interfaces'\nimport { SessionService } from '../../common/services/session.service'\nimport { ToastrService } from '../../common/services/toastr.service'\n\n@Component({\n    selector: 'card-activation',\n    templateUrl: 'card-activation.component.html',\n})\nexport class CardActivationComponent {\n    @ViewChild('cardActivationForm')\n    public cardActivationForm: NgForm\n    public activation: { activationCode: string; last4Digits: string; pin: string } = {} as any\n    public repeatedPin: string\n    public isLoading = false\n\n    constructor(\n        private http: HttpClient,\n        private toastr: ToastrService,\n        private session: SessionService,\n        private router: Router,\n        private securityCheckService: SecurityCheckService,\n        public translate: TranslateService\n    ) {}\n\n    public submit(): void {\n        if (this.cardActivationForm.invalid) {\n            return\n        }\n        this.isLoading = true\n        this.securityCheckService.getScopePermission('banking').subscribe(() => {\n            this.session.userStream\n                .pipe(\n                    take(1),\n                    switchMap(user => this.http.post<ICard>(`/users/${user.id}/cards/activate`, this.activation)),\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(async () => {\n                    this.toastr.success(this.translate.instant('card-activation.card-activated'))\n                    await this.router.navigate(['/cards'])\n                })\n        })\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport { pick } from 'lodash'\nimport { forkJoin, Observable, Subject, Subscription } from 'rxjs'\nimport { finalize, map, switchMap, take } from 'rxjs/operators'\nimport { formatAddressToUSFormat } from 'src/app/common/common.mixin'\nimport { buildFileUrl } from 'src/app/common/file'\nimport { Currency } from 'src/app/common/models/accounting/currency.model'\nimport { CurrenciesQuery } from 'src/app/store/currencies/currencies.query'\nimport { environment } from 'src/environments/environment'\nimport {\n    CardType,\n    ICardOrder,\n    ICardProgram,\n    ICurrency,\n    IUser,\n    Transaction,\n    UserDetails,\n} from '../../common/api-interfaces'\nimport { openNoAccessModal } from '../../common/no-access-modal/no-access-modal.component'\nimport { SecurityCheckService } from '../../common/security-check/security-check.service'\nimport { SessionService, User } from '../../common/services/session.service'\nimport { CardOrderFeesComponent } from './card-order-fees/card-order-fees.component'\nimport { CardOrderTermsComponent } from './card-order-terms/card-order-terms.component'\n\n@Component({\n    selector: 'card-order',\n    templateUrl: 'card-order.component.html',\n})\nexport class CardOrderComponent implements OnInit, OnDestroy {\n    public appName = environment.appName\n    public item: Partial<ICardOrder> & { transaction: Transaction } = {\n        type: undefined,\n        transaction: {} as Transaction,\n        currency: {\n            code: 'USD',\n        } as ICurrency,\n        isExpressDelivery: false,\n    }\n\n    public user$: Observable<User>\n    public cardProgram: ICardProgram\n    public userDetails: UserDetails\n    public isLoading = false\n\n    public types: CardType[] = ['physical', 'virtual']\n    public displayName = environment.displayName\n    public digitalCardArtWorkUrl: string | null\n    public typeChanged$ = new Subject<void>()\n    public cardOrderCount = 0\n\n    @ViewChild('cardOrderForm')\n    public cardOrderForm: NgForm\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private http: HttpClient,\n        public session: SessionService,\n        public router: Router,\n        public translate: TranslateService,\n        private ngbModal: NgbModal,\n        private securityCheckService: SecurityCheckService,\n        private currenciesQuery: CurrenciesQuery\n    ) {}\n\n    public ngOnInit(): void {\n        this.isLoading = true\n        this.user$ = this.session.userStream\n        this.subscriptions.add(\n            this.typeChanged$\n                .pipe(\n                    switchMap(() => {\n                        const params = new HttpParams().set('status', 'ne:cancelled')\n                        if (this.item.type) {\n                            params.set('type', this.item.type)\n                        }\n                        return this.http.head(`/users/${this.item.user?.id}/card-orders`, {\n                            observe: 'response',\n                            params,\n                        })\n                    }),\n                    map(response =>\n                        response && response.headers.has('x-total-count') ? ~~response.headers.get('x-total-count')! : 0\n                    )\n                )\n                .subscribe(count => {\n                    this.cardOrderCount = count\n                })\n        )\n        this.session.userStream\n            .pipe(\n                take(1),\n                switchMap(user =>\n                    forkJoin([\n                        this.http.get<IUser>(`/users/${user.id}`),\n                        this.http.get<ICardProgram>(`/users/${user.id}/card-program`),\n                        this.http.get<UserDetails>(`/users/${user.id}/details`),\n                    ])\n                ),\n                finalize(() => {\n                    this.isLoading = false\n                })\n            )\n            .subscribe(([user, cardProgram, details]) => {\n                this.item.shippingAddress = formatAddressToUSFormat(details.address)\n                this.userDetails = details\n                this.item.user = pick(user, 'id') as any\n                this.item.transaction.currency = user.preferredCurrency\n                this.cardProgram = cardProgram\n                const virtualEnabled = this.cardProgram?.hasVirtualEnabled\n                const physicalEnabled = this.cardProgram?.hasPhysicalEnabled\n                this.types = []\n                if (physicalEnabled) {\n                    this.types.push('physical')\n                }\n                if (virtualEnabled) {\n                    this.types.push('virtual')\n                }\n                this.item.type = physicalEnabled ? 'physical' : virtualEnabled ? 'virtual' : undefined\n                this.assignFee()\n                this.typeChanged$.next()\n                if (this.cardProgram.digitalCardArtwork) {\n                    this.digitalCardArtWorkUrl = buildFileUrl(this.cardProgram.digitalCardArtwork)\n                }\n            })\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (!this.cardOrderForm.valid) {\n            return\n        }\n        if (this.session.user.accessErrors.length > 0) {\n            openNoAccessModal(this.ngbModal, this.session.user.accessErrors[0])\n            return\n        }\n\n        this.subscriptions.add(\n            this.securityCheckService.getScopePermission('banking').subscribe(() => {\n                this.ngbModal\n                    .open(CardOrderTermsComponent, {\n                        windowClass: 'modal-primary',\n                        backdrop: 'static',\n                    })\n                    .result.then(\n                        terms => {\n                            this.isLoading = true\n                            this.http\n                                .post<ICardOrder>('/card-orders', {\n                                    ...this.item,\n                                    transaction: pick(this.item.transaction, ['currency']),\n                                    terms: pick(terms, ['accept', 'versionId', 'name']),\n                                })\n                                .pipe(\n                                    finalize(() => {\n                                        this.isLoading = false\n                                    })\n                                )\n                                .subscribe(async () => {\n                                    await this.router.navigate(['/cards/orders'])\n                                })\n                        },\n                        () => undefined\n                    )\n            })\n        )\n    }\n\n    public openFeesModal() {\n        this.ngbModal.open(CardOrderFeesComponent, {\n            windowClass: 'modal-primary',\n            backdrop: 'static',\n        })\n    }\n\n    public assignFee(): void {\n        if (!this.cardProgram || !this.item.transaction.currency) {\n            return\n        }\n        this.subscriptions.add(\n            forkJoin([\n                this.currenciesQuery.selectEntity('USD').pipe(take(1)),\n                this.currenciesQuery.selectEntity(this.item.transaction.currency.code).pipe(take(1)),\n            ]).subscribe(([usd, transactionCurrency]) => {\n                if (!usd || !transactionCurrency) {\n                    return\n                }\n                const { pricePhysical, priceVirtual } = this.cardProgram\n                this.item.transaction.fixedFee = Currency.convert(\n                    this.item.type === 'physical' ? pricePhysical || '0' : priceVirtual || '0',\n                    usd,\n                    transactionCurrency\n                )\n            })\n        )\n    }\n\n    public isFree(): boolean {\n        return !!this.item.transaction.fixedFee && new BigNumber(this.item.transaction.fixedFee).isEqualTo(0)\n    }\n\n    public isDisallowMultiple(): boolean {\n        if (this.item.type === 'physical') {\n            return !this.cardProgram.allowMultiplePhysical && this.cardOrderCount >= 1\n        }\n        if (this.item.type === 'virtual') {\n            return !this.cardProgram.allowMultipleVirtual && this.cardOrderCount >= 1\n        }\n        return false\n    }\n\n    public isCardOrderDisabled(): boolean {\n        return !this.cardProgram || (!this.cardProgram?.hasVirtualEnabled && !this.cardProgram?.hasPhysicalEnabled)\n    }\n}\n","export default \"<div class=\\\"container pt-page pb-3\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.cards' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item\\\" [ngClass]=\\\"{ active: !router.isActive('/cards/orders', false) }\\\">\\n                    <a [routerLink]=\\\"router.isActive('/cards/orders', false) ? ['/cards'] : []\\\">{{ 'common.cards' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\" *ngIf=\\\"router.isActive('/cards/orders', false)\\\">{{ 'common.orders' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n    <div class=\\\"row justify-content-between align-items-center\\\">\\n        <div class=\\\"col-lg col-md-12\\\">\\n            <ul class=\\\"nav nav-tabs nav-tabs-lg\\\">\\n                <li class=\\\"nav-item\\\">\\n                    <a href class=\\\"nav-link\\\" [ngClass]=\\\"{ active: router.isActive('/cards', true) }\\\" [routerLink]=\\\"['/cards']\\\">\\n                        {{ 'common.manage-cards' | translate }} ({{ (cardsCount$ | async) || 0 }})\\n                    </a>\\n                </li>\\n                <li class=\\\"nav-item\\\">\\n                    <a href class=\\\"nav-link\\\" [ngClass]=\\\"{ active: router.isActive('/cards/orders', true) }\\\" [routerLink]=\\\"['/cards/orders']\\\">\\n                        {{ 'common.manage-orders' | translate }} ({{ (cardOrdersCount$ | async) || 0 }})\\n                    </a>\\n                </li>\\n            </ul>\\n        </div>\\n        <div class=\\\"col-auto pt-3 pt-md-0\\\">\\n            <button class=\\\"btn btn-success-air mr-2\\\" [routerLink]=\\\"['/cards/activate']\\\">{{ 'common.activate-card' | translate }}</button>\\n            <button class=\\\"btn btn-primary-air\\\" [routerLink]=\\\"['/cards/order']\\\">\\n                <fa-icon class=\\\"mr-1\\\" [icon]=\\\"faPlus\\\"></fa-icon> {{ 'common.new-card' | translate }}\\n            </button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"container\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header b-b-0\\\">{{ 'common.orders' | translate }}</div>\\n        <div class=\\\"table-responsive\\\">\\n            <table class=\\\"table table-hover table-card\\\">\\n                <thead class=\\\"thead-light\\\">\\n                    <tr>\\n                        <th scope=\\\"col\\\">#</th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.type' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['type']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['type'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['type']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.status' | translate }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['status']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['status'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['status']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\">{{ 'common.shipping-address' | translate }}</th>\\n                        <th scope=\\\"col\\\">{{ 'common.tracking-code' | translate }}</th>\\n                        <th scope=\\\"col\\\">\\n                            {{ 'common.created-at' | translate | titlecase }}\\n                            <fa-icon\\n                                class=\\\"sort-toggle\\\"\\n                                [icon]=\\\"getSortingDirection(['createdAt']) === 'DESC' ? faChevronUp : faChevronDown\\\"\\n                                (click)=\\\"sort(['createdAt'], $event.ctrlKey || $event.metaKey)\\\"\\n                                [ngClass]=\\\"{ active: isActiveSorting(['createdAt']) }\\\"\\n                            ></fa-icon>\\n                        </th>\\n                        <th scope=\\\"col\\\"></th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                        <ng-container *ngIf=\\\"items.length === 0; else rows\\\">\\n                            <tr>\\n                                <td class=\\\"bg-white\\\" colspan=\\\"12\\\">\\n                                    <div class=\\\"mx-auto p-3 mt-2 mb-4 text-center max-width-sm\\\">\\n                                        <img src=\\\"/img/icons/delivery.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                                        <h4 class=\\\"mb-1\\\">{{ 'common.order-your-card' | translate }}</h4>\\n                                        <p class=\\\"mb-3 text-gray\\\">\\n                                            {{ 'common.get-your-multi-currency-card-now' | translate: { value: displayName } }}\\n                                        </p>\\n                                        <button type=\\\"button\\\" class=\\\"btn btn-primary-air btn-lg btn-block\\\" [routerLink]=\\\"['/cards/order']\\\">\\n                                            {{ 'common.apply-now' | translate }}\\n                                        </button>\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-template #rows>\\n                            <tr *ngFor=\\\"let order of items\\\" class=\\\"bg-white\\\">\\n                                <th scope=\\\"row\\\">\\n                                    <div class=\\\"d-flex align-items-center\\\">\\n                                        <!-- htmllint attr-bans=\\\"[]\\\" -->\\n                                        <div class=\\\"avatar avatar-sm mr-3\\\">\\n                                            <svg\\n                                                class=\\\"img-avatar\\\"\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n                                                xml:space=\\\"preserve\\\"\\n                                                text-rendering=\\\"geometricPrecision\\\"\\n                                                style=\\\"\\n                                                    shape-rendering: geometricPrecision;\\n                                                    image-rendering: optimizeQuality;\\n                                                    fill-rule: evenodd;\\n                                                    clip-rule: evenodd;\\n                                                \\\"\\n                                                viewBox=\\\"0 0 120 120\\\"\\n                                            >\\n                                                <g>\\n                                                    <rect [style.fill]=\\\"appColor\\\" width=\\\"120\\\" height=\\\"120\\\"></rect>\\n                                                    <text\\n                                                        font-weight=\\\"500\\\"\\n                                                        font-size=\\\"3.25em\\\"\\n                                                        font-family=\\\"sans-serif\\\"\\n                                                        fill=\\\"#ffffff\\\"\\n                                                        x=\\\"50%\\\"\\n                                                        y=\\\"50%\\\"\\n                                                        text-anchor=\\\"middle\\\"\\n                                                        dy=\\\"0.35em\\\"\\n                                                    >\\n                                                        {{ order.type[0] | uppercase }}\\n                                                    </text>\\n                                                </g>\\n                                            </svg>\\n                                        </div>\\n                                        <!-- htmllint attr-bans=\\\"$previous\\\" -->\\n                                        <div>\\n                                            <div [ngbTooltip]=\\\"tipContent\\\" placement=\\\"right\\\">{{ 'common.multi-currency-card' | translate }}</div>\\n                                            <uuid [value]=\\\"order.id\\\"></uuid>\\n                                            <ng-template #tipContent>\\n                                                {{ 'common.paid' | translate }}:\\n                                                <ng-container *ngIf=\\\"order.transaction; else free\\\">\\n                                                    {{ order.transaction?.fixedFee | amount: order.transaction?.currency.decimalPlaces }}\\n                                                    {{ order.transaction?.currency.code }}\\n                                                </ng-container>\\n                                                <ng-template #free> 0.00 USD </ng-template>\\n                                            </ng-template>\\n                                        </div>\\n                                    </div>\\n                                </th>\\n                                <td>\\n                                    <span\\n                                        class=\\\"text-capitalize label\\\"\\n                                        [ngClass]=\\\"{ 'label-success': order.type === 'physical', 'label-info': order.type === 'virtual' }\\\"\\n                                        >{{ order.type }}</span\\n                                    >\\n                                </td>\\n                                <td>\\n                                    <ul class=\\\"step d-flex flex-nowrap\\\">\\n                                        <li\\n                                            class=\\\"step-item\\\"\\n                                            [ngClass]=\\\"{\\n                                                active: ['pending', 'unconfirmed', 'action-required'].includes(order.status),\\n                                                failed: order.status === 'cancelled'\\n                                            }\\\"\\n                                        >\\n                                            <a class=\\\"small\\\">{{\\n                                                (order.status === 'cancelled' ? 'common.cancelled' : 'common.requested') | translate\\n                                            }}</a>\\n                                        </li>\\n                                        <li class=\\\"step-item\\\" [ngClass]=\\\"{ active: order.status === 'processing' }\\\">\\n                                            <a class=\\\"small\\\">{{ 'common.approved' | translate }}</a>\\n                                        </li>\\n                                        <li\\n                                            class=\\\"step-item\\\"\\n                                            *ngIf=\\\"order.type === 'physical'\\\"\\n                                            [ngClass]=\\\"{ active: order.status === 'completed' && order.card?.status !== 'active' }\\\"\\n                                        >\\n                                            <a class=\\\"small\\\">{{ 'common.shipped' | translate }}</a>\\n                                        </li>\\n                                        <li class=\\\"step-item\\\" [ngClass]=\\\"{ active: order.card?.status === 'active' }\\\">\\n                                            <a class=\\\"small\\\">{{ 'common.activated' | translate }}</a>\\n                                        </li>\\n                                    </ul>\\n                                </td>\\n                                <td>\\n                                    <ng-container *ngIf=\\\"order.type === 'physical'\\\">\\n                                        <div *ngIf=\\\"order.isExpressDelivery\\\" class=\\\"badge badge-success badge-lg mb-1\\\">\\n                                            <fa-icon [icon]=\\\"faPaperPlane\\\"></fa-icon> Express\\n                                        </div>\\n                                        <address class=\\\"address-input whitespace-pre\\\">{{ order.shippingAddress }}</address>\\n                                    </ng-container>\\n                                </td>\\n                                <td>\\n                                    <ng-container *ngIf=\\\"order.type === 'physical'; else na\\\">\\n                                        <a\\n                                            href=\\\"{{\\n                                                order.isExpressDelivery\\n                                                    ? 'https://mydhl.express.dhl/sg/en/tracking.html#/track-by-number'\\n                                                    : 'https://www.singpost.com/track-items'\\n                                            }}\\\"\\n                                            target=\\\"_blank\\\"\\n                                            rel=\\\"noopener\\\"\\n                                        >\\n                                            {{ order.trackingCode }}\\n                                        </a>\\n                                    </ng-container>\\n                                    <ng-template #na>\\n                                        <span class=\\\"text-muted\\\">N/A</span>\\n                                    </ng-template>\\n                                </td>\\n                                <td>{{ order.createdAt | date: 'medium' }}</td>\\n                                <td class=\\\"action pr-4 text-right\\\">\\n                                    <button\\n                                        type=\\\"button\\\"\\n                                        class=\\\"btn btn-sm btn-danger\\\"\\n                                        *ngIf=\\\"['pending', 'action-required'].includes(order.status)\\\"\\n                                        (click)=\\\"\\n                                            intercom.startConversation(\\n                                                'Hi, I would like to cancel my card order ' + order.id.substring(0, 7) + '. Kindly assist.'\\n                                            )\\n                                        \\\"\\n                                    >\\n                                        {{ 'common.cancel' | translate }}\\n                                    </button>\\n                                </td>\\n                            </tr>\\n                            <tr *ngFor=\\\"let empty of fill\\\" class=\\\"fill\\\">\\n                                <td colspan=\\\"12\\\">\\n                                    <div>&nbsp;</div>\\n                                    <span>&nbsp;</span>\\n                                </td>\\n                            </tr>\\n                        </ng-template>\\n                    </ng-container>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n    <footer class=\\\"table-footer mb-3\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-6 col-md-8\\\">\\n                <ng-select\\n                    [(ngModel)]=\\\"limit\\\"\\n                    dropdownPosition=\\\"auto\\\"\\n                    (change)=\\\"select(1)\\\"\\n                    [items]=\\\"limitOpts\\\"\\n                    [placeholder]=\\\"'common.show-entries-per-page' | translate\\\"\\n                    [clearable]=\\\"false\\\"\\n                    [searchable]=\\\"false\\\"\\n                    required\\n                >\\n                    <ng-template ng-label-tmp let-item=\\\"item\\\">{{ 'common.show-entries' | translate: { value: item } }}</ng-template>\\n                    <ng-template ng-option-tmp let-item=\\\"item\\\">{{ item }} {{ 'common.entries' | translate }}</ng-template>\\n                </ng-select>\\n            </div>\\n            <div class=\\\"col-lg-18 col-md-16 d-flex justify-content-center justify-content-md-end mt-3 mt-md-0\\\">\\n                <ngb-pagination\\n                    [(page)]=\\\"page\\\"\\n                    [collectionSize]=\\\"count\\\"\\n                    (pageChange)=\\\"select()\\\"\\n                    [pageSize]=\\\"limit\\\"\\n                    [maxSize]=\\\"4\\\"\\n                    [rotate]=\\\"false\\\"\\n                    [boundaryLinks]=\\\"true\\\"\\n                >\\n                </ngb-pagination>\\n            </div>\\n        </div>\\n    </footer>\\n</div>\\n\";","import { HttpClient, HttpResponse } from '@angular/common/http'\nimport { ChangeDetectorRef, Component } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { ModalController } from '@ionic/angular'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport * as Color from 'color'\nimport { Observable } from 'rxjs'\nimport { flatMap, take, tap } from 'rxjs/operators'\nimport { environment } from 'src/environments/environment'\nimport { ICard } from '../common/api-interfaces'\nimport { CardViewPage } from '../common/card-view/card-view.page'\nimport { ListComponent } from '../common/list.component'\nimport { ConfirmationService } from '../common/services/confirmation.service'\nimport { SessionService } from '../common/services/session.service'\nimport { UserCardsService } from './user-cards.service'\n\n@Component({\n    selector: 'user-cards',\n    templateUrl: 'user-cards.component.html',\n})\nexport class UserCardsComponent extends ListComponent<ICard> {\n    public displayName = environment.displayName\n    public appColor = Color(getComputedStyle(document.body).getPropertyValue('--primary').trim()).lighten(0.1)\n\n    public cardsCount$: Observable<string>\n    public cardOrdersCount$: Observable<string>\n\n    protected defaultLimit = this.limitOpts[0]\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        userCardsService: UserCardsService,\n        confirmation: ConfirmationService,\n        private modalController: ModalController,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session, confirmation)\n\n        this.cardsCount$ = userCardsService.cardsCount$\n        this.cardOrdersCount$ = userCardsService.cardOrdersCount$\n    }\n\n    public find(): Observable<HttpResponse<any[]>> {\n        return this.session.userStream.pipe(\n            take(1),\n            tap(user => {\n                this.apiUrl = `/users/${user.id}/cards`\n            }),\n            flatMap(() => super.find())\n        )\n    }\n\n    public async showCard(card: ICard): Promise<void> {\n        const modal = await this.modalController.create({\n            component: CardViewPage,\n            componentProps: {\n                item: card,\n            },\n        })\n        return await modal.present()\n    }\n\n    public formatPan(pan: string): string {\n        return `${pan.slice(0, 4)} ${pan.slice(4, 8)} ${pan.slice(8, 12)} ${pan.slice(12)}`\n    }\n}\n","import { Component } from '@angular/core'\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'\n\n@Component({\n    selector: 'card-order-fees',\n    templateUrl: 'card-order-fees.component.html',\n})\nexport class CardOrderFeesComponent {\n    constructor(public modal: NgbActiveModal) {}\n}\n","export default \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">{{ 'common.card' | translate }} - {{ 'common.fee-schedule' | translate | titlecase }}</h5>\\n    <button type=\\\"button\\\" class=\\\"btn btn-round close close-modal\\\" (click)=\\\"modal.dismiss()\\\">&times;</button>\\n</div>\\n<div class=\\\"modal-body card-terms-container text-body\\\">\\n    <card-fee-schedule></card-fee-schedule>\\n</div>\\n<div class=\\\"modal-footer flex-column flex-md-row justify-content-center justify-content-md-end\\\">\\n    <div class=\\\"d-flex justify-content-end\\\">\\n        <button class=\\\"btn btn-default btn-w-sm\\\" (click)=\\\"modal.dismiss()\\\">{{ 'common.close' | translate }}</button>\\n    </div>\\n</div>\\n\";","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { PermissionGuard } from '../common/guards/permission.guard'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { CardActivationComponent } from './card-activation/card-activation.component'\nimport { CardOrderComponent } from './card-order/card-order.component'\nimport { UserCardOrdersComponent } from './user-card-orders/user-card-orders.component'\nimport { UserCardsComponent } from './user-cards.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        canActivate: [LoggedInAuthGuard, PermissionGuard],\n        data: {\n            permissions: ['cards'],\n        },\n        children: [\n            {\n                path: '',\n                component: UserCardsComponent,\n            },\n            {\n                path: 'orders',\n                component: UserCardOrdersComponent,\n            },\n            {\n                path: 'order',\n                component: CardOrderComponent,\n            },\n            {\n                path: 'activate',\n                component: CardActivationComponent,\n            },\n        ],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class UserCardsRoutingModule {}\n"],"sourceRoot":"webpack:///"}