{"version":3,"sources":["./src/app/account/account-security/two-factor/two-factor.component.html","./src/app/account/profile/email-form/email-form.component.html","./src/app/common/logged-in.auth-guard.ts","./src/app/account/account-security/change-password-form/change-password-form.component.ts","./src/app/account/account-security/account-security.component.ts","./src/app/account/profile/profile.component.html","./src/app/account/account-security/api-tokens/api-tokens.component.html","./src/app/account/account-security/change-password-form/change-password-form.component.html","./src/app/account/account-security/logout-all/logout-all.component.html","./src/app/account/account-security/two-factor/two-factor.component.ts","./src/app/account/account-billing/account-billing.resolver.ts","./src/app/account/account-security/api-tokens/api-tokens.component.ts","./src/app/account/account-billing/account-billing.component.html","./src/app/account/account.component.ts","./src/app/common/security-check/security-check.service.ts","./src/app/account/profile/profile.component.ts","./src/app/account/account.module.ts","./src/app/account/account-security/logout-all/logout-all.component.ts","./src/app/account/account-security/account-security.component.html","./src/app/account/account-routing.module.ts","./src/app/common/services/account-billing.service.ts","./src/app/account/account-billing/account-billing.component.ts","./src/app/account/profile/email-form/email-form.component.ts"],"names":[],"mappings":"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","file":"account-account-module.js","sourcesContent":["export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div *ngIf=\\\"user.twoFactor\\\">\\n        <div class=\\\"circle-loader load-complete\\\">\\n            <div class=\\\"checkmark draw\\\"></div>\\n        </div>\\n        <h3 class=\\\"text-center\\\">{{ 'two-factor.two-factor-authentication-has-been-enabled' | translate }}</h3>\\n    </div>\\n    <div *ngIf=\\\"!user.twoFactor && !twoFactor\\\">\\n        <button\\n            type=\\\"button\\\"\\n            class=\\\"btn btn-primary btn-w-sm e2e-generate-2fa-secret\\\"\\n            (click)=\\\"generate2FASecret()\\\"\\n            [ngClass]=\\\"{ loading: isLoading }\\\"\\n            [disabled]=\\\"isLoading\\\"\\n        >\\n            {{ 'common.enable-2fa' | translate }}\\n        </button>\\n    </div>\\n    <form\\n        name=\\\"twoFactor\\\"\\n        #verificationForm=\\\"ngForm\\\"\\n        class=\\\"form-validation\\\"\\n        (ngSubmit)=\\\"toggleTwoFactorAuth(!user.twoFactor)\\\"\\n        autocomplete=\\\"false\\\"\\n        novalidate\\n        *ngIf=\\\"(!user.twoFactor && !!twoFactor) || user.twoFactor\\\"\\n    >\\n        <div *ngIf=\\\"!user.twoFactor\\\">\\n            <img [src]=\\\"twoFactor!.qrCode\\\" class=\\\"mx-auto d-block img-thumbnail p-0 mb-2 e2e-2fa-qr\\\" />\\n            <p class=\\\"text-center e2e-2fa-secret\\\">\\n                {{ 'common.or-enter-this-code' | translate }} <b class=\\\"text-info\\\">{{ twoFactor!.secret }}</b>\\n            </p>\\n            <div class=\\\"alert alert-info\\\">\\n                {{ 'common.scan-this-code-with-your-auth-app' | translate }}\\n            </div>\\n        </div>\\n        <div *ngIf=\\\"user.twoFactor\\\" class=\\\"callout callout-info bg-white\\\">\\n            {{ 'two-factor.to-disable-two-factor-authentication' | translate }}\\n        </div>\\n        <div class=\\\"form-group\\\" *ngIf=\\\"!user.twoFactor\\\">\\n            <label for=\\\"verificationCode\\\">{{ 'common.verification-code' | translate }}</label>\\n            <input type=\\\"type\\\" id=\\\"verificationCode\\\" name=\\\"verificationCode\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"verificationCode\\\" number />\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-w-sm\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n            <span>{{ (user.twoFactor ? 'common.disable-2fa' : 'common.verify-code') | translate }}</span>\\n        </button>\\n    </form>\\n</ng-container>\\n\";","export default \"<form\\n    #emailForm=\\\"ngForm\\\"\\n    class=\\\"form-validation e2e-email-form\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': emailForm.submitted }\\\"\\n    (ngSubmit)=\\\"submit()\\\"\\n    autocomplete=\\\"false\\\"\\n    novalidate\\n>\\n    <div class=\\\"alert alert-{{ alert.severity || 'danger' }} alert-dismissible\\\" role=\\\"alert\\\" *ngFor=\\\"let alert of alertService.alerts\\\">\\n        <button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"alertService.remove(alert)\\\">\\n            <span>&times;</span>\\n        </button>\\n        {{ alert.message }}\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">{{ 'common.email' | translate }}</label>\\n        <input\\n            type=\\\"email\\\"\\n            id=\\\"email\\\"\\n            name=\\\"email\\\"\\n            class=\\\"form-control\\\"\\n            [placeholder]=\\\"'common.enter-email' | translate\\\"\\n            [(ngModel)]=\\\"email\\\"\\n            #emailInput=\\\"ngModel\\\"\\n            email\\n            required\\n        />\\n        <div *ngIf=\\\"emailInput.invalid && (emailForm.submitted || emailInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"emailInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"emailInput?.errors?.email\\\">{{ 'common.not-a-valid-email-address' | translate }}</div>\\n        </div>\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-w-sm\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n        {{ 'common.change-email' | translate }}\\n    </button>\\n</form>\\n\";","import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router'\nimport { SessionService } from './services/session.service'\n\n@Injectable({ providedIn: 'root' })\nexport class LoggedInAuthGuard implements CanActivate {\n    constructor(private session: SessionService, private router: Router) {}\n    public canActivate(_: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree {\n        if (!this.session.isAuthenticated()) {\n            return this.router.parseUrl('/login?redirect=' + state.url)\n        }\n        return true\n    }\n}\n","import { Component, OnDestroy, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\nimport { finalize, flatMap, tap } from 'rxjs/operators'\nimport { SecurityCheckService } from '../../../common/security-check/security-check.service'\nimport { AlertService } from '../../../common/services/alert.service'\nimport { UserService } from '../../../common/services/core/user.service'\nimport { LogoutService } from '../../../common/services/logout.service'\nimport { SessionService } from '../../../common/services/session.service'\n\n@Component({\n    selector: 'change-password-form',\n    templateUrl: 'change-password-form.component.html',\n})\nexport class ChangePasswordFormComponent implements OnDestroy {\n    @ViewChild('changePasswordForm')\n    public changePasswordForm: NgForm\n    public password: string\n    public repeatedPassword: string\n    public isLoading = false\n\n    public requiredPasswordStrength = 60\n    public passwordStrength = 0\n\n    private subcriptions = new Subscription()\n\n    constructor(\n        public session: SessionService,\n        private securityCheckService: SecurityCheckService,\n        private userService: UserService,\n        private alert: AlertService,\n        private logoutService: LogoutService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnDestroy(): void {\n        this.subcriptions.unsubscribe()\n    }\n\n    public submitSecurityForm(): void {\n        if (!this.changePasswordForm.valid) {\n            return\n        }\n\n        this.subcriptions.add(\n            this.securityCheckService\n                .getScopePermission('securitySettings')\n                .pipe(\n                    flatMap(() => {\n                        this.isLoading = true\n                        return this.userService.changePassword(this.session.user.id, this.password)\n                    }),\n                    finalize(() => {\n                        this.isLoading = false\n                    }),\n                    tap(() => {\n                        // the refreshtoken is invalidated on password change\n                        this.session.refreshToken = undefined\n                        this.alert.add({\n                            message: this.translate.instant('common.your-password-has-been-successfully-changed'),\n                            severity: 'success',\n                        })\n                    }),\n                    flatMap(() => this.logoutService.logout())\n                )\n                .subscribe()\n        )\n    }\n}\n","import { Component } from '@angular/core'\nimport { faLockAlt, faMobile, faShieldAlt, faUsers, faKey } from '@fortawesome/pro-light-svg-icons'\nimport { SessionService } from '../../common/services/session.service'\n\n@Component({\n    selector: 'account-security',\n    templateUrl: 'account-security.component.html',\n})\nexport class AccountSecurityComponent {\n    public faLockAlt = faLockAlt\n    public faShieldAlt = faShieldAlt\n    public faMobile = faMobile\n    public faUsers = faUsers\n    public faKey = faKey\n    constructor(public session: SessionService) {}\n}\n","export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-3\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.profile' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.profile' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"container pb-4\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"headline\\\">{{ 'common.email-address' | translate }}</div>\\n            <div class=\\\"row e2e-email-section\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faEnvelope\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'common.change-email' | translate }}</h6>\\n                            <p>{{ 'profile.you-have-to-confirm-your-new-email-address' | translate }}</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <email-form *ngIf=\\\"user\\\" [user]=\\\"user\\\"></email-form>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"headline\\\">{{ 'common.preferred-currency' | translate }}</div>\\n            <div class=\\\"row e2e-currency-section\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faCoin\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <p>{{ 'profile.preselect-your-balance' | translate }}</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"currency\\\">{{ 'common.preferred-currency' | translate }}</label>\\n                            <ng-select\\n                                [items]=\\\"currencies$ | async\\\"\\n                                [placeholder]=\\\"'common.select-currency' | translate\\\"\\n                                name=\\\"currency\\\"\\n                                id=\\\"currency\\\"\\n                                [clearable]=\\\"false\\\"\\n                                [ngModel]=\\\"preferredCurrency$ | async\\\"\\n                                (ngModelChange)=\\\"changePreferredCurrency($event)\\\"\\n                                required\\n                            >\\n                                <ng-template ng-label-tmp let-item=\\\"item\\\"> {{ item.code }} - {{ item.name }} </ng-template>\\n                                <ng-template ng-option-tmp let-item=\\\"item\\\"> {{ item.code }} - {{ item.name }} </ng-template>\\n                            </ng-select>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"headline\\\">{{ 'common.information' | translate }}</div>\\n            <div class=\\\"row e2e-information-section\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faUserCheck\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'profile.update-details' | translate }}</h6>\\n                            <p>{{ 'profile.to-update-any-of-your-account-details' | translate }}</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\" *ngIf=\\\"user\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"name\\\">{{ 'common.name' | translate }}</label>\\n                            <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" class=\\\"form-control\\\" [value]=\\\"user.name\\\" disabled />\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"phoneNumber\\\">{{ 'common.phone-number' | translate }}</label>\\n                            <input\\n                                type=\\\"text\\\"\\n                                id=\\\"phoneNumber\\\"\\n                                name=\\\"phoneNumber\\\"\\n                                class=\\\"form-control\\\"\\n                                [value]=\\\"user.phoneNumber ? toCountryCallingCode(user.phoneCountryCode!) + ' ' + user.phoneNumber : '-'\\\"\\n                                disabled\\n                            />\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                            <label>{{ 'common.address' | translate }}</label>\\n                            <postal-address [address]=\\\"user.address\\\" theme=\\\"input\\\"></postal-address>\\n                        </div>\\n                        <button\\n                            type=\\\"button\\\"\\n                            class=\\\"btn btn-primary\\\"\\n                            (click)=\\\"\\n                                user.approvedAt\\n                                    ? intercom.startConversation(translate.instant('common.update-my-personal-profile-details'))\\n                                    : goToVerification()\\n                            \\\"\\n                        >\\n                            {{ 'profile.update-details' | translate }}\\n                        </button>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"headline\\\">{{ 'common.avatar' | translate }}</div>\\n            <div class=\\\"row e2e-avatar-section\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faImage\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'profile.upload-avatar' | translate }}</h6>\\n                            <p>\\n                                {{ 'common.when-not-providing-an-avatar' | translate }}\\n                            </p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <user-avatar [user]=\\\"user\\\" size=\\\"xl\\\" elementClass=\\\"d-block mb-2\\\"></user-avatar>\\n                        <button\\n                            type=\\\"button\\\"\\n                            class=\\\"btn btn-primary mr-1 e2e-upload-avatar\\\"\\n                            ngfSelect\\n                            (fileChange)=\\\"!avatarUploading && uploadAvatar($event)\\\"\\n                            [fileDropDisabled]=\\\"!user?.id\\\"\\n                            [disabled]=\\\"avatarUploading\\\"\\n                            [ngClass]=\\\"{ loading: avatarUploading }\\\"\\n                        >\\n                            {{ 'profile.choose-file' | translate }}\\n                        </button>\\n                        <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"deleteAvatar()\\\" [disabled]=\\\"avatarUploading\\\" *ngIf=\\\"!!user?.avatar?.id\\\">\\n                            {{ 'profile.remove-avatar' | translate }}\\n                        </button>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"headline\\\">{{ 'common.notifications' | translate }}</div>\\n            <div class=\\\"row e2e-notifications-section\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faEnvelope\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'profile.receive-notifications' | translate }}</h6>\\n                            <p>\\n                                {{ 'common.receive-email-notifications-on-various-activities' | translate }}\\n                            </p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <div *ngIf=\\\"user\\\" class=\\\"custom-controls-stacked\\\">\\n                            <label class=\\\"custom-control custom-checkbox\\\">\\n                                <input\\n                                    type=\\\"checkbox\\\"\\n                                    class=\\\"custom-control-input\\\"\\n                                    name=\\\"sendEmailNotifications\\\"\\n                                    [(ngModel)]=\\\"user.sendEmailNotifications\\\"\\n                                    (ngModelChange)=\\\"updateEmailNotifications()\\\"\\n                                    [disabled]=\\\"isEmailNotificationsUpdating\\\"\\n                                />\\n                                <span class=\\\"custom-control-label font-md\\\"> {{ 'common.receive-email-notifications' | translate }} </span>\\n                            </label>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <ng-container>\\n                <div class=\\\"headline\\\">{{ 'profile.close-account' | translate }}</div>\\n                <div class=\\\"row e2e-close-account-section\\\">\\n                    <div class=\\\"col-lg-9\\\">\\n                        <div class=\\\"media media-info pr-2\\\">\\n                            <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faExclamationTriangle\\\"></fa-icon>\\n                            <div class=\\\"media-body pt-0\\\">\\n                                <h6 class=\\\"mt-0\\\">{{ 'common.important-notice' | translate }}</h6>\\n                                <p>{{ 'common.write-us-a-message-if-you-wish' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-15\\\">\\n                        <div class=\\\"form-block max-width-md\\\">\\n                            <button\\n                                type=\\\"button\\\"\\n                                class=\\\"btn btn-danger\\\"\\n                                (click)=\\\"intercom.startConversation(translate.instant('common.i-would-like-to-close-my-account'))\\\"\\n                            >\\n                                {{ 'profile.request-account-closing' | translate }}\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </ng-container>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \"<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <ng-container *ngIf=\\\"user.twoFactor; else noAccess\\\">\\n        <div class=\\\"d-flex justify-content-end mb-3\\\">\\n            <ngb-pagination\\n                [(page)]=\\\"page\\\"\\n                [collectionSize]=\\\"count\\\"\\n                (pageChange)=\\\"select()\\\"\\n                [pageSize]=\\\"limit\\\"\\n                [maxSize]=\\\"5\\\"\\n                [ellipses]=\\\"false\\\"\\n                [rotate]=\\\"true\\\"\\n                [boundaryLinks]=\\\"true\\\"\\n            >\\n            </ngb-pagination>\\n        </div>\\n        <div class=\\\"table-responsive\\\">\\n            <table class=\\\"table table-hover table-bordered table-data\\\">\\n                <thead class=\\\"thead-light\\\">\\n                    <tr>\\n                        <th scope=\\\"col\\\">{{ 'common.public-key' | translate }}</th>\\n                        <th scope=\\\"col\\\">{{ 'common.created-at' | translate | titlecase }}</th>\\n                        <th scope=\\\"col\\\"></th>\\n                    </tr>\\n                </thead>\\n                <tbody class=\\\"bg-white\\\">\\n                    <ng-container *ngIf=\\\"itemsStream | async; let items\\\">\\n                        <tr *ngFor=\\\"let apiToken of items\\\">\\n                            <th scope=\\\"row\\\">\\n                                {{ apiToken.publicKey }}\\n                            </th>\\n                            <td scope=\\\"row\\\">{{ apiToken.createdAt | date: 'medium' }}</td>\\n                            <td class=\\\"action\\\">\\n                                <a href class=\\\"btn btn-danger-air btn-sm\\\" (click)=\\\"revoke(apiToken); $event.preventDefault()\\\">{{\\n                                    'common.revoke' | translate\\n                                }}</a>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"items.length === 0\\\">\\n                            <td colspan=\\\"3\\\" class=\\\"text-center\\\">{{ 'common.no-entries-found' | translate }}</td>\\n                        </tr>\\n                    </ng-container>\\n                </tbody>\\n            </table>\\n        </div>\\n        <button class=\\\"btn btn-primary\\\" [ngClass]=\\\"{ loading: isLoading }\\\" (click)=\\\"generate()\\\">{{ 'common.generate' | translate }}</button>\\n    </ng-container>\\n</ng-container>\\n<ng-template #noAccess>\\n    <div class=\\\"text-center\\\">\\n        <h4 class=\\\"m-0\\\">{{ 'common.you-dont-have-access-to-this-feature' | translate }}</h4>\\n        <img src=\\\"/img/icons/lock.svg\\\" class=\\\"img-sm my-3\\\" />\\n        <p class=\\\"text-body\\\">{{ 'common.please-enable-2fa-to-access-this-feature' | translate }}</p>\\n    </div>\\n</ng-template>\\n\";","export default \"<form\\n    #changePasswordForm=\\\"ngForm\\\"\\n    class=\\\"form-validation\\\"\\n    [ngClass]=\\\"{ 'ng-submitted': changePasswordForm.submitted }\\\"\\n    (ngSubmit)=\\\"submitSecurityForm()\\\"\\n    novalidate\\n>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">{{ 'change-password-form.new-password' | translate }}</label>\\n        <input\\n            type=\\\"password\\\"\\n            id=\\\"password\\\"\\n            name=\\\"password\\\"\\n            class=\\\"form-control\\\"\\n            [(ngModel)]=\\\"password\\\"\\n            #passwordInput=\\\"ngModel\\\"\\n            [passwordStrength]=\\\"requiredPasswordStrength\\\"\\n            (onEntropyChange)=\\\"passwordStrength = $event\\\"\\n            autocomplete=\\\"off\\\"\\n            required\\n        />\\n        <div class=\\\"mt-2\\\">\\n            <password-strength-bar [requiredStrength]=\\\"requiredPasswordStrength\\\" [strength]=\\\"passwordStrength\\\"></password-strength-bar>\\n        </div>\\n        <div *ngIf=\\\"passwordInput.invalid && (changePasswordForm.submitted || passwordInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"passwordInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"passwordInput?.errors?.weakPassword\\\">{{ 'common.password-is-too-weak' | translate }}</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"repeatedPassword\\\">{{ 'change-password-form.repeat-password' | translate }}</label>\\n        <input\\n            type=\\\"password\\\"\\n            id=\\\"repeatedPassword\\\"\\n            name=\\\"repeatedPassword\\\"\\n            class=\\\"form-control\\\"\\n            [(ngModel)]=\\\"repeatedPassword\\\"\\n            #repeatedPasswordInput=\\\"ngModel\\\"\\n            [matchPassword]=\\\"password\\\"\\n            autocomplete=\\\"off\\\"\\n            required\\n        />\\n        <div *ngIf=\\\"repeatedPasswordInput.invalid && (changePasswordForm.submitted || repeatedPasswordInput.dirty)\\\" class=\\\"error-messages\\\">\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPasswordInput?.errors?.required\\\">{{ 'common.this-is-required' | translate }}</div>\\n            <div class=\\\"form-control-feedback\\\" *ngIf=\\\"repeatedPasswordInput?.errors?.matchPassword\\\">\\n                {{ 'common.password-do-not-match' | translate }}\\n            </div>\\n        </div>\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-w-sm\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n        {{ 'common.change-password' | translate }}\\n    </button>\\n</form>\\n\";","export default \"<button class=\\\"btn btn-danger\\\" (click)=\\\"logoutAllDevices()\\\" [ngClass]=\\\"{ loading: isLoading }\\\" [disabled]=\\\"isLoading\\\">\\n    {{ 'logout-all.logged-out-from-all-devices' | translate }}\\n</button>\\n\";","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, OnDestroy, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { Subscription } from 'rxjs'\nimport { finalize, flatMap, tap } from 'rxjs/operators'\nimport { RPCResult, TwoFactorRPCResult } from '../../../common/api-interfaces'\nimport { SecurityCheckService } from '../../../common/security-check/security-check.service'\nimport { UserService } from '../../../common/services/core/user.service'\nimport { SessionService } from '../../../common/services/session.service'\nimport { TokenService } from '../../../common/services/token.service'\n\n@Component({\n    selector: 'two-factor',\n    templateUrl: 'two-factor.component.html',\n})\nexport class TwoFactorComponent implements OnDestroy {\n    @ViewChild('verificationForm')\n    public verificationForm: NgForm\n    public twoFactor: TwoFactorRPCResult | null\n    public verificationCode: number | null\n\n    public isLoading = false\n\n    private subcriptions = new Subscription()\n\n    constructor(\n        public session: SessionService,\n        private http: HttpClient,\n        private securityCheckService: SecurityCheckService,\n        private tokenService: TokenService,\n        private userService: UserService\n    ) {}\n\n    public ngOnDestroy(): void {\n        this.subcriptions.unsubscribe()\n    }\n\n    public generate2FASecret(): void {\n        this.subcriptions.add(\n            this.securityCheckService\n                .getScopePermission('securitySettings')\n                .pipe(\n                    tap(() => {\n                        this.isLoading = true\n                    }),\n                    flatMap(() =>\n                        this.http.post<RPCResult<TwoFactorRPCResult>>(\n                            `/users/${this.session.user.id}`,\n                            {\n                                id: Math.floor(Math.random() * 10000),\n                                jsonrpc: '2.0',\n                                method: 'generate2FASecret',\n                            },\n                            {\n                                headers: new HttpHeaders({ 'Content-Type': 'application/json-rpc' }),\n                            }\n                        )\n                    ),\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(response => {\n                    this.twoFactor = response.result\n                })\n        )\n    }\n\n    public toggleTwoFactorAuth(status: boolean): void {\n        this.subcriptions.add(\n            this.securityCheckService\n                .getScopePermission('securitySettings')\n                .pipe(\n                    tap(() => {\n                        this.isLoading = true\n                    }),\n                    flatMap(() =>\n                        this.userService.changeTwoFactor(\n                            this.session.user.id,\n                            status,\n                            this.verificationCode\n                                ? {\n                                      'X-2FA-Code': this.verificationCode?.toString(),\n                                  }\n                                : {}\n                        )\n                    ),\n                    flatMap(() => this.tokenService.refresh()),\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(() => {\n                    this.verificationCode = null\n                    this.twoFactor = null\n                })\n        )\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { Resolve } from '@angular/router'\nimport { EMPTY, forkJoin, Observable } from 'rxjs'\nimport { catchError, map } from 'rxjs/operators'\nimport { AccountBill, ICurrency } from '../../common/api-interfaces'\nimport { AccountBillsService } from '../../common/services/account-billing.service'\nimport { SessionService } from '../../common/services/session.service'\n\nexport interface AccountBillingResolvedData {\n    payments: AccountBill[]\n    billingCurrency: ICurrency\n}\n\n@Injectable()\nexport class AccountBillingResolver implements Resolve<AccountBillingResolvedData> {\n    constructor(private accountBills: AccountBillsService, private session: SessionService) {}\n\n    public resolve(): Observable<AccountBillingResolvedData> {\n        return forkJoin([\n            this.accountBills.fetchAccountBills(this.session.user.id),\n            this.accountBills.fetchBillingCurrency(this.session.user.id),\n        ]).pipe(\n            catchError(() => EMPTY),\n            map(([payments, billingCurrency]) => ({\n                payments,\n                billingCurrency,\n            }))\n        )\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { TranslateService } from '@ngx-translate/core'\nimport { filter, finalize, flatMap, take } from 'rxjs/operators'\nimport { ApiToken } from 'src/app/common/api-interfaces'\nimport { ListV2Component } from 'src/app/common/list-v2.component'\nimport { ConfirmationResult, ConfirmationService } from 'src/app/common/services/confirmation.service'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { ToastrService } from 'src/app/common/services/toastr.service'\n\n@Component({\n    selector: 'api-tokens',\n    templateUrl: 'api-tokens.component.html',\n})\nexport class ApiTokensComponent extends ListV2Component<ApiToken> implements OnInit, OnDestroy {\n    public defaultLimit = 5\n    public isLoading = false\n\n    constructor(\n        http: HttpClient,\n        ngbModal: NgbModal,\n        changeDetector: ChangeDetectorRef,\n        route: ActivatedRoute,\n        router: Router,\n        session: SessionService,\n        private toastr: ToastrService,\n        private confirmation: ConfirmationService,\n        public translate: TranslateService\n    ) {\n        super(http, ngbModal, changeDetector, route, router, session)\n    }\n\n    public ngOnInit(): void {\n        this.apiUrl = `/users/${this.session.user.id}/api-tokens`\n        super.ngOnInit()\n    }\n\n    public generate(): void {\n        this.isLoading = true\n        this.subscriptions.add(\n            this.session.userStream\n                .pipe(\n                    take(1),\n                    flatMap(user =>\n                        this.http.post<ApiToken & { privateKey: string }>(`/api-tokens`, { userId: user.id })\n                    ),\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(apiToken => {\n                    this.toastr.success(this.translate.instant('api-tokens.api-token-generated'))\n                    this.updateEvent.next()\n                    this.confirmation\n                        .show({\n                            type: 'warning',\n                            title: this.translate.instant('common.important'),\n                            text: `\n                        ${this.translate.instant('common.please-keep-this-private-key')}\n                        <br>\n                        <b>${apiToken.privateKey}</b>\n                        <br>${this.translate.instant('common.this-cannot-be-retrieved-once-lost')}\n                    `,\n                            confirmText: 'Understood',\n                            showCancel: false,\n                        })\n                        .subscribe()\n                })\n        )\n    }\n\n    public revoke(apiToken: ApiToken): void {\n        this.subscriptions.add(\n            this.confirmation\n                .show({\n                    type: 'danger',\n                    title: this.translate.instant('common.revoke-api-token'),\n                    text: `${this.translate.instant(\n                        'common.are-you-sure-want-to-revoke-this-token'\n                    )} <b>${this.translate.instant('common.it-cannot-be-undone')}<b>`,\n                    confirmText: this.translate.instant('common.revoke'),\n                    confirmClass: 'danger',\n                    showCancel: false,\n                })\n                .pipe(\n                    filter(result => result === ConfirmationResult.CONFIRMED),\n                    flatMap(() => this.http.delete(`/api-tokens/${apiToken.publicKey}`))\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.api-token-revoked'))\n                    this.updateEvent.next()\n                })\n        )\n    }\n}\n","export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-3\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.billing' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.billing' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n</div>\\n<ng-container *ngIf=\\\"session.userStream | async; let user\\\">\\n    <div class=\\\"container pb-4 e2e-account-billing\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col\\\">\\n                <div class=\\\"headline\\\">{{ 'account-billing.account-billing' | translate }}</div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-lg-9\\\">\\n                        <div class=\\\"media media-info pr-2\\\">\\n                            <div class=\\\"media-body pt-0\\\">\\n                                <h6 class=\\\"mt-0\\\">{{ 'common.payment' | translate }}</h6>\\n                                <p>{{ 'account-billing.manage-account-fee-payments' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-lg-15\\\">\\n                        <table class=\\\"table\\\">\\n                            <tr>\\n                                <td class=\\\"b-t-0\\\">{{ 'account-billing.next-payment-amount' | translate }}</td>\\n                                <td class=\\\"b-t-0\\\">\\n                                    <b\\n                                        ><fee-preview\\n                                            [currency]=\\\"billingCurrency\\\"\\n                                            [type]=\\\"'account-fee'\\\"\\n                                            [method]=\\\"'internal'\\\"\\n                                            [amount]=\\\"'0.0'\\\"\\n                                            [prefix]=\\\"true\\\"\\n                                        ></fee-preview\\n                                    ></b>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{ 'account-billing.next-payment-due' | translate }}</td>\\n                                <td>\\n                                    <b>{{ !!session.user.approvedAt ? (nextPaymentDue | date: 'mediumDate') : '-' }}</b>\\n                                </td>\\n                            </tr>\\n                            <tr>\\n                                <td>{{ 'account-billing.billing-currency' | translate }}</td>\\n                                <td>\\n                                    <currency-select\\n                                        [currencyTypes]=\\\"['fiat', 'crypto']\\\"\\n                                        [(currency)]=\\\"billingCurrency\\\"\\n                                        [user]=\\\"user\\\"\\n                                        (currencyChange)=\\\"billingCurrencyChange.next($event)\\\"\\n                                    ></currency-select>\\n                                </td>\\n                            </tr>\\n                        </table>\\n                    </div>\\n                </div>\\n                <div class=\\\"headline\\\">{{ 'account-billing.previous-statements' | translate }}</div>\\n                <table class=\\\"table mb-0 account-bills-table\\\" *ngIf=\\\"payments.length > 0; else noEntries\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>\\n                                <b>{{ 'common.id' | translate }}</b>\\n                            </th>\\n                            <th>\\n                                <b>{{ 'common.date' | translate }}</b>\\n                            </th>\\n                            <th>\\n                                <b>{{ 'common.amount' | translate }}</b>\\n                            </th>\\n                            <th>\\n                                <b>{{ 'common.settled-amount' | translate }}</b>\\n                            </th>\\n                            <th>\\n                                <b>{{ 'common.receipt' | translate }}</b>\\n                            </th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr\\n                            *ngFor=\\\"let payment of payments\\\"\\n                            class=\\\"e2e-account-bill\\\"\\n                            [ngClass]=\\\"{ 'table-danger': determineStatus(payment) === 'unpaid' }\\\"\\n                        >\\n                            <td\\n                                [ngClass]=\\\"{\\n                                    'text-danger': determineStatus(payment) === 'unpaid',\\n                                    'text-monospace': determineStatus(payment) !== 'unpaid'\\n                                }\\\"\\n                            >\\n                                {{ determineStatus(payment) !== 'unpaid' ? (payment.id | truncate: false:8:'') : 'Outstanding' }}\\n                            </td>\\n                            <td>{{ payment.invoiceDate | date: 'mediumDate' }}</td>\\n                            <td>\\n                                <b *ngIf=\\\"determineStatus(payment) !== 'free'; else freeCharge\\\"\\n                                    >{{ payment.amount | amount: payment.currency.decimalPlaces }} {{ payment.currency.code }}</b\\n                                >\\n                            </td>\\n                            <td>\\n                                <span class=\\\"font-weight-bold\\\" *ngIf=\\\"determineStatus(payment) === 'paid'; else unsettled\\\">\\n                                    {{ payment.transaction.fixedFee | amount: payment.transaction.currency.decimalPlaces }}\\n                                    {{ payment.transaction.currency.code }}</span\\n                                >\\n                                <ng-template #unsettled>\\n                                    <span *ngIf=\\\"determineStatus(payment) === 'unpaid'; else freeCharge\\\" class=\\\"text-muted\\\">{{\\n                                        'common.unpaid' | translate\\n                                    }}</span>\\n                                </ng-template>\\n                            </td>\\n                            <td>\\n                                <a\\n                                    href\\n                                    (click)=\\\"payment.invoice && openInvoiceModal(payment); $event.preventDefault()\\\"\\n                                    [ngClass]=\\\"{ 'text-muted': !payment.invoice }\\\"\\n                                    [ngbTooltip]=\\\"!payment.invoice ? 'Not available' : undefined\\\"\\n                                    >{{ 'common.download' | translate }}</a\\n                                >\\n                            </td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n                <ng-template #noEntries>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col d-flex justify-content-center align-items-center h-100\\\">\\n                            <div class=\\\"px-sm-3 w-100 max-width-sm text-center mb-0\\\">\\n                                <img src=\\\"/img/icons/refresh.svg\\\" class=\\\"img-sm mb-2\\\" />\\n                                <h4 class=\\\"mb-1\\\">{{ 'common.no-previous-bills' | translate }}</h4>\\n                                <p class=\\\"mb-0 text-gray\\\">{{ 'common.account-bills-are-charged-per-month' | translate }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </ng-template>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n\\n<ng-template #freeCharge>\\n    <b class=\\\"text-success text-uppercase\\\">{{ 'common.free' | translate }}</b>\\n</ng-template>\\n\";","import { Component } from '@angular/core'\n\n@Component({\n    selector: 'account',\n    template: '<router-outlet></router-outlet>',\n})\nexport class AccountComponent {}\n","import { Injectable } from '@angular/core'\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\nimport { Observable, of } from 'rxjs'\nimport { SessionService, TokenScope } from '../services/session.service'\nimport { ConfirmPasswordModalComponent } from './confirm-password.modal'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SecurityCheckService {\n    constructor(private ngbModal: NgbModal, private session: SessionService) {}\n\n    /**\n     * Asks the user for permission to do something that requires a higher scope than basic\n     * Resolves if the check was successful or the permission is still granted from another request\n     * @param scope The required scope\n     */\n    public getScopePermission(scope: TokenScope): Observable<void> {\n        // Resolve if token has already the correct scope\n        if (this.session.hasTokenScope(scope)) {\n            return of(undefined)\n        }\n        const modal = this.ngbModal.open(ConfirmPasswordModalComponent, {\n            windowClass: 'modal-primary security-check-modal',\n        })\n        ;(modal.componentInstance as ConfirmPasswordModalComponent).scope = scope\n        return new Observable(observer => {\n            modal.result\n                .then(() => {\n                    observer.next()\n                    observer.complete()\n                })\n                .catch(() => {\n                    observer.complete()\n                })\n        })\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit } from '@angular/core'\nimport { Router } from '@angular/router'\nimport { faBell } from '@fortawesome/pro-light-svg-icons'\nimport {\n    faCoin,\n    faEnvelope,\n    faExclamationCircle,\n    faExclamationTriangle,\n    faFileAlt,\n    faImage,\n    faInfoCircle,\n    faUniversity,\n    faUserCheck,\n} from '@fortawesome/pro-regular-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Observable, Subject, Subscription } from 'rxjs'\nimport { filter, finalize, flatMap, switchMap, take } from 'rxjs/operators'\nimport { ICurrency, IUser } from '../../common/api-interfaces'\nimport { toCountryCallingCode } from '../../common/common.mixin'\nimport { AvatarService } from '../../common/services/avatar.service'\nimport { UserService } from '../../common/services/core/user.service'\nimport { IntercomService } from '../../common/services/intercom.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { TokenService } from '../../common/services/token.service'\nimport { CurrenciesQuery } from '../../store/currencies/currencies.query'\n\n@Component({\n    selector: 'profile',\n    templateUrl: 'profile.component.html',\n})\nexport class ProfileComponent implements OnInit, OnDestroy {\n    public user: Partial<IUser>\n    public subscriptions = new Subscription()\n    public fetchEvent = new Subject<void>()\n    public currencies$: Observable<ICurrency[]>\n    public preferredCurrency$: Observable<ICurrency>\n\n    public isLoading = false\n    public isUploading = false\n    public avatarUploading = false\n    public isEmailNotificationsUpdating = false\n\n    public toCountryCallingCode = toCountryCallingCode\n\n    public faCoin = faCoin\n    public faExclamationCircle = faExclamationCircle\n    public faEnvelope = faEnvelope\n    public faUserCheck = faUserCheck\n    public faFileAlt = faFileAlt\n    public faImage = faImage\n    public faInfoCircle = faInfoCircle\n    public faExclamationTriangle = faExclamationTriangle\n    public faUniversity = faUniversity\n    public faBell = faBell\n\n    constructor(\n        private http: HttpClient,\n        private toastr: ToastrService,\n        private userService: UserService,\n        private token: TokenService,\n        private avatar: AvatarService,\n        private router: Router,\n        public intercom: IntercomService,\n        public session: SessionService,\n        private currenciesQuery: CurrenciesQuery,\n        private tokenService: TokenService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnInit(): void {\n        this.preferredCurrency$ = this.currenciesQuery.preferredCurrency$\n        this.currencies$ = this.currenciesQuery.selectAll({\n            filterBy: currency => ['fiat', 'crypto'].includes(currency.type),\n        })\n        this.subscriptions.add(\n            // todo: might need a reloader here?\n            this.fetchEvent\n                .pipe(switchMap(() => this.http.get<IUser>(`/users/${this.session.user.id}`)))\n                .subscribe(user => {\n                    this.user = user\n                })\n        )\n        this.fetchEvent.next()\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public async goToVerification(): Promise<void> {\n        await this.router.navigate(['/verify'])\n    }\n\n    public uploadAvatar(avatar: File): void {\n        this.avatarUploading = true\n        this.http\n            .request('POST', `/users/${this.user.id}/avatar`, {\n                body: avatar,\n                headers: new HttpHeaders({\n                    'X-File-Name': encodeURIComponent(avatar.name),\n                    'Content-Type': avatar.type,\n                }),\n            })\n            .pipe(\n                flatMap(() => this.token.refresh()),\n                finalize(() => {\n                    this.avatarUploading = false\n                })\n            )\n            .subscribe(() => {\n                this.avatar.reload()\n                this.fetchEvent.next()\n                this.toastr.success(this.translate.instant('profile.avatar-updated'))\n            })\n    }\n\n    public deleteAvatar(): void {\n        this.http\n            .delete(`/users/${this.user.id}/avatar`)\n            .pipe(flatMap(() => this.token.refresh()))\n            .subscribe(() => {\n                this.avatar.reload()\n                this.fetchEvent.next()\n            })\n    }\n\n    public updateEmailNotifications(): void {\n        const previousState = !this.user.sendEmailNotifications\n        this.isEmailNotificationsUpdating = true\n        this.subscriptions.add(\n            this.userService\n                .changeSendEmailNotifications(this.user.id!, this.user.sendEmailNotifications!)\n                .pipe(\n                    finalize(() => {\n                        this.isEmailNotificationsUpdating = false\n                    })\n                )\n                .subscribe(\n                    () => {\n                        this.fetchEvent.next()\n                        this.toastr.success(this.translate.instant('common.email-notifications-updated'))\n                    },\n                    () => {\n                        this.user.sendEmailNotifications = previousState\n                    }\n                )\n        )\n    }\n\n    public changePreferredCurrency(currency: ICurrency): void {\n        this.subscriptions.add(\n            this.session.userStream\n                .pipe(\n                    take(1),\n                    filter(user => user.preferredCurrency.code !== currency.code),\n                    switchMap(user => this.userService.changePreferredCurrency(user.id, currency)),\n                    flatMap(() => this.tokenService.refresh())\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('common.preferred-currency-changed'))\n                })\n        )\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '../common/common.module'\nimport { AccountBillingComponent } from './account-billing/account-billing.component'\nimport { AccountRoutingModule } from './account-routing.module'\nimport { AccountSecurityComponent } from './account-security/account-security.component'\nimport { ApiTokensComponent } from './account-security/api-tokens/api-tokens.component'\nimport { ChangePasswordFormComponent } from './account-security/change-password-form/change-password-form.component'\nimport { LogoutAllComponent } from './account-security/logout-all/logout-all.component'\nimport { TwoFactorComponent } from './account-security/two-factor/two-factor.component'\nimport { AccountComponent } from './account.component'\nimport { EmailFormComponent } from './profile/email-form/email-form.component'\nimport { ProfileComponent } from './profile/profile.component'\n\n@NgModule({\n    declarations: [\n        ProfileComponent,\n        TwoFactorComponent,\n        EmailFormComponent,\n        ChangePasswordFormComponent,\n        LogoutAllComponent,\n        AccountSecurityComponent,\n        AccountBillingComponent,\n        AccountComponent,\n        ApiTokensComponent,\n    ],\n    imports: [CommonModule, AccountRoutingModule],\n})\nexport class AccountModule {}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, OnDestroy } from '@angular/core'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\nimport { finalize, flatMap } from 'rxjs/operators'\nimport { RPCResult } from '../../../common/api-interfaces'\nimport { SecurityCheckService } from '../../../common/security-check/security-check.service'\nimport { LogoutService } from '../../../common/services/logout.service'\nimport { SessionService } from '../../../common/services/session.service'\nimport { ToastrService } from '../../../common/services/toastr.service'\n\n@Component({\n    selector: 'logout-all',\n    templateUrl: 'logout-all.component.html',\n})\nexport class LogoutAllComponent implements OnDestroy {\n    public isLoading = false\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        public session: SessionService,\n        private http: HttpClient,\n        private securityCheckService: SecurityCheckService,\n        private logoutService: LogoutService,\n        private toastr: ToastrService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public logoutAllDevices(): void {\n        this.subscriptions.add(\n            this.securityCheckService\n                .getScopePermission('securitySettings')\n                .pipe(\n                    flatMap(() => {\n                        this.isLoading = true\n                        return this.http.post<RPCResult<void>>(\n                            `/users/${this.session.user.id}`,\n                            {\n                                id: Math.floor(Math.random() * 10000),\n                                jsonrpc: '2.0',\n                                method: 'logoutAllDevices',\n                            },\n                            {\n                                headers: new HttpHeaders({ 'Content-Type': 'application/json-rpc' }),\n                            }\n                        )\n                    }),\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('logout-all.logged-out-from-all-devices'))\n                    this.logoutService.logout().subscribe(() => undefined)\n                })\n        )\n    }\n}\n","export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-3\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.security' | translate }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.security' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"container pb-4\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"headline\\\">{{ 'common.password' | translate }}</div>\\n            <div class=\\\"row e2e-reset-password\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faLockAlt\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'common.change-password' | translate }}</h6>\\n                            <p>\\n                                {{ 'common.your-password-passphrases' | translate }}\\n                            </p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <change-password-form></change-password-form>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"headline\\\">{{ 'account-security.2-factor-authentication' | translate }}</div>\\n            <div class=\\\"row e2e-two-factor\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faMobile\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'account-security.increase-security' | translate }}</h6>\\n                            <p>\\n                                {{ 'common.we-recommend-using-2-factor-authentication' | translate }}\\n                            </p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <two-factor></two-factor>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"headline\\\">{{ 'common.logout-from-all-devices' | translate }}</div>\\n            <div class=\\\"row e2e-logout-all-devices\\\">\\n                <div class=\\\"col-lg-9\\\">\\n                    <div class=\\\"media media-info pr-2\\\">\\n                        <fa-icon class=\\\"d-none d-lg-flex mr-3 mt-1\\\" [icon]=\\\"faShieldAlt\\\"></fa-icon>\\n                        <div class=\\\"media-body pt-0\\\">\\n                            <h6 class=\\\"mt-0\\\">{{ 'account-security.clear-all-sessions' | translate }}</h6>\\n                            <p>\\n                                {{ 'common.use-this-feature' | translate }}\\n                            </p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-15\\\">\\n                    <div class=\\\"form-block max-width-md\\\">\\n                        <logout-all></logout-all>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { AccountBillingComponent } from './account-billing/account-billing.component'\nimport { AccountBillingResolver } from './account-billing/account-billing.resolver'\nimport { AccountSecurityComponent } from './account-security/account-security.component'\nimport { AccountComponent } from './account.component'\nimport { ProfileComponent } from './profile/profile.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AccountComponent,\n        canActivate: [LoggedInAuthGuard],\n        children: [\n            { path: '', redirectTo: 'profile', pathMatch: 'full' },\n            { path: 'profile', component: ProfileComponent },\n            { path: 'security', component: AccountSecurityComponent },\n            {\n                path: 'billing',\n                component: AccountBillingComponent,\n                resolve: { data: AccountBillingResolver },\n            },\n        ],\n    },\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [AccountBillingResolver],\n})\nexport class AccountRoutingModule {}\n","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { AccountBill, ICurrency, IUser } from '../../common/api-interfaces'\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AccountBillsService {\n    constructor(private http: HttpClient) {}\n\n    public fetchAccountBills(userId: string): Observable<AccountBill[]> {\n        return this.http.get<AccountBill[]>(`/users/${userId}/account-bills`)\n    }\n\n    public fetchBillingCurrency(userId: string): Observable<ICurrency> {\n        return this.http.get<IUser>(`/users/${userId}`).pipe(map(response => response.billingCurrency))\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute } from '@angular/router'\nimport { faUserPlus } from '@fortawesome/pro-light-svg-icons'\nimport { TranslateService } from '@ngx-translate/core'\nimport BigNumber from 'bignumber.js'\nimport { currencySymbolMap } from 'currency-symbol-map'\nimport addMonths from 'date-fns/addMonths'\nimport parseISO from 'date-fns/parseISO'\nimport { Subject, Subscription } from 'rxjs'\nimport { switchMap } from 'rxjs/operators'\nimport { AccountBill, ICurrency } from '../../common/api-interfaces'\nimport { UserService } from '../../common/services/core/user.service'\nimport { SessionService } from '../../common/services/session.service'\nimport { ToastrService } from '../../common/services/toastr.service'\nimport { AccountBillingResolvedData } from './account-billing.resolver'\n\ntype AccountBillStatus = 'free' | 'unpaid' | 'paid'\n\n@Component({\n    selector: 'account-billing',\n    templateUrl: 'account-billing.component.html',\n})\nexport class AccountBillingComponent implements OnInit, OnDestroy {\n    public payments: AccountBill[] = []\n    public billingCurrency: ICurrency\n    public billingCurrencyChange = new Subject<ICurrency>()\n\n    public currencySymbolMap = currencySymbolMap\n    public faUserPlus = faUserPlus\n\n    public get nextPaymentDue(): Date {\n        return this.payments.length > 0 ? addMonths(parseISO(this.payments[0].invoiceDate), 1) : this.now\n    }\n\n    private now = new Date()\n    private subscriptions = new Subscription()\n\n    constructor(\n        public session: SessionService,\n        public translate: TranslateService,\n        private route: ActivatedRoute,\n        private toastr: ToastrService,\n        private userService: UserService\n    ) {}\n\n    public ngOnInit(): void {\n        this.route.data.subscribe(({ data }: { data?: AccountBillingResolvedData }) => {\n            if (data) {\n                this.payments = data.payments\n                this.billingCurrency = data.billingCurrency\n            }\n        })\n        this.subscriptions.add(\n            this.billingCurrencyChange\n                .pipe(switchMap(currency => this.userService.changeBillingCurrency(this.session.user.id, currency)))\n                .subscribe(() => {\n                    this.toastr.success(this.translate.instant('account-billing.billing-currency-updated'))\n                })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public determineStatus(accountBill: AccountBill): AccountBillStatus {\n        if (new BigNumber(accountBill.amount).eq(0)) {\n            return 'free'\n        }\n        if (!accountBill.transaction) {\n            return 'unpaid'\n        }\n        return 'paid'\n    }\n\n    public openInvoiceModal(payment: AccountBill): void {\n        if (!payment.invoice) {\n            return\n        }\n        window.open(payment.invoice.signedUrl, '_blank', 'noopener')\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, Input, OnChanges, OnDestroy, ViewChild } from '@angular/core'\nimport { NgForm } from '@angular/forms'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Subscription } from 'rxjs'\nimport { finalize, flatMap } from 'rxjs/operators'\nimport { IUser, RPCResult } from '../../../common/api-interfaces'\nimport { Disposable } from '../../../common/disposable'\nimport { SecurityCheckService } from '../../../common/security-check/security-check.service'\nimport { AlertService } from '../../../common/services/alert.service'\nimport { SessionService } from '../../../common/services/session.service'\nimport { ToastrService } from '../../../common/services/toastr.service'\n\n@Component({\n    selector: 'email-form',\n    templateUrl: 'email-form.component.html',\n})\nexport class EmailFormComponent implements OnDestroy, OnChanges {\n    @ViewChild('emailForm')\n    public emailForm: NgForm\n    @Input()\n    public user: IUser\n    public isLoading = false\n    public email = ''\n    private disposables = new Set<Disposable>()\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private securityCheckService: SecurityCheckService,\n        private Toastr: ToastrService,\n        public session: SessionService,\n        private http: HttpClient,\n        public alertService: AlertService,\n        public translate: TranslateService\n    ) {}\n\n    public ngOnChanges(): void {\n        this.email = this.user.email || ''\n    }\n\n    public ngOnDestroy(): void {\n        this.clearAlerts()\n        this.subscriptions.unsubscribe()\n    }\n\n    public submit(): void {\n        if (!this.emailForm.valid) {\n            throw new Error(this.translate.instant('common.form-invalid'))\n        }\n        this.clearAlerts()\n        this.subscriptions.add(\n            this.securityCheckService\n                .getScopePermission('securitySettings')\n                .pipe(\n                    flatMap(() => {\n                        this.isLoading = true\n                        return this.http.post<RPCResult<void>>(\n                            `/users/${this.user.id}`,\n                            {\n                                id: Math.floor(Math.random() * 10000),\n                                jsonrpc: '2.0',\n                                method: 'sendEmailConfirmation',\n                                params: {\n                                    email: this.email!,\n                                },\n                            },\n                            {\n                                headers: new HttpHeaders({ 'Content-Type': 'application/json-rpc' }),\n                            }\n                        )\n                    }),\n                    finalize(() => {\n                        this.isLoading = false\n                    })\n                )\n                .subscribe(\n                    () => {\n                        this.Toastr.success(this.translate.instant('email-form.email-sent-please-check-your-inbox'))\n                        this.email = ''\n                        this.emailForm.resetForm()\n                    },\n                    error => {\n                        if (error.status === 409) {\n                            this.disposables.add(\n                                this.alertService.add({\n                                    message: this.translate.instant(\n                                        'common.the-email-is-already-used-by-another-account'\n                                    ),\n                                    severity: 'danger',\n                                })\n                            )\n                        }\n                    }\n                )\n        )\n    }\n\n    private clearAlerts(): void {\n        for (const disposable of this.disposables) {\n            disposable.dispose()\n        }\n    }\n}\n"],"sourceRoot":"webpack:///"}