{"version":3,"sources":["./src/app/fees/fees.module.ts","./src/app/fees/user-fees/user-fees.component.html","./src/app/common/logged-in.auth-guard.ts","./src/app/store/fees/fees.store.ts","./src/app/store/fees/fees.query.ts","./src/app/fees/sgpmx-user-fees/sgpmx-user-fees.component.ts","./src/app/fees/fees.component.ts","./src/app/fees/fees.component.html","./src/app/fees/user-fees/user-fees.component.ts","./src/app/fees/sgpmx-user-fees/sgpmx-user-fees.component.html","./src/app/store/fees/fees.service.ts","./src/app/fees/fees-routing.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAwC;AACI;AACU;AACG;AACT;AACoC;AACjB;IAMtD,UAAU,SAAV,UAAU;CAAG;AAAb,UAAU;IAJtB,8DAAQ,CAAC;QACN,YAAY,EAAE,CAAC,6DAAa,EAAE,gFAAiB,EAAE,iGAAsB,CAAC;QACxE,OAAO,EAAE,CAAC,kEAAY,EAAE,sEAAiB,EAAE,0DAAW,CAAC;KAC1D,CAAC;GACW,UAAU,CAAG;AAAH;;;;;;;;;;;;;ACZvB;AAAe,yWAA0S,2CAA2C,i4BAAi4B,sCAAsC,0SAA0S,4CAA4C,sKAAsK,YAAY,mGAAmG,WAAW,WAAW,+OAA+O,sQAAsQ,WAAW,WAAW,o+BAAo+B,gCAAgC,iWAAiW,sCAAsC,4KAA4K,YAAY,uGAAuG,WAAW,WAAW,miCAAmiC,mCAAmC,iWAAiW,yCAAyC,+KAA+K,YAAY,uGAAuG,WAAW,WAAW,gjCAAgjC,iCAAiC,4OAA4O,0CAA0C,2JAA2J,YAAY,+FAA+F,WAAW,WAAW,07BAA07B,8BAA8B,4OAA4O,4BAA4B,MAAM,GAAG,6BAA6B,0JAA0J,YAAY,+FAA+F,WAAW,WAAW,8VAA8V,yCAAyC,8IAA8I,qEAAqE,GAAG,iBAAiB,KAAK,iCAAiC,sFAAsF,iCAAiC,yEAAyE,qEAAqE,GAAG,iBAAiB,uGAAuG,wCAAwC,IAAI,mEAAmE,gBAAgB,qDAAqD,iHAAiH,4BAA4B,IAAI,mEAAmE,gBAAgB,qDAAqD,sHAAsH,wCAAwC,IAAI,YAAY,GAAG,wEAAwE,gBAAgB,qDAAqD,iDAAiD,E;;;;;;;;;;;;;;;;;;;ACAzyV;AACiE;AAChD;IAG9C,iBAAiB,SAAjB,iBAAiB;IAC1B,YAAoB,OAAuB,EAAU,MAAc;QAA/C,YAAO,GAAP,OAAO,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IAChE,WAAW,CAAC,CAAyB,EAAE,KAA0B;QACpE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE;YACjC,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,kBAAkB,GAAG,KAAK,CAAC,GAAG,CAAC;SAC9D;QACD,OAAO,IAAI;IACf,CAAC;CACJ;;YAXQ,wEAAc;YADuB,sDAAM;;AAIvC,iBAAiB;IAD7B,gEAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;GACtB,iBAAiB,CAQ7B;AAR6B;;;;;;;;;;;;;;;;;;;ACLY;AAC6B;IAO1D,SAAS,SAAT,SAAU,SAAQ,2DAAsB;IACjD;QACI,KAAK,EAAE;IACX,CAAC;CACJ;;AAJY,SAAS;IAFrB,gEAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;IAClC,mEAAW,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;GAC9B,SAAS,CAIrB;AAJqB;;;;;;;;;;;;;;;;;;;;;;ACRoB;AACG;AACR;AACQ;AAEM;IAGtC,SAAS,SAAT,SAAU,SAAQ,2DAAsB;IACjD,YAAsB,KAAgB;QAClC,KAAK,CAAC,KAAK,CAAC;QADM,UAAK,GAAL,KAAK,CAAW;IAEtC,CAAC;IAEM,uBAAuB,CAAC,KAI9B;QACG,OAAO,IAAI,CAAC,YAAY,CACpB,MAAM,CAAC,EAAE,CACL,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;YAC1B,MAAM,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM;YAC9B,KAAK,CAAC,YAAY,KAAK,MAAM,CAAC,QAAQ,CAAC,IAAI,CAClD,CAAC,IAAI,CACF,8DAAO,CAAC,GAAG,CAAC,EAAE,CACV,GAAG;YACC,CAAC,CAAC,+CAAE,CAAC,GAAG,CAAC;YACT,CAAC,CAAC,IAAI,CAAC,YAAY,CACb,MAAM,CAAC,EAAE,CACL,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;gBAC1B,MAAM,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM;gBAC9B,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,KAAK,CACrC,CAAC,IAAI,CAAC,0DAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,IAAI,CAAC,CAAC,CAC9C,CACJ;IACL,CAAC;CACJ;;YA/BmB,qDAAS;;AAGhB,SAAS;IADrB,gEAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;GACtB,SAAS,CA4BrB;AA5BqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR2B;AACW;AACmB;AAC3C;AACqB;AACG;AAEY;AACf;AACI;IAMhD,sBAAsB,SAAtB,sBAAsB;IAQ/B,YACY,OAAuB,EACvB,IAAgB,EAChB,SAAoB,EACpB,WAAwB;QAHxB,YAAO,GAAP,OAAO,CAAgB;QACvB,SAAI,GAAJ,IAAI,CAAY;QAChB,cAAS,GAAT,SAAS,CAAW;QACpB,gBAAW,GAAX,WAAW,CAAa;QAX7B,cAAS,GAAG,KAAK;QACjB,SAAI,GAAW,EAAE;QACjB,mBAAc,GAAG,iFAAc;QAC/B,eAAU,GAAG,6EAAU;QAEtB,kBAAa,GAAG,IAAI,iDAAY,EAAE;IAOvC,CAAC;IAEG,QAAQ;QACX,IAAI,CAAC,aAAa,CAAC,GAAG,CAClB,IAAI,CAAC,OAAO,CAAC,UAAU;aAClB,IAAI,CACD,0DAAG,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,EAClC,8DAAO,CAAC,IAAI,CAAC,EAAE,CACX,qDAAQ,CAAC;YACL,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,UAAU,IAAI,CAAC,EAAE,eAAe,EAAE;gBACpD,MAAM,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE;aACjC,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,UAAU,IAAI,CAAC,EAAE,eAAe,EAAE;gBACpD,MAAM,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE;aACjC,CAAC;SACL,CAAC,CACL,EACD,+DAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAC3C;aACA,SAAS,CAAC,CAAC,CAAC,QAAQ,EAAE,UAAU,CAAC,EAAE,EAAE;YAClC,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,QAAQ,EAAE,GAAG,UAAU,CAAC;QAC5C,CAAC,CAAC,CACT;QACD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;IAC5B,CAAC;IAEM,WAAW;QACd,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE;IACpC,CAAC;IAEM,MAAM,CAAC,IAAa,EAAE,MAAyB,EAAE,YAAoB;QACxE,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CACxB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,GAAG,CAAC,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,KAAK,YAAY,CAC1F;QACD,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAC7C,OAAO,IAAI;SACd;QACD,OAAO,KAAK;IAChB,CAAC;IAEM,MAAM;QACT,OAAO,IAAI,CAAC,SAAS;aAChB,uBAAuB,CAAC;YACrB,IAAI,EAAE,KAAK;YACX,MAAM,EAAE,UAAU;YAClB,YAAY,EAAE,KAAK;SACtB,CAAC;aACD,IAAI,CAAC,0DAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,mDAAS,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IACxG,CAAC;CACJ;;YAtEQ,sFAAc;YAPd,+DAAU;YAQV,uEAAS;YACT,4EAAW;;AAMP,sBAAsB;IAJlC,+DAAS,CAAC;QACP,QAAQ,EAAE,iBAAiB;QAC3B,4FAA6C;KAChD,CAAC;GACW,sBAAsB,CA8DlC;AA9DkC;;;;;;;;;;;;;;;;;;;;;ACfM;AACiB;IAM7C,aAAa,SAAb,aAAa;;QACf,YAAO,GAAG,wEAAW,CAAC,OAAO;IACxC,CAAC;CAAA;AAFY,aAAa;IAJzB,+DAAS,CAAC;QACP,QAAQ,EAAE,MAAM;QAChB,iFAAkC;KACrC,CAAC;GACW,aAAa,CAEzB;AAFyB;;;;;;;;;;;;;ACP1B;AAAe,+OAAgL,iDAAiD,yOAAyO,6BAA6B,oFAAoF,qCAAqC,wGAAwG,8IAA8I,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACApzB;AACW;AAMjB;AACT;AACiC;AACzB;AAEgC;AACd;AACY;IAM3D,iBAAiB,SAAjB,iBAAiB;IAc1B,YAAsB,IAAgB,EAAS,OAAuB;QAAhD,SAAI,GAAJ,IAAI,CAAY;QAAS,YAAO,GAAP,OAAO,CAAgB;QAZ/D,SAAI,GAAW,EAAE;QAEjB,eAAU,GAAgB,EAAE;QAC5B,eAAU,GAAG,IAAI,4CAAO,EAAQ;QAEhC,uBAAkB,GAAG,qFAAkB;QACvC,kBAAa,GAAG,gFAAa;QAC7B,yBAAoB,GAAG,uFAAoB;QAC3C,iBAAY,GAAG,+EAAY;QAExB,kBAAa,GAAG,IAAI,iDAAY,EAAE;IAE6B,CAAC;IAEnE,QAAQ;QACX,IAAI,CAAC,QAAQ,GAAG,wDAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC;QAC9D,IAAI,CAAC,SAAS,EAAE;QAEhB,IAAI,CAAC,IAAI;aACJ,GAAG,CAAuB,aAAa,EAAE;YACtC,MAAM,EAAE;gBACJ,KAAK,EAAE,GAAG,GAAG,EAAE;aAClB;SACJ,CAAC;aACD,SAAS,CAAC,QAAQ,CAAC,EAAE;YAClB,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,IAAI;YAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAChC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACxE;QACN,CAAC,CAAC;QAEN,IAAI,CAAC,aAAa,CAAC,GAAG,CAClB,kDAAK,CAAC,+CAAE,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC;aAChC,IAAI,CAAC,gEAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;aACnC,SAAS,CAAC,IAAI,CAAC,EAAE;YACd,IAAI,CAAC,IAAI,GAAG,IAAI;YAChB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,QAAQ,EAAE;gBAClD,IAAI,CAAC,OAAO,GAAG;oBACX;wBACI,KAAK,EAAE,QAAQ;wBACf,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;qBAC9B;iBACJ;aACJ;iBAAM;gBACH,IAAI,CAAC,OAAO,GAAG;oBACX;wBACI,KAAK,EAAE,OAAO;wBACd,OAAO,EAAE,OAAO;qBACnB;oBACD;wBACI,KAAK,EAAE,OAAO;wBACd,OAAO,EAAE,OAAO;qBACnB;oBACD;wBACI,KAAK,EAAE,MAAM;wBACb,OAAO,EAAE,YAAY;qBACxB;iBACJ;aACJ;QACL,CAAC,CAAC,CACT;IACL,CAAC;IAEM,WAAW;QACd,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE;IACpC,CAAC;IAEM,KAAK;QACR,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,UAAU,IAAI,CAAC,IAAI,CAAC,EAAE,eAAe,EAAE;YAChE,MAAM,EAAE;gBACJ,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;aACnC;SACJ,CAAC;IACN,CAAC;IAEM,MAAM,CAAC,IAAa,EAAE,MAAyB;QAClD,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC;QAC/E,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAC7C,OAAO,IAAI;SACd;QACD,OAAO,KAAK;IAChB,CAAC;IAEM,OAAO,CAAC,MAAc,EAAE,YAAuB;QAClD,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,YAAY,CAAC,IAAI,CAAC;QAClF,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QACtF,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;YACnB,OAAO,GAAG;SACb;QACD,OAAO,wFAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC;IAClD,CAAC;IAEM,SAAS,CAAC,IAAa,EAAE,SAA4B;;QACxD,IAAI,SAAS,KAAK,MAAM,EAAE;YACtB,OAAO,IAAI,KAAK,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa;SAC9D;QACD,mBAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,KAAK,MAAM,CAAC,KAAK,CAAC,0CAAE,OAAO,mCAAI,EAAE;IACjF,CAAC;IAES,SAAS;QACf,IAAI,CAAC,aAAa,CAAC,GAAG,CAClB,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACrC,IAAI,CAAC,IAAI,GAAG,IAAI,0EAAI,CAAC,IAAI,CAAC;YAC1B,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;QAC1B,CAAC,CAAC,CACL;IACL,CAAC;CACJ;;YAjIQ,+DAAU;YAcV,uFAAc;;AAMV,iBAAiB;IAJ7B,+DAAS,CAAC;QACP,QAAQ,EAAE,WAAW;QACrB,sFAAuC;KAC1C,CAAC;GACW,iBAAiB,CA6G7B;AA7G6B;;;;;;;;;;;;;ACpB9B;AAAe,wgCAAy8B,qKAAqK,YAAY,+FAA+F,WAAW,WAAW,0pCAA0pC,qKAAqK,YAAY,+FAA+F,WAAW,WAAW,6oCAA6oC,iCAAiC,iKAAiK,YAAY,+FAA+F,WAAW,WAAW,+oCAA+oC,iCAAiC,iKAAiK,YAAY,+FAA+F,WAAW,WAAW,2VAA2V,oBAAoB,wGAAwG,wPAAwP,sBAAsB,SAAS,iCAAiC,gEAAgE,iCAAiC,iEAAiE,sBAAsB,mGAAmG,oBAAoB,+FAA+F,4BAA4B,IAAI,oBAAoB,yGAAyG,YAAY,GAAG,yBAAyB,4CAA4C,E;;;;;;;;;;;;;;;;;;;;;;ACA77N;AACP;AACC;AACF;AAC+B;AAEhC;IAG3B,WAAW,SAAX,WAAW;IACpB,YAAsB,KAAgB,EAAU,IAAgB,EAAU,OAAuB;QAA3E,UAAK,GAAL,KAAK,CAAW;QAAU,SAAI,GAAJ,IAAI,CAAY;QAAU,YAAO,GAAP,OAAO,CAAgB;IAAG,CAAC;IAE9F,iBAAiB;QACpB,OAAO,qDAAQ,CAAC;YACZ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,UAAU,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,eAAe,EAAE;gBACjE,MAAM,EAAE;oBACJ,YAAY,EAAE,IAAI;iBACrB;aACJ,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,UAAU,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,eAAe,EAAE;gBACjE,MAAM,EAAE;oBACJ,YAAY,EAAE,IAAI;iBACrB;aACJ,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,UAAU,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,eAAe,EAAE;gBACjE,MAAM,EAAE;oBACJ,YAAY,EAAE,KAAK;iBACtB;aACJ,CAAC;SACL,CAAC,CAAC,IAAI,CACH,0DAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,QAAQ,EAAE,GAAG,UAAU,EAAE,GAAG,OAAO,CAAC,CAAC,EAClF,0DAAG,CAAC,IAAI,CAAC,EAAE;YACP,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC;QACxB,CAAC,CAAC,CACL;IACL,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,iBAAiB,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC;IACvD,CAAC;CACJ;;YAlCQ,qDAAS;YANT,+DAAU;YAIV,sFAAc;;AAKV,WAAW;IADvB,gEAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;GACtB,WAAW,CA+BvB;AA/BuB;;;;;;;;;;;;;;;;;;;;;ACTgB;AACc;AACY;AAClB;AAEhD,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,6DAAa;QACxB,WAAW,EAAE,CAAC,8EAAiB,CAAC;KACnC;CACJ;IAKY,iBAAiB,SAAjB,iBAAiB;CAAG;AAApB,iBAAiB;IAJ7B,8DAAQ,CAAC;QACN,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;KAC1B,CAAC;GACW,iBAAiB,CAAG;AAAH","file":"fees-fees-module.js","sourcesContent":["import { NgModule } from '@angular/core'\nimport { IonicModule } from '@ionic/angular'\nimport { CommonModule } from '../common/common.module'\nimport { FeesRoutingModule } from './fees-routing.module'\nimport { FeesComponent } from './fees.component'\nimport { SgpmxUserFeesComponent } from './sgpmx-user-fees/sgpmx-user-fees.component'\nimport { UserFeesComponent } from './user-fees/user-fees.component'\n\n@NgModule({\n    declarations: [FeesComponent, UserFeesComponent, SgpmxUserFeesComponent],\n    imports: [CommonModule, FeesRoutingModule, IonicModule],\n})\nexport class FeesModule {}\n","export default \"<div class=\\\"container h-100\\\">\\n    <div class=\\\"row mt-2\\\">\\n        <div class=\\\"col\\\">\\n            <currency-select-tab\\n                [(currency)]=\\\"currency\\\"\\n                (currencyChange)=\\\"fetchEvent.next()\\\"\\n                [user]=\\\"user\\\"\\n                [moreButtonOptions]=\\\"{ text: 'Other currencies', hasCaret: true }\\\"\\n                #currencySelect\\n            ></currency-select-tab>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-3\\\">\\n        <ng-container *ngIf=\\\"['fiat', 'crypto'].includes(currency.type)\\\">\\n            <div class=\\\"col col-lg-6\\\">\\n                <div class=\\\"card fee-tag\\\">\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                            <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                                <figure class=\\\"m-0\\\">\\n                                    <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faLandmarkAlt\\\"></fa-icon>\\n                                </figure>\\n                            </div>\\n                            <p class=\\\"font-weight-bold font-lg m-0\\\">{{ 'common.platform-fees' | translate }}</p>\\n                        </div>\\n                    </div>\\n                    <div>\\n                        <table class=\\\"table mb-0\\\">\\n                            <tbody>\\n                                <tr *ngIf=\\\"currency.code === 'USD'\\\">\\n                                    <td>{{ 'common.monthly-account-fee' | translate }}</td>\\n                                    <td class=\\\"text-right\\\">\\n                                        <ng-container *ngIf=\\\"getFee('account-fee', 'internal'); else noFee; let fee\\\">\\n                                            <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                        </ng-container>\\n                                    </td>\\n                                </tr>\\n                                <ng-container *ngIf=\\\"getFee('gst', 'internal'); let fee\\\">\\n                                    <tr>\\n                                        <td>GST</td>\\n                                        <td class=\\\"text-right\\\">\\n                                            <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                        </td>\\n                                    </tr>\\n                                </ng-container>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col col-lg-6\\\">\\n                <div class=\\\"card fee-tag\\\">\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                            <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                                <figure class=\\\"m-0\\\">\\n                                    <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faArrowAltToBottom\\\"></fa-icon>\\n                                </figure>\\n                            </div>\\n                            <p class=\\\"font-weight-bold font-lg m-0\\\">{{ 'common.deposit' | translate }}</p>\\n                        </div>\\n                    </div>\\n                    <div>\\n                        <table class=\\\"table mb-0\\\">\\n                            <tbody>\\n                                <ng-container *ngFor=\\\"let method of methods\\\">\\n                                    <tr>\\n                                        <td>{{ getMethod('deposit', method.value) }}</td>\\n                                        <td class=\\\"text-right\\\">\\n                                            <ng-container *ngIf=\\\"getFee('deposit', method.value); else noFee; let fee\\\">\\n                                                <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                            </ng-container>\\n                                        </td>\\n                                    </tr>\\n                                </ng-container>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col col-lg-6\\\">\\n                <div class=\\\"card fee-tag\\\">\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                            <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                                <figure class=\\\"m-0\\\">\\n                                    <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faArrowAltFromBottom\\\"></fa-icon>\\n                                </figure>\\n                            </div>\\n                            <p class=\\\"font-weight-bold font-lg m-0\\\">{{ 'common.withdrawal' | translate }}</p>\\n                        </div>\\n                    </div>\\n                    <div>\\n                        <table class=\\\"table mb-0\\\">\\n                            <tbody>\\n                                <ng-container *ngFor=\\\"let method of methods\\\">\\n                                    <tr>\\n                                        <td>{{ getMethod('withdrawal', method.value) }}</td>\\n                                        <td class=\\\"text-right\\\">\\n                                            <ng-container *ngIf=\\\"getFee('withdrawal', method.value); else noFee; let fee\\\">\\n                                                <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                            </ng-container>\\n                                        </td>\\n                                    </tr>\\n                                </ng-container>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"col col-lg-6\\\" *ngIf=\\\"currency.type !== 'metal'\\\">\\n            <div class=\\\"card fee-tag\\\">\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                        <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                            <figure class=\\\"m-0\\\">\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faPaperPlane\\\"></fa-icon>\\n                            </figure>\\n                        </div>\\n                        <p class=\\\"font-weight-bold font-lg m-0\\\">{{ 'common.transfer' | translate }}</p>\\n                    </div>\\n                </div>\\n                <div>\\n                    <table class=\\\"table mb-0\\\">\\n                        <tbody>\\n                            <tr>\\n                                <td>{{ 'common.internal-transfer' | translate }}</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"getFee('transfer', 'internal'); else noFee; let fee\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                    </ng-container>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col col-lg-6\\\" *ngIf=\\\"currency.type === 'metal'\\\">\\n            <div class=\\\"card fee-tag\\\">\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                        <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                            <figure class=\\\"m-0\\\">\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faPaperPlane\\\"></fa-icon>\\n                            </figure>\\n                        </div>\\n                        <p class=\\\"font-weight-bold font-lg m-0\\\">{{ 'common.trade' | translate }}</p>\\n                    </div>\\n                </div>\\n                <div>\\n                    <table class=\\\"table mb-0\\\">\\n                        <tbody>\\n                            <tr>\\n                                <td>{{ 'common.buy' | translate }} &amp; {{ 'common.sell' | translate }}</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"getFee('service', 'internal'); else noFee; let fee\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                    </ng-container>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\n<ng-template #noFee>\\n    <span class=\\\"text-success\\\">{{ 'common.free' | translate | uppercase }}</span>\\n</ng-template>\\n<ng-template #withFee let-fee=\\\"fee\\\">\\n    <div>\\n        <span *ngIf=\\\"fee.relative && fee.fixed\\\">\\n            {{ convert(fee.fixed, fee.currency) | amount: currency.decimalPlaces }} {{ currency.code }} + {{ fee.relative | percent: '1.2' }}\\n        </span>\\n        <span *ngIf=\\\"fee.relative && !fee.fixed\\\">\\n            {{ fee.relative | percent: '1.2' }}\\n        </span>\\n        <span *ngIf=\\\"!fee.relative && fee.fixed\\\"> {{ convert(fee.fixed, fee.currency) | amount: currency.decimalPlaces }} {{ currency.code }} </span>\\n    </div>\\n    <div *ngIf=\\\"fee.min\\\">\\n        <small class=\\\"text-muted\\\">\\n            {{ 'common.min' | translate | lowercase }}. {{ convert(fee.min, fee.currency) | amount: currency.decimalPlaces }}\\n            {{ currency.type !== 'metal' ? currency.code : 'USD' }}\\n        </small>\\n    </div>\\n    <div *ngIf=\\\"fee.max\\\">\\n        <small class=\\\"text-muted\\\">\\n            {{ 'common.max' | translate }}. {{ convert(fee.max, fee.currency) | amount: currency.decimalPlaces }}\\n            {{ currency.type !== 'metal' ? currency.code : 'USD' }}\\n        </small>\\n    </div>\\n    <div *ngIf=\\\"fee.minValue\\\">\\n        <small class=\\\"text-muted\\\">\\n            {{ 'common.min' | translate | lowercase }}. {{ fee.type }} {{ convert(fee.minValue, fee.currency) | amount: currency.decimalPlaces }}\\n            {{ currency.type !== 'metal' ? currency.code : 'USD' }}\\n        </small>\\n    </div>\\n</ng-template>\\n\";","import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router'\nimport { SessionService } from './services/session.service'\n\n@Injectable({ providedIn: 'root' })\nexport class LoggedInAuthGuard implements CanActivate {\n    constructor(private session: SessionService, private router: Router) {}\n    public canActivate(_: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree {\n        if (!this.session.isAuthenticated()) {\n            return this.router.parseUrl('/login?redirect=' + state.url)\n        }\n        return true\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita'\nimport { IFee } from '../../common/api-interfaces'\n\nexport interface FeesState extends EntityState<IFee, string> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'fees', idKey: 'id' })\nexport class FeesStore extends EntityStore<FeesState> {\n    constructor() {\n        super()\n    }\n}\n","import { Injectable } from '@angular/core'\nimport { QueryEntity } from '@datorama/akita'\nimport { Observable, of } from 'rxjs'\nimport { flatMap, map } from 'rxjs/operators'\nimport { FeeType, IFee, TransactionMethod } from 'src/app/common/api-interfaces'\nimport { FeesState, FeesStore } from './fees.store'\n\n@Injectable({ providedIn: 'root' })\nexport class FeesQuery extends QueryEntity<FeesState> {\n    constructor(protected store: FeesStore) {\n        super(store)\n    }\n\n    public findByPrimaryAttributes(query: {\n        type: FeeType\n        method: TransactionMethod\n        currencyCode: string\n    }): Observable<IFee | null> {\n        return this.selectEntity(\n            entity =>\n                entity.type === query.type &&\n                entity.method === query.method &&\n                query.currencyCode === entity.currency.code\n        ).pipe(\n            flatMap(fee =>\n                fee\n                    ? of(fee)\n                    : this.selectEntity(\n                          entity =>\n                              entity.type === query.type &&\n                              entity.method === query.method &&\n                              entity.currency.code === 'USD'\n                      ).pipe(map(usdFee => usdFee ?? null))\n            )\n        )\n    }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit } from '@angular/core'\nimport { faBalanceScale, faExchange } from '@fortawesome/pro-duotone-svg-icons'\nimport BigNumber from 'bignumber.js'\nimport { forkJoin, Observable, Subscription } from 'rxjs'\nimport { finalize, flatMap, map, tap } from 'rxjs/operators'\nimport { FeeType, IFee, TransactionMethod } from 'src/app/common/api-interfaces'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { FeesQuery } from 'src/app/store/fees/fees.query'\nimport { FeesService } from 'src/app/store/fees/fees.service'\n\n@Component({\n    selector: 'sgpmx-user-fees',\n    templateUrl: 'sgpmx-user-fees.component.html',\n})\nexport class SgpmxUserFeesComponent implements OnInit, OnDestroy {\n    public isLoading = false\n    public fees: IFee[] = []\n    public faBalanceScale = faBalanceScale\n    public faExchange = faExchange\n\n    private subscriptions = new Subscription()\n\n    constructor(\n        private session: SessionService,\n        private http: HttpClient,\n        private feesQuery: FeesQuery,\n        private feesService: FeesService\n    ) {}\n\n    public ngOnInit(): void {\n        this.subscriptions.add(\n            this.session.userStream\n                .pipe(\n                    tap(() => (this.isLoading = true)),\n                    flatMap(user =>\n                        forkJoin([\n                            this.http.get<IFee[]>(`/users/${user.id}/fee-schedule`, {\n                                params: { currencyCode: 'AU' },\n                            }),\n                            this.http.get<IFee[]>(`/users/${user.id}/fee-schedule`, {\n                                params: { currencyCode: 'AG' },\n                            }),\n                        ])\n                    ),\n                    finalize(() => (this.isLoading = false))\n                )\n                .subscribe(([goldFees, silverFees]) => {\n                    this.fees = [...goldFees, ...silverFees]\n                })\n        )\n        this.feesService.fetch()\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public getFee(type: FeeType, method: TransactionMethod, currencyCode: string): IFee | null {\n        const found = this.fees.find(\n            fee => fee.type === type && fee.method === method && fee.currency.code === currencyCode\n        )\n        if (!found || (!found.relative && !found.fixed)) {\n            return null\n        }\n        return found\n    }\n\n    public getGst(): Observable<string> {\n        return this.feesQuery\n            .findByPrimaryAttributes({\n                type: 'gst',\n                method: 'internal',\n                currencyCode: 'USD',\n            })\n            .pipe(map(gst => (gst ? `${new BigNumber(gst.relative || 0).times(100).toFixed(0)}%` : 'FREE')))\n    }\n}\n","import { Component } from '@angular/core'\nimport { environment } from 'src/environments/environment'\n\n@Component({\n    selector: 'fees',\n    templateUrl: 'fees.component.html',\n})\nexport class FeesComponent {\n    public appName = environment.appName\n}\n","export default \"<div class=\\\"container pt-page\\\">\\n    <div class=\\\"row justify-content-between align-items-center pb-2\\\">\\n        <div class=\\\"col-auto\\\">\\n            <h5 class=\\\"mb-0\\\">{{ 'common.fee-schedule' | translate | titlecase }}</h5>\\n        </div>\\n        <div class=\\\"col-auto d-flex justify-content-end\\\">\\n            <ol class=\\\"breadcrumb px-0\\\">\\n                <li class=\\\"breadcrumb-item\\\">\\n                    <a [routerLink]=\\\"['/dashboard']\\\">{{ 'common.home' | translate }}</a>\\n                </li>\\n                <li class=\\\"breadcrumb-item active\\\">{{ 'common.fee-schedule' | translate }}</li>\\n            </ol>\\n        </div>\\n    </div>\\n</div>\\n<ng-container *ngIf=\\\"appName !== 'sgpmx'; else sgpmx\\\">\\n    <user-fees></user-fees>\\n</ng-container>\\n<ng-template #sgpmx>\\n    <sgpmx-user-fees></sgpmx-user-fees>\\n</ng-template>\\n\";","import { HttpClient } from '@angular/common/http'\nimport { Component, OnDestroy, OnInit } from '@angular/core'\nimport {\n    faArrowAltFromBottom,\n    faArrowAltToBottom,\n    faLandmarkAlt,\n    faPaperPlane,\n} from '@fortawesome/pro-duotone-svg-icons'\nimport { cloneDeep } from 'lodash'\nimport { merge, Observable, of, Subject, Subscription } from 'rxjs'\nimport { switchMap } from 'rxjs/operators'\nimport { FeeType, ICurrency, IFee, IUser, Paginated, TransactionMethod } from 'src/app/common/api-interfaces'\nimport { Currency } from 'src/app/common/models/accounting/currency.model'\nimport { User } from 'src/app/common/models/core/user.model'\nimport { SessionService } from 'src/app/common/services/session.service'\n\n@Component({\n    selector: 'user-fees',\n    templateUrl: 'user-fees.component.html',\n})\nexport class UserFeesComponent implements OnInit, OnDestroy {\n    public user: IUser\n    public fees: IFee[] = []\n    public currency: ICurrency\n    public currencies: ICurrency[] = []\n    public fetchEvent = new Subject<void>()\n    public methods: { value: TransactionMethod; display: string }[]\n    public faArrowAltToBottom = faArrowAltToBottom\n    public faLandmarkAlt = faLandmarkAlt\n    public faArrowAltFromBottom = faArrowAltFromBottom\n    public faPaperPlane = faPaperPlane\n\n    protected subscriptions = new Subscription()\n\n    constructor(protected http: HttpClient, public session: SessionService) {}\n\n    public ngOnInit(): void {\n        this.currency = cloneDeep(this.session.user.preferredCurrency)\n        this.loadOwner()\n\n        this.http\n            .get<Paginated<ICurrency>>('/currencies', {\n                params: {\n                    limit: 100 + '',\n                },\n            })\n            .subscribe(response => {\n                this.currencies = response.data\n                this.currency = this.currencies.find(\n                    currency => currency.code === this.session.user.preferredCurrency.code\n                )!\n            })\n\n        this.subscriptions.add(\n            merge(of(undefined), this.fetchEvent)\n                .pipe(switchMap(() => this.fetch()))\n                .subscribe(fees => {\n                    this.fees = fees\n                    if (this.currency && this.currency.type === 'crypto') {\n                        this.methods = [\n                            {\n                                value: 'crypto',\n                                display: this.currency.name,\n                            },\n                        ]\n                    } else {\n                        this.methods = [\n                            {\n                                value: 'swift',\n                                display: 'SWIFT',\n                            },\n                            {\n                                value: 'local',\n                                display: 'Local',\n                            },\n                            {\n                                value: 'card',\n                                display: 'Topup Card',\n                            },\n                        ]\n                    }\n                })\n        )\n    }\n\n    public ngOnDestroy(): void {\n        this.subscriptions.unsubscribe()\n    }\n\n    public fetch(): Observable<IFee[]> {\n        return this.http.get<IFee[]>(`/users/${this.user.id}/fee-schedule`, {\n            params: {\n                currencyCode: this.currency.code,\n            },\n        })\n    }\n\n    public getFee(type: FeeType, method: TransactionMethod): IFee | null {\n        const found = this.fees.find(fee => fee.type === type && fee.method === method)\n        if (!found || (!found.relative && !found.fixed)) {\n            return null\n        }\n        return found\n    }\n\n    public convert(amount: string, baseCurrency: ICurrency): string {\n        const base = this.currencies.find(currency => currency.code === baseCurrency.code)\n        const counter = this.currencies.find(currency => currency.code === this.currency.code)\n        if (!base || !counter) {\n            return '0'\n        }\n        return Currency.convert(amount, base, counter)\n    }\n\n    public getMethod(type: FeeType, feeMethod: TransactionMethod): string {\n        if (feeMethod === 'card') {\n            return type === 'withdrawal' ? 'Topup Card' : 'Unload Card'\n        }\n        return this.methods.find(method => feeMethod === method.value)?.display ?? ''\n    }\n\n    protected loadOwner(): void {\n        this.subscriptions.add(\n            this.session.userStream.subscribe(user => {\n                this.user = new User(user)\n                this.fetchEvent.next()\n            })\n        )\n    }\n}\n","export default \"<div class=\\\"container h-100\\\">\\n    <div class=\\\"row mt-2\\\">\\n        <div class=\\\"col col-lg-6\\\">\\n            <div class=\\\"card fee-tag\\\">\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                        <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                            <figure class=\\\"m-0\\\">\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faBalanceScale\\\"></fa-icon>\\n                            </figure>\\n                        </div>\\n                        <p class=\\\"font-weight-bold font-lg m-0\\\">Gold Troy Ounce</p>\\n                    </div>\\n                </div>\\n                <div>\\n                    <table class=\\\"table mb-0\\\">\\n                        <tbody>\\n                            <tr>\\n                                <td>Buy &amp; Sell</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"getFee('service', 'internal', 'AU'); else noFee; let fee\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                    </ng-container>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col col-lg-6\\\">\\n            <div class=\\\"card fee-tag\\\">\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                        <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                            <figure class=\\\"m-0\\\">\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faBalanceScale\\\"></fa-icon>\\n                            </figure>\\n                        </div>\\n                        <p class=\\\"font-weight-bold font-lg m-0\\\">Silver Troy Ounce</p>\\n                    </div>\\n                </div>\\n                <div>\\n                    <table class=\\\"table mb-0\\\">\\n                        <tbody>\\n                            <tr>\\n                                <td>Buy &amp; Sell</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"getFee('service', 'internal', 'AG'); else noFee; let fee\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                    </ng-container>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col col-lg-6\\\">\\n            <div class=\\\"card fee-tag\\\">\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                        <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                            <figure class=\\\"m-0\\\">\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faExchange\\\"></fa-icon>\\n                            </figure>\\n                        </div>\\n                        <p class=\\\"font-weight-bold font-lg m-0\\\">Gold Troy Ounce</p>\\n                    </div>\\n                </div>\\n                <div>\\n                    <table class=\\\"table mb-0\\\">\\n                        <tbody>\\n                            <tr>\\n                                <td>{{ 'common.transfer' | translate }}</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"getFee('transfer', 'internal', 'AU'); else noFee; let fee\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                    </ng-container>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col col-lg-6\\\">\\n            <div class=\\\"card fee-tag\\\">\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"d-flex justify-content-center align-items-center flex-column p-3\\\">\\n                        <div class=\\\"icon-wrapper mb-2 d-flex align-items-center justify-content-center\\\">\\n                            <figure class=\\\"m-0\\\">\\n                                <fa-icon class=\\\"quickbar-icon\\\" [fixedWidth]=\\\"true\\\" [icon]=\\\"faExchange\\\"></fa-icon>\\n                            </figure>\\n                        </div>\\n                        <p class=\\\"font-weight-bold font-lg m-0\\\">Silver Troy Ounce</p>\\n                    </div>\\n                </div>\\n                <div>\\n                    <table class=\\\"table mb-0\\\">\\n                        <tbody>\\n                            <tr>\\n                                <td>{{ 'common.transfer' | translate }}</td>\\n                                <td class=\\\"text-right\\\">\\n                                    <ng-container *ngIf=\\\"getFee('transfer', 'internal', 'AG'); else noFee; let fee\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"withFee; context: { fee: fee }\\\"></ng-container>\\n                                    </ng-container>\\n                                </td>\\n                            </tr>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <p class=\\\"font-sm\\\">\\n        <i>* Subject to additional {{ getGst() | async }} GST</i>\\n    </p>\\n</div>\\n\\n<ng-template #noFee>\\n    <span class=\\\"text-success\\\" *ngIf=\\\"!isLoading; else spinner\\\">FREE</span>\\n    <ng-template #spinner>\\n        <ion-spinner name=\\\"dots\\\"></ion-spinner>\\n    </ng-template>\\n</ng-template>\\n<ng-template #withFee let-fee=\\\"fee\\\">\\n    <div>\\n        <span *ngIf=\\\"fee.relative && fee.fixed\\\"> {{ fee.fixed | amount }} USD + {{ fee.relative | percent: '1.2' }}*</span>\\n        <span *ngIf=\\\"fee.relative && !fee.fixed\\\"> {{ fee.relative | percent: '1.2' }}* </span>\\n        <span *ngIf=\\\"!fee.relative && fee.fixed\\\"> {{ fee.fixed | amount }} USD*</span>\\n    </div>\\n    <div *ngIf=\\\"fee.min\\\">\\n        <small class=\\\"text-muted\\\"> min. {{ fee.min | amount }} USD </small>\\n    </div>\\n    <div *ngIf=\\\"fee.max\\\">\\n        <small class=\\\"text-muted\\\"> {{ 'common.max' | translate }}. {{ fee.max | amount }} USD </small>\\n    </div>\\n    <div *ngIf=\\\"fee.minValue\\\">\\n        <small class=\\\"text-muted\\\"> min. {{ fee.type }} {{ fee.minValue | amount }} USD </small>\\n    </div>\\n</ng-template>\\n\";","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { forkJoin, Observable } from 'rxjs'\nimport { map, tap } from 'rxjs/operators'\nimport { SessionService } from 'src/app/common/services/session.service'\nimport { IFee } from '../../common/api-interfaces'\nimport { FeesStore } from './fees.store'\n\n@Injectable({ providedIn: 'root' })\nexport class FeesService {\n    constructor(protected store: FeesStore, private http: HttpClient, private session: SessionService) {}\n\n    public fetchAsObservable(): Observable<IFee[]> {\n        return forkJoin([\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'AU',\n                },\n            }),\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'AG',\n                },\n            }),\n            this.http.get<IFee[]>(`/users/${this.session.user.id}/fee-schedule`, {\n                params: {\n                    currencyCode: 'USD',\n                },\n            }),\n        ]).pipe(\n            map(([goldFees, silverFees, usdFees]) => [...goldFees, ...silverFees, ...usdFees]),\n            tap(fees => {\n                this.store.set(fees)\n            })\n        )\n    }\n\n    public fetch(): void {\n        this.fetchAsObservable().subscribe(() => undefined)\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoggedInAuthGuard } from '../common/logged-in.auth-guard'\nimport { FeesComponent } from './fees.component'\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: FeesComponent,\n        canActivate: [LoggedInAuthGuard],\n    },\n]\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class FeesRoutingModule {}\n"],"sourceRoot":"webpack:///"}